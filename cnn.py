#%%
import csv
import datetime
import json
import math
import os
import pickle
import random
import subprocess
import time

from enum import Enum
from random import sample
from sklearn import preprocessing
import numpy as np
import pandas as pd
import plotly.express as px
import pylab as plt
import scipy
import tensorflow as tf
from keras import backend as K
from keras import regularizers
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.models import Model, load_model
from keras.utils import np_utils
from scipy.interpolate import interp1d
from scipy.optimize import minimize
# import plotly.express as px
# import plotly.graph_objects as go
# import pylab as plt
# from plotly.subplots import make_subplots
from scipy.signal import (decimate, filtfilt, find_peaks, firwin, hilbert,
                          lfilter, peak_prominences, savgol_filter)
from sklearn import datasets, metrics, preprocessing
from sklearn.cluster import KMeans
from sklearn.metrics import (accuracy_score, classification_report,
                             confusion_matrix)
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras.layers import (GRU, LSTM, Activation, AveragePooling1D,
                                     BatchNormalization, Bidirectional, Conv1D,
                                     Conv2D, Dense, Dropout, Flatten,
                                     GlobalAveragePooling1D, Input,
                                     MaxPooling1D, MaxPooling2D, Reshape,
                                     concatenate)
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tqdm import tqdm

import filter
import performance as pf
import read_data as rd
from alg_freq_domain import Alg_freq_domain

#%%

class Alg_freq_domain():
    def __init__(self, fs=64, fft_window_size=16): #fft_window_size=30
        self.acc_x = []
        self.acc_y = []
        self.acc_z = []
        self.fft_window_size = fft_window_size
        self.fs = fs
        # =========Parameters==========
        self.max_overlap = 7
        self.iteration_times = 1
        self.overlap_weight = np.array([1, 1, 1, 1, 1, 1, 1])
        self.overlap_weight_default = np.array([1, 1, 1, 1, 1, 1, 1])
        self.bdt_weight = 0.4
        self.als_threshold = 4
        self.engine_threshold = 2
        self.reliable_threshold = 0.75
        self.reserved_freq_lower_bound = int(self.fft_window_size / 3)    # 10
        self.reserved_freq_upper_bound = int(self.fft_window_size * 10)   # 300
        self.SITTING_THRESHOLD = 3000000
        self.DRIVING_THRESHOLD = 4 
        self.IDLE_THRESHOLD = 0.8 # 0.8
        self.MOVEMENT_THRESHOLD_LIMIT = 0.025 # 0.025
        self.scenario_clip_th_para = 3
        self.ss_t_len = 6  # default:5 
        self.threshold_nobody_std = 500
        # ==========Flags===============
        # 0: No Spectrum subtraction, 1: ALS, 2: Direct ss, 3: spec_sub_trans, 4: spec_sub_old, 5: spec_sub_diff
        self.USE_SPECTRUM_SUBTRACTION = 5
        # 0: No Filter, 1: FIR filter, 2: IIR filter
        self.USE_FILTER = 2
        self.USE_TIME_FUSION = 0
        self.USE_BDT = 1
        self.USE_ENGINE_DENOISE = 1
        self.USE_TRANSFER_FUNC = 1
        self.USE_BPM_POST_PROCESSING = 1
        self.USE_NO_JUMP_BPM = 1
        self.USE_GET_RPM = 1
        self.USE_LOADED_OVERLAP_WEIGHT = 2 # 0: generate list, 1: load stored list, 2: use default list
        self.USE_WHOLE_LOG_TRANSFER_FUNC = 0
        self.USE_WHOLE_LOG_SCENARIO = 0
        self.USE_HIGH_HR_STRATEGY = 1       #by mads
        self.USE_SLIGHT_MOVE_STRATEGY = 0   #by mads
        self.USE_EGINE_DETECT_EXTEND = 1    #by mads
        self.USE_NEW_NO_VITAL_SIGN = 1      #by mads
        self.USE_STATE_MECHINE = 1          #by mads
        self.USE_TRAIN_FOR_DEEPBREATH = 0
        self.USE_EXTEND_FFT_RESOLUTION = 0
        self.USE_REAL_DECIMATE = 1
        self.USE_ORIGIN_STFT = 0
        self.USE_CHECK_STATUS_AFTER_SS = 1
        # ==========Filter==============
        self.bpm_filter_order = 3
        self.bpm_p_cutoff_freq = [0.75, 3.5]
        # self.bpm_p_cutoff_freq = [1.6, 10]
        self.bpm_g_cutoff_freq = [1.6, 15.5]#[1.6, 31.5]
        self.rpm_filter_order = 2
        self.rpm_cutoff_freq = [0.05, 1]
        self.bpm_search_lower = int(self.fft_window_size*25/30) # 25
        self.bpm_search_upper = int(self.fft_window_size*55/30) # 55
        self.bpm_overlap_upper = int(self.fft_window_size*60/30) # 60
        self.bpm_engine_search_lower = int(self.fft_window_size*150/30) #150
        # ==============================
        self.ground_truth_bpm = np.array([])
        self.stable_index = []
        self.p_sensor_data = np.array([])
        self.g_sensor_data = np.array([])
        self.filter_p_sensor_data = np.array([])
        self.filter_g_sensor_data = np.array([])
        self.filter_time_bpm_data = np.array([])
        self.filter_time_g_sensor_data = np.array([])
        self.status = np.array([])
        self.confidence_level = [] 
        self.bcg_power = np.array([])
        self.acc_power = np.array([])
        self.ss = np.array([])
        self.nss = np.array([])
        self.tss = np.array([])
        self.time_fusion_data = np.array([])
        self.rpm_s = np.array([])
        self.rpm_data_out = np.array([])
        self.filter_rpm_data = np.array([])
        self.rpm = np.array([])
        self.rpm_overlap = np.array([])
        self.non_filter_g_spec = np.array([])
        self.abs_g_spec = np.array([])
        self.bpm_pre = np.array([])
        self.bpm = np.array([])
        self.ss_denoise_overlaped = np.array([])
        self.time_corrcoef = np.array([])
        self.ss_denoise = np.array([])
        self.bpm_interval = np.array([])
        self.engine_noise = np.array([])
        self.similarity = []   #by mads
        self.spec_peak_height = [] # by mads
        self.reliability = []
        self.nss_sum = []      #by mads
        self.engine_peaks = []
        self.bcg_std_power = [] #by mads
        # ============================== ALS ========================================
        self.peaks_locs = np.array([])
        self.peaks_amps = np.array([])
        self.peaks_locs_o = np.array([])
        self.peaks_amps_o = np.array([])
        self.ss_max_arr = np.array([])  # ss normaization value
        self.nss_max_arr = np.array([])  # ss normaization value
        self.ss_status = np.array([])  # ss normaization value
        self.ld = 100
        self.engine_noise_search_range = 2
        self.bpm_no_jump_range = int(self.fft_window_size*5/30) #10
        self.try_range_extend = 0
        self.trans_func_time_len = 120
        self.stft_reduce_scale = 1
        self.decimate_scale = 1
        self.golden_bpm = np.array([])
        self.golden_harmonic_spectrum = np.array([])
        self.ss_clip = np.array([])
        self.nss_clip = np.array([])
        self.state_mechine = 0

    def load_paras_from_json_file(self, filename):                
        with open(filename) as data_file:
            data_loaded = json.load(data_file)
            self.overlap_weight = np.array(data_loaded['overlap_weight'])

    @staticmethod
    def normalization(STFT):
        ss_max = np.zeros(STFT.shape[1])
        for i in range(STFT.shape[1]):
            max_array = np.amax(STFT[:, i])
            ss_max[i] = max_array
            if max_array == 0:
                max_array = 1
            STFT[:, i] = STFT[:, i] / max_array
        return ss_max

    @staticmethod
    def cos_sim(vector_a, vector_b):
        vector_a = vector_a.copy() - 0.5
        vector_b = vector_b.copy() - 0.5
        vector_a = np.mat(vector_a)
        vector_b = np.mat(vector_b)
        num = float(vector_a * vector_b.T)
        denom = np.linalg.norm(vector_a) * np.linalg.norm(vector_b)
        cos = num / denom if denom != 0 else -1
        sim = 0.5 + 0.5 * cos
        return sim

    @staticmethod
    def reserve_freq_band(SS, lower_bound, upper_bound):
        SS[0:lower_bound] = 0
        SS[upper_bound:] = 0

    def spec_sub_direct(self, ss, nss):
        result = np.zeros(ss.shape[0])
        h_range = [self.fft_window_size, self.fft_window_size*10]
        result[h_range[0]:h_range[1]] = normalize_peak(ss[int(h_range[0]):int(h_range[1])]) - normalize_peak((nss[int(h_range[0]):int(h_range[1])]))        
        result[np.where(result<0)] = 0        
        result = normalize_peak(result)       

        return result

    def spec_sub_old(self,ss, nss):
        dr = 3
        heart_beat_range = [self.fft_window_size, self.fft_window_size*10]  # [100, 240]
        result = np.zeros(ss.shape[0])
        ss = ss[int(heart_beat_range[0]):int(heart_beat_range[1])]
        nss = nss[int(heart_beat_range[0]):int(heart_beat_range[1])]
        diff_ss = np.around((ss[dr:] - ss[:-dr]) * 50)
        diff_nss = np.around((nss[dr:] - nss[:-dr]) * 50)
        spec_subtract = diff_ss > diff_nss
        count = 0
        for i in range(len(spec_subtract)):
            if spec_subtract[i]:
                count += 1
                result[i + int(heart_beat_range[0] + 1)] = count ** 0.8
            elif count > 0:
                count -= 1

                result[i + int(heart_beat_range[0] + 1)] = count ** 0.8

        return result

    def spec_sub_diff(self,ss, nss):
        result = np.zeros(ss.shape[0])
        dr = 3
        drh = dr//2
        hr0  = int(self.fft_window_size)
        hr1  = int(self.fft_window_size*10)
        ss  =  ss[hr0:hr1]
        nss = nss[hr0:hr1]        
        diff  = (ss[dr:] -  ss[:-dr]) - (nss[dr:] - nss[:-dr])
        for i in range(len(diff)):
            result[i + hr0 + drh] = diff[i]*5+0.6 #*4+0.5
            if result[i + hr0 + drh] < 0:  
                result[i + hr0 + drh] = 0

        return result

    def move(self):

        move = np.zeros(len(self.g_nor))
        for i in range(len(self.g_nor)):
            if np.abs(self.g_nor[i]-self.p_nor[i])>3.88:
                move[i]=1
            else:
                move[i]=0
        move_min=np.zeros(len(self.status))
        for i in range(len(self.status)):
            move_min[i]=np.median(move[i*64:(i+1)*64])
        
        for i in range(len(self.status)):
            if move_min[i]==1:
                self.status[i]+=1
        return self.status
        


    def de_engine_noise(self, ss, nss, engine_noise):
        bound_left = self.bpm_engine_search_lower
        engine_peaks, _ = find_peaks(engine_noise[bound_left:self.fft_window_size*10], height=0.3)

        ss_window = ss[bound_left:self.fft_window_size*10]
        if np.max(ss_window) > 0:
            ss_window = ss_window / np.max(ss_window)
        nss_window = nss[bound_left:self.fft_window_size*10]
        if np.max(nss_window) > 0:
            nss_window = nss_window / np.max(nss_window)

        nss_peaks, _ = find_peaks(nss_window, height=0.3)
        ss_peaks, _ = find_peaks(ss_window, height=0.3)
        if len(engine_peaks) == 0 or len(nss_peaks) == 0 or len(ss_peaks) == 0:
            return ss

        if len(self.engine_peaks) > 0:
            engine_peaks = np.append(engine_peaks, self.engine_peaks[-1])

        peak_list = []
        upper_est = 0
        lower_est = self.fft_window_size*10
        for engine_peak in engine_peaks:
            nss_engine_peak = np.abs(nss_peaks - engine_peak)
            if np.min(nss_engine_peak) < 5:
                close_peak = nss_peaks[np.argmin(nss_engine_peak)]
                ss_engine_peak = np.abs(ss_peaks - close_peak)
                if np.min(ss_engine_peak) < 5:
                    max_peak = ss_peaks[np.argmin(ss_engine_peak)] + bound_left
                    if lower_est <= max_peak <= upper_est:
                        continue
                    max_value = ss[max_peak]
                    upper = max_peak + 1
                    lower = max_peak - 1
                    value = max_value
                    while ss[upper] < value:
                        value = ss[upper]
                        upper += 1

                    top_value = value

                    value = max_value
                    while ss[lower] < value:
                        value = ss[lower]
                        lower -= 1

                    ss[int(lower):int(upper)] = np.linspace(value, top_value, num=int(upper)-int(lower))
                    peak_list.append(max_peak - bound_left)
                    if lower_est > lower:
                        lower_est = lower
                    if upper_est < upper:
                        upper_est = upper
        self.engine_peaks.append(peak_list)
        return ss
    
    def get_trans_func_whole_log(self, ss, nss, status):
        driving_spec = ss[:, status == 5]
        driving_acc = nss[:, status == 5]

        driving_sum = np.sum(driving_spec, axis=1)
        driving_acc_sum = np.sum(driving_acc, axis=1)
        driving_sum[driving_acc_sum == 0] = 1
        driving_acc_sum[driving_acc_sum == 0] = 1
        return driving_sum / driving_acc_sum

    def get_trans_func_clip_log(self, ss, nss, status):
        driving_sum = np.zeros(ss.shape)
        driving_acc_sum = np.zeros(ss.shape)

        if self.trans_func_time_len == 0 or self.trans_func_time_len > 30 * 60:
            self.trans_func_time_len = ss.shape[1]

        for i in range(ss.shape[1]):
            if i < self.trans_func_time_len:
                driving_sum[:, i] = np.sum(ss[:, 0: i + 1][:, status[0: i + 1] == 5], axis=1)
                driving_acc_sum[:, i] = np.sum(nss[:, 0: i + 1][:, status[0: i + 1] == 5], axis=1)
            else:
                driving_sum[:, i] = np.sum(ss[:, i + 1 - self.trans_func_time_len: i + 1][:, status[i + 1 - self.trans_func_time_len: i + 1] == 5], axis=1)
                driving_acc_sum[:, i] = np.sum(nss[:, i + 1 - self.trans_func_time_len: i + 1][:, status[i + 1 - self.trans_func_time_len: i + 1] == 5], axis=1)
        driving_sum[driving_acc_sum == 0] = 1
        driving_acc_sum[driving_acc_sum == 0] = 1
        return driving_sum / driving_acc_sum

    def get_trans_func(self, ss, nss, status):
        if self.USE_WHOLE_LOG_TRANSFER_FUNC == 0:
            self.trans_func = self.get_trans_func_clip_log(ss, nss, status)
        else:
            self.trans_func = self.get_trans_func_whole_log(ss, nss, status)

    def get_ss(self, ss, nss, status, engine_noise):
        ss_status = np.zeros(ss.shape[1]) 
        if self.USE_SPECTRUM_SUBTRACTION == 0:
            return ss, ss_status        

        ss = ss.T
        nss = nss.T
        engine_noise = engine_noise.T
        ss_all = np.copy(ss)

        for i in range(ss.shape[0]):
            #ss_status[i] = 1
            if status[i] > self.als_threshold:
                ss_status[i] = 3
                if self.USE_TRANSFER_FUNC:
                    if len(self.trans_func.shape) == 1:
                        nss[i] = self.trans_func*nss[i]
                    elif len(self.trans_func.shape) == 2:
                        nss[i] = self.trans_func[:, i]*nss[i]
                        #nss[i,np.where(nss[i]>1)] = 1
                if self.USE_SPECTRUM_SUBTRACTION == 1:
                    ss_all[i] = ss_all[i] = self.get_gd_of_one_window_opt(ss[i], nss[i],[self.fft_window_size, self.fft_window_size * 10])  
                elif self.USE_SPECTRUM_SUBTRACTION == 2:
                    ss_all[i] = self.spec_sub_direct(ss[i], nss[i])  
                elif self.USE_SPECTRUM_SUBTRACTION == 4:
                    ss_all[i] = self.spec_sub_old(ss[i], nss[i])  
                elif self.USE_SPECTRUM_SUBTRACTION == 5:
                    ss_all[i] = self.spec_sub_diff(ss[i], nss[i])  
                    #plt.plot(ss_all[i],'r')
                    #plt.plot(self.golden_harmonic_spectrum[:,idx],'g')
                    #plt.show()                    
            elif status[i] > self.engine_threshold and self.USE_ENGINE_DENOISE:
                ss_status[i] = 4
                ss_all[i] = self.de_engine_noise(ss[i], nss[i], engine_noise[i])  # org
                #ss_all[i] = self.spec_sub_diff(ss[i], nss[i],i)  

        return ss_all.T, ss_status

    def cost_function(self, a, x, y):
        z = (y - a * x)
        d2z = (z[2:]) - 2 * (z[1:-1]) + (z[0:-2])
        w = np.ones(len(a)) * 0.1
        w[z <= 0] = round((1 - 0.1) * 2 / (1 + math.exp(1)), 3)
        fit = np.sum(w * (z ** 2))
        smooth = np.sum(d2z ** 2)
        return fit + self.ld * smooth

    def get_gd_of_one_window_opt(self, BCG, ACC, prs_range):
        bcg = BCG[prs_range[0]:prs_range[1]]
        acc = ACC[prs_range[0]:prs_range[1]]
        scaling = np.ones(bcg.size) * 1
        SS = np.zeros(BCG.size)
        scaling_best = minimize(self.cost_function, scaling, args=(acc, bcg), method='Powell', tol=0.1).x
        ss = bcg - scaling_best * acc
        SS[prs_range[0]:prs_range[1]] = ss
        SS = SS - min(SS)  # Jimmy
        return SS  # Jimmy
    #self.fft_window_size
    def get_overlap_spectrum(self, STFT, overlap_weight):
        stft_overlap = np.zeros((STFT.shape[0], STFT.shape[1]))
        for i in range(0, self.bpm_overlap_upper *2):
            for j in range(len(overlap_weight)):
                if ((i + 1) * (j + 1)) < STFT.shape[0]:
                    moving_max = np.mean(STFT[i * (j + 1): (i + 1) * (j + 1)], axis=0)
                    stft_overlap[i] += moving_max * overlap_weight[j]
        return stft_overlap      

    def compensate_overlap_spectrum(self, stft_overlap_in, overlap_weight):
        stft_overlap = np.zeros((stft_overlap_in.shape[0], stft_overlap_in.shape[1]))
        for i in range(self.bpm_overlap_upper):
            reimburse = 0
            count = 0
            for j in range(7):
                for k in range(j):
                    idx = int(i*(k+1)/(j+1) + 0.5)
                    #if np.mean(stft_overlap_in[idx])>0.1:
                    if (k+1)/(j+1)>0.4 and k!=j :
                        reimburse += stft_overlap_in[idx] * overlap_weight[k] * overlap_weight[j]
                        count += 1 

            sss2 = (stft_overlap_in[i] + reimburse/count) #*2+0.5
            sss2[sss2 < 0] = 0
            stft_overlap[i] = sss2
        return stft_overlap

    def get_overlap_index(self,ssi, bpm_peak):
        peak_num = 0
        overlap_index = 0
        for mul in range(1, self.max_overlap + 1):
            overlap_ss = ssi[::mul]
            peaks, _ = find_peaks(overlap_ss, height=0.5)
            if not peaks.any():
                continue
            diff = np.abs(peaks - bpm_peak)
            min_index = np.argmin(diff)
            min_diff = diff[min_index]
            if min_diff < 2:
                overlap_index += 1 << (mul - 1)
                peak_num += 1
        return overlap_index, peak_num

    def get_overlap_index_mads(self,ssi, bpm_peak):
        peak_num = 0
        overlap_index = 0
        for mul in range(1, self.max_overlap + 1):
            overlap_ss = ssi[::mul]
            heigh = 0.5
            while heigh >= 0.4 : 
                peaks, _ = find_peaks(overlap_ss, height=heigh)                
                if len(peaks) > 2 :
                    diff_peaks = peaks[1:] - peaks[:-1]
                    if (abs((diff_peaks) - 2*bpm_peak) <= 2).all() and mul ==1:
                        bpm_peak = bpm_peak *2
                    break
                else:
                    heigh -= 0.1
            if not peaks.any():
                continue        
            diff = np.abs(peaks - bpm_peak)
            min_index = np.argmin(diff)
            min_diff = diff[min_index]
            if min_diff < 2:
                overlap_index += 1 << (mul - 1)
                peak_num += 1

        return overlap_index, peak_num, bpm_peak

    def overlap_index_2_weight(self, overlap_index):
        overlap_weight = np.zeros(self.max_overlap)
        if overlap_index == 0:
            overlap_weight[1:5] = 1        
        else:
            for mul in range(self.max_overlap):
                overlap_weight[mul] = (overlap_index >> mul) & 1
        return overlap_weight

    def get_overlap_list(self, confidence_level, bpm_spectrum):
        if self.USE_LOADED_OVERLAP_WEIGHT == 1:
            return self.overlap_weight
        elif self.USE_LOADED_OVERLAP_WEIGHT == 2:
            return self.overlap_weight_default

        ss = self.ss_denoise.T
        count_overlap_index =  np.zeros(2**self.max_overlap)
        overlap_index_selected = 0
        list_peak_num = []
        for i in range(len(ss)):#len(ss)
            # in static and idle and confidence_level 1    
            overlap_index, peak_num, bpm_peak = self.get_overlap_index_mads(ss[i], bpm_spectrum[i])        
            list_peak_num.append(peak_num)
            if confidence_level[i] and (self.status[i] == 1 or self.status[i] == 3):
                bpm_peak = 0
                if self.USE_HIGH_HR_STRATEGY :
                    overlap_index, peak_num, bpm_peak = self.get_overlap_index_mads(ss[i], bpm_spectrum[i])
                else:
                    overlap_index, peak_num = self.get_overlap_index(ss[i], bpm_spectrum[i])
                if peak_num>=4:
                    count_overlap_index[overlap_index] += 1
                elif peak_num > 2 and bpm_peak > 55:
                        count_overlap_index[overlap_index] += 1
                # elif peak_num >= 2 and bpm_peak < 35:
                #     count_overlap_index[overlap_index] += 1

                if count_overlap_index[overlap_index] >= 4:
                    overlap_index_selected = overlap_index
                    break
        if self.USE_HIGH_HR_STRATEGY and (overlap_index_selected <= 7 and overlap_index_selected > 0):
            self.bpm_search_upper  = int(self.fft_window_size*70/30) 
            self.bpm_overlap_upper = int(self.fft_window_size*70/30)
        overlap_weight = self.overlap_index_2_weight(overlap_index_selected)
        print('time to get overlap index:%d, overlap weight: [%d,%d,%d,%d,%d,%d,%d], overlap_index: %d' % (i, overlap_weight[0], overlap_weight[1], overlap_weight[2], overlap_weight[3], overlap_weight[4], overlap_weight[5], overlap_weight[6], overlap_index_selected))
        return overlap_weight

    def get_range_peak_idx(self, spectrum, lower, upper):
        result_bpm = []
        self.bpm_interval = np.zeros(spectrum.shape)
        self.bpm_interval[lower:upper] = np.copy(spectrum[lower:upper])
        self.normalization(self.bpm_interval)
        bpm_interval = self.bpm_interval.T

        for i in range(len(bpm_interval)):
            result_bpm.append(np.argmax(bpm_interval[i]))

        result_bpm = np.array(result_bpm)
        return result_bpm


    def get_bpm_final(self, bpm_overlap_data, lower, upper, status=np.array([])):
        result_bpm = []
        stable_index_list = []
        self.bpm_interval = np.zeros(bpm_overlap_data.shape)
        self.bpm_interval[lower:upper] = np.copy(bpm_overlap_data[lower:upper])
        self.normalization(self.bpm_interval)
        bpm_interval = self.bpm_interval.T

        for i in range(len(bpm_interval)):
            '''Slight body movement by mads'''
            if self.USE_SLIGHT_MOVE_STRATEGY == 1:
                if status[i] == 3 and len(stable_index_list) > 5:
                    truth_peak_index = np.median(np.copy(stable_index_list[(len(stable_index_list) + 1) % 2:]))
                    if abs(np.argmax(bpm_interval[i]) - truth_peak_index) > 10:
                        status[i] += 1
            '''extend serarching range for people with low HR by mads'''
            if self.try_range_extend == 1:
                if np.mean(stable_index_list) > upper - 5  or np.mean(stable_index_list) < lower + 5:
                    lower -= 5
                    upper += 5
                    self.bpm_interval = np.zeros(bpm_overlap_data.shape)
                    self.bpm_interval[lower:upper] = np.copy(bpm_overlap_data[lower:upper])
                    self.normalization(self.bpm_interval)
                    bpm_interval = self.bpm_interval.T
            if self.USE_TRAIN_FOR_DEEPBREATH == 1 and (status[i] == 2 or status[i] == 4):
                status[i] -= 1

            if len(status) == 0 or self.USE_BDT == 0:
                truth_peak_index = np.argmax(bpm_interval[i])
            elif (status[i] == 1 or status[i] == 3) and self.confidence_level[i] == 1:
                self.stable_index.append(i)
                truth_peak_index = np.argmax(bpm_interval[i])
                stable_index_list.append(truth_peak_index)
                if len(stable_index_list) > 10: # TODO
                    stable_index_list.pop(0)
            elif i <= 6:
                truth_peak_index = np.argmax(bpm_interval[i])
            else:
                if len(stable_index_list) == 0:
                    truth_peak_index = np.argmax(bpm_interval[i])
                else:
                    if (self.confidence_level[i] == 1) and (self.confidence_level[i-1] == 1) :
                        stable_index_list.append(truth_peak_index) # TODO
                    truth_peak_index = np.median(np.copy(stable_index_list[(len(stable_index_list) + 1) % 2:]))
                    height = 0.5
                    peaks, _ = find_peaks(bpm_interval[i], height=height)
                    peak_candidate_amp = bpm_interval[i][peaks]
                    # determind the strategy to get bpm within the status that is not stable
                    # add the strategy for status of 0 and -1 by mads
                    if status[i] == -1:
                        truth_peak_index = np.median(stable_index_list)
                    elif len(peaks) > 2:
                        truth_peak_index = self.decide_rule_bdt(peak_candidate_amp, peaks, truth_peak_index)
                    elif status[i] == 0:
                        truth_peak_index = np.median(stable_index_list)
                    else:
                        truth_peak_index = np.argmax(bpm_interval[i])

                if self.USE_NO_JUMP_BPM == 1: # fix PVT_2020-11-11-18-55        
                    if i>self.bpm_no_jump_range:
                        mm_bpm = np.median(result_bpm[-(self.bpm_no_jump_range-1):])
                        if (truth_peak_index - mm_bpm)>self.bpm_no_jump_range:
                            truth_peak_index = mm_bpm + 2
                        elif (truth_peak_index - mm_bpm) < -self.bpm_no_jump_range:
                            truth_peak_index = mm_bpm - 2
   
            if status[i] > 0 :
                last_status = status[i]
            result_bpm.append(truth_peak_index)

        result_bpm = np.array(result_bpm)
        result_bpm = result_bpm * 60 / self.fft_window_size + 1
        return result_bpm

    @staticmethod
    def get_peak_sorted(ss, height, dis):
        if dis>0:
            peaks_loc, peak_property = find_peaks(ss, height=height, distance=dis ) 
        else:
            peaks_loc, peak_property = find_peaks(ss, height=height ) 
        peaks_height = peak_property['peak_heights']
        bb = np.argsort(peaks_height)
        cc = bb[::-1]
        peaks_loc_sort = peaks_loc[cc]
        peaks_height_sort = peaks_height[cc]

        return peaks_loc_sort, peaks_height_sort, peaks_loc, peaks_height

    def get_peaks_array(self, bpm_overlap_data, dis):
        default_peak_len = 8
        peaks_locs_sort = np.zeros((bpm_overlap_data.shape[1],default_peak_len))
        peaks_amps_sort = np.zeros((bpm_overlap_data.shape[1],default_peak_len))

        for i in range(bpm_overlap_data.shape[1]):
            peaks_loc_sort, peaks_height_sort, peaks_loc, peaks_height = self.get_peak_sorted(bpm_overlap_data[:,i], 0.2, dis)
            if len(peaks_loc) > default_peak_len:
                peak_len = default_peak_len
            else:
                peak_len = len(peaks_loc)

            for i1 in range(peak_len): 
                peaks_locs_sort[i][i1] = peaks_loc_sort[i1]
                peaks_amps_sort[i][i1] = peaks_height_sort[i1]

        return peaks_locs_sort, peaks_amps_sort

    @staticmethod
    def dismantling(f_data, lower, upper):
        interval = np.copy(f_data[lower:upper])
        return np.array(interval)

    @staticmethod
    def get_rpm(rpm_interval_data, lower):
        rpm_result = np.argmax(rpm_interval_data, axis=1)
        rpm_result = (rpm_result + lower)
        return rpm_result

    def decide_rule_bdt(self, ss_candidate_amp, ss_candidate_index, truth_peak_index):
        peak_sep = np.abs(ss_candidate_index - truth_peak_index)
        peak_sep_decay = np.exp(-2 * (peak_sep*self.bdt_weight) ** 2)
        peak_amp = ss_candidate_amp ** 1.5
        truth_peak_index = ss_candidate_index[np.argmax(peak_sep_decay * peak_amp)]
        return truth_peak_index

    @staticmethod
    def exclude_abnormal_peak(acc_signal):
        down_acc_window = acc_signal
        down_acc_window = np.abs(down_acc_window - np.mean(down_acc_window))
        down_acc_window_peaks, _ = find_peaks(down_acc_window)
        if len(down_acc_window_peaks)!= 0:
            peaks_mean = np.mean(down_acc_window[down_acc_window_peaks])
        else:
            return []

        over_peaks = down_acc_window_peaks[down_acc_window[down_acc_window_peaks] > peaks_mean * 2]
        for max_peak in over_peaks:
            max_value = down_acc_window[max_peak]
            upper = max_peak + 1
            lower = max_peak - 1
            value = max_value
            while down_acc_window[upper] < value: # find upper valley location
                value = down_acc_window[upper]
                upper += 1
                if upper >= len(down_acc_window):
                    break

            value = max_value
            while down_acc_window[lower] < value: # fine lower valley location
                value = down_acc_window[lower]
                lower -= 1
                if lower <= 0:
                    break

            down_acc_window[int(lower):int(upper)] = down_acc_window[int(lower):int(upper)] * peaks_mean / max_value
        return down_acc_window

    def get_scenario_whole_log(self, filter_bcg_signal, filter_acc_signal, acc_org_peak_ratio):
        start = 0
        window = self.fs
        result = np.zeros(int((len(filter_acc_signal) + window-1) / window))
        down_acc_power = np.zeros(int((len(filter_acc_signal) + window-1) / window))
        bcg_mean_power = np.zeros(int((len(filter_acc_signal) + window-1) / window))

        search_bound = len(filter_acc_signal) - window * (self.ss_t_len-1)
        while start < search_bound:
            i = int(start / window)
            bcg_window = filter_bcg_signal[start: start + window * self.ss_t_len]
            acc_window = filter_acc_signal[start: start + window * self.ss_t_len]
            down_acc_power[i] = np.mean(self.exclude_abnormal_peak(acc_window))
            bcg_mean_power[i] = np.mean(np.abs(bcg_window)) - np.abs(np.mean(bcg_window))
            start += window

            curr_state = 0
            if down_acc_power[i] > self.DRIVING_THRESHOLD:
                if down_acc_power[i] < self.IDLE_THRESHOLD:
                    curr_state = 1
                else:
                    curr_state = 5
            elif down_acc_power[i] > self.IDLE_THRESHOLD:
                if acc_org_peak_ratio[i] == 1:
                    curr_state = 3
                else:
                    curr_state = 1                    
            else:
                curr_state = 1
            result[i + 2] = curr_state    

        result = self.moving_median(result, 2)
        acc_max_idx = np.argmax(down_acc_power)
        bcg_seq_max = bcg_mean_power[acc_max_idx]
        acc_seq_max = down_acc_power[acc_max_idx]
        if acc_seq_max == 0:
            acc_seq_max = 1
        if bcg_seq_max == 0:
            bcg_seq_max = 1        
        power_diff = bcg_mean_power /bcg_seq_max - down_acc_power / acc_seq_max
        power_diff[power_diff < 0] = 0

        motion_threshold = [0,0,0,0,0,0,0]
        for curr_state in [1,3,5]:
            motion_threshold[curr_state] = 1
            if np.sum(result == curr_state) != 0:
                motion_threshold[curr_state] = np.mean(power_diff[result == curr_state])
                if motion_threshold[curr_state] < self.MOVEMENT_THRESHOLD_LIMIT:
                    motion_threshold[curr_state] = self.MOVEMENT_THRESHOLD_LIMIT
            result[np.logical_and(result == curr_state, power_diff > (motion_threshold[curr_state] / 2))] += 1

        self.acc_power = down_acc_power
        self.bcg_power = bcg_mean_power
        half_t_len = round(self.ss_t_len/2)
        return np.array(result[half_t_len-1:-half_t_len])
        
    def get_scenario_clip_log(self, filter_bcg_signal, filter_acc_signal, acc_org_peak_ratio):
        start = 0
        window = self.fs
        len_data = int((len(filter_acc_signal) + window-1) / window)
        result = np.zeros(len_data)
        down_acc_power = np.zeros(len_data)
        bcg_mean_power = np.zeros(len_data)
        power_diff     = np.zeros(len_data)
        bcg_std_power  = np.zeros(len_data)
        # loop 1
        while start < len(filter_acc_signal) - window * (self.ss_t_len - 1):
            i = int(start / window)
            half_ss_t = math.ceil(self.ss_t_len / 2) - 1
            if start < window * half_ss_t:
                idx_s = 0
            else:
                idx_s = start - (half_ss_t * window)

            if start > window * (len(filter_acc_signal) // window - self.ss_t_len // 2 - 1):
                idx_e = -1
            else:
                idx_e = start + (self.ss_t_len // 2 + 1) * window
            # consider the percision of status check, the window length could be 1sec and would not affect other function
            idx_s_s = np.max([(start - int(window/2)),0])
            idx_e_s = np.min([(start + int(window/2)), len(filter_acc_signal)-1]) 
            bcg_window_small = filter_bcg_signal[idx_s_s : idx_e_s]
            bcg_std_power[i] = np.nanstd(self.exclude_abnormal_peak(bcg_window_small)) if max(bcg_window_small) != min(bcg_window_small) else 0

            bcg_window = filter_bcg_signal[idx_s : idx_e]
            acc_window = filter_acc_signal[idx_s : idx_e]

            down_acc_power[i] = np.mean(self.exclude_abnormal_peak(acc_window)) 
            bcg_mean_power[i] = np.mean(self.exclude_abnormal_peak(bcg_window))#np.mean(np.abs(bcg_window)) - np.abs(np.mean(bcg_window))
            start += window

            curr_state = 0
            if down_acc_power[i] > self.DRIVING_THRESHOLD:
                if acc_org_peak_ratio[i] == 1 :
                    curr_state = 3
                # elif down_acc_power[i] < self.IDLE_THRESHOLD:
                #     curr_state = 1
                else:
                    curr_state = 5
            # elif down_acc_power[i] > self.IDLE_THRESHOLD:
            else:
                if acc_org_peak_ratio[i] == 1 or result[max(i-1, 0)] == 5:
                    curr_state = 3
                else:
                    curr_state = 1
            # else:
            #     curr_state = 1
            result[i] =  curr_state

            '''compute the similarity between acc and bcg to check vital sign exist by mads'''
            if self.USE_NEW_NO_VITAL_SIGN == 1:
                if len(acc_window) == 0 : # for case which there is no peak in the filter_acc_signal_window
                    self.similarity.append(0)
                else:
                    if max(acc_window) == min(acc_window): # for sepcial case of satasets without acc signal
                        acc_window[0] = 1
                    self.similarity.append(np.corrcoef(bcg_window, acc_window)[0,1]) # TODO correlation no need to normalize

        result = self.moving_mode_status(result, 2)

        if self.USE_CHECK_STATUS_AFTER_SS == 1:
            
            self.bcg_std_power = bcg_std_power           
            self.acc_power = down_acc_power
            self.bcg_power = bcg_mean_power
            return np.array(result[:-(self.ss_t_len - 1)])

        max_power_buffer = 0
        len_result = len(result)  
        max_power_buffer_serial  = np.zeros(len_result) 
        time_check = 0  
        time_after_body_up = -1  
        # loop 2 
        for i in range(len_result):
            idx_pre = np.max([i - (math.ceil(self.ss_t_len / 2) - 1),0])
            idx_end = np.min([i + (self.ss_t_len // 2 + 1), len_result]) 

            '''check the body up or down by mads'''    
            if self.USE_NEW_NO_VITAL_SIGN == 1: #2021-05-17-15-49_changepeople.log
                threshold_body_up = 0.3
                maxi_sec_body_up = 2
                mini_sec_body_up = 2
                # in the first 6 second, the threshold for check body could be decide #mads
                if i == 5:
                    self.compute_std_threshold_nobody(result, bcg_std_power)
                max_power = np.max(bcg_mean_power[idx_pre:idx_end])                
                if result[i] >= 5:
                    continue                 
                if (bcg_mean_power[i] < threshold_body_up*max_power or bcg_mean_power[i] > 2*max_power) and max_power!=0:
                    time_check +=1
                elif time_check >= mini_sec_body_up and (time_after_body_up <= maxi_sec_body_up or bcg_mean_power[i] > threshold_body_up*max_power_buffer):
                    time_check +=1
                else:
                    max_power_buffer = 0
                    time_check = 0

                max_power_buffer_serial[i] = max_power
                if time_check > 0: 
                    if bcg_mean_power[i] == max_power:
                        time_after_body_up = 0
                    else:
                        time_after_body_up += 1
                else:
                    time_after_body_up = -1

                if bcg_std_power[i] < self.threshold_nobody_std and result[i] == 1:
                    result[i] = 0
                if bcg_std_power[i] == 0:
                    result[i] = -1
                if time_check >= mini_sec_body_up :
                    result[i] = -1
                    # result[i-1] = -1
                    max_power_buffer = max(max_power_buffer, max_power)



        if self.USE_STATE_MECHINE == 1 and self.USE_CHECK_STATUS_AFTER_SS == 0:
            result = self.moving_mode_status(result, 2)
            result = self.check_state_by_mechine(result) 


        # loop 3
        for i in range(len_result):
            motion_threshold = [0,0,0,0,0,0,0]
            idx_pre = np.max([i - (math.ceil(self.ss_t_len / 2) - 1),0])
            idx_end = np.min([i + (self.ss_t_len // 2 + 1), len_result]) 
            #======clip from last for loop 2========
            if i == 0 :
                for j in range(idx_end):
                    idx_pre_sub = np.max([j - (math.ceil(self.ss_t_len / 2) - 1),0])
                    idx_end_sub = np.min([j + (self.ss_t_len // 2 + 1), len_result]) 

                    acc_max_idx = idx_pre_sub + np.argmax(down_acc_power[idx_pre_sub: idx_end_sub])
                    bcg_seq_max = bcg_mean_power[acc_max_idx]
                    acc_seq_max = down_acc_power[acc_max_idx]
                    if bcg_seq_max!=0 and acc_seq_max!=0:
                        power_diff[j] = bcg_mean_power[j] / bcg_seq_max - down_acc_power[j] / acc_seq_max
                    if power_diff[j] < 0 : 
                        power_diff[j] = 0
            elif i < len_result:
                idx_pre_sub = np.max([(idx_end-1) - (math.ceil(self.ss_t_len / 2) - 1),0])
                idx_end_sub = np.min([(idx_end-1) + (self.ss_t_len // 2 + 1), len_result]) 
                acc_max_idx = idx_pre_sub + np.argmax(down_acc_power[idx_pre_sub: idx_end_sub])
                bcg_seq_max = bcg_mean_power[acc_max_idx]
                acc_seq_max = down_acc_power[acc_max_idx]
                if bcg_seq_max!=0 and acc_seq_max!=0:
                    power_diff[(idx_end-1)] = bcg_mean_power[(idx_end-1)] / bcg_seq_max - down_acc_power[(idx_end-1)] / acc_seq_max
                if power_diff[(idx_end-1)] < 0 : 
                    power_diff[(idx_end-1)] = 0

            #======================================
            for curr_state in [1,3,5]:
                motion_threshold[curr_state] =  1
                if np.sum(result[idx_pre: idx_end] == curr_state) != 0:
                    motion_threshold[curr_state] =  np.mean(power_diff[idx_pre: idx_end][result[idx_pre: idx_end] == curr_state])
                    if motion_threshold[curr_state] < self.MOVEMENT_THRESHOLD_LIMIT:
                        motion_threshold[curr_state] = self.MOVEMENT_THRESHOLD_LIMIT 
                if result[i] == curr_state and (power_diff[i] > (motion_threshold[curr_state] * self.scenario_clip_th_para)):
                    result[i] += 1


        # half_t_len = round(self.ss_t_len/2)
        return np.array(result[:-(self.ss_t_len - 1)])


    def check_normal_move(self):
        len_result = len(self.status)
        power_diff     = np.zeros(len_result)
        result         = np.copy(self.status)
        down_acc_power = np.copy(self.acc_power)
        bcg_mean_power = np.copy(self.bcg_power)

        for i in range(len_result):
            motion_threshold = [0,0,0,0,0,0,0]
            idx_pre = np.max([i - (math.ceil(self.ss_t_len / 2) - 1),0])
            idx_end = np.min([i + (self.ss_t_len // 2 + 1), len_result]) 
            if i == 0 :
                for j in range(idx_end):
                    idx_pre_sub = np.max([j - (math.ceil(self.ss_t_len / 2) - 1),0])
                    idx_end_sub = np.min([j + (self.ss_t_len // 2 + 1), len_result]) 

                    acc_max_idx = idx_pre_sub + np.argmax(down_acc_power[idx_pre_sub: idx_end_sub])
                    bcg_seq_max = bcg_mean_power[acc_max_idx]
                    acc_seq_max = down_acc_power[acc_max_idx]
                    if bcg_seq_max!=0 and acc_seq_max!=0:
                        power_diff[j] = bcg_mean_power[j] / bcg_seq_max - down_acc_power[j] / acc_seq_max
                    if power_diff[j] < 0 : 
                        power_diff[j] = 0
            elif i < len_result:
                idx_pre_sub = np.max([(idx_end-1) - (math.ceil(self.ss_t_len / 2) - 1),0])
                idx_end_sub = np.min([(idx_end-1) + (self.ss_t_len // 2 + 1), len_result]) 
                acc_max_idx = idx_pre_sub + np.argmax(down_acc_power[idx_pre_sub: idx_end_sub])
                bcg_seq_max = bcg_mean_power[acc_max_idx]
                acc_seq_max = down_acc_power[acc_max_idx]
                if bcg_seq_max!=0 and acc_seq_max!=0:
                    power_diff[(idx_end-1)] = bcg_mean_power[(idx_end-1)] / bcg_seq_max - down_acc_power[(idx_end-1)] / acc_seq_max
                if power_diff[(idx_end-1)] < 0 : 
                    power_diff[(idx_end-1)] = 0

            for curr_state in [1,3,5]:
                motion_threshold[curr_state] = 1
                if np.sum(result[idx_pre: idx_end] == curr_state) != 0:
                    motion_threshold[curr_state] =  np.mean(power_diff[idx_pre: idx_end][result[idx_pre: idx_end] == curr_state])
                    if motion_threshold[curr_state] < self.MOVEMENT_THRESHOLD_LIMIT:
                        motion_threshold[curr_state] = self.MOVEMENT_THRESHOLD_LIMIT 
                if result[i] == curr_state and (power_diff[i] > (motion_threshold[curr_state] * self.scenario_clip_th_para)):
                    result[i] += 1
        return result


    def get_scenario(self, filter_bcg_signal, filter_acc_signal, acc_org_peak_ratio):
        
        if self.USE_WHOLE_LOG_SCENARIO == 0:
            result = self.get_scenario_clip_log(filter_bcg_signal, filter_acc_signal, acc_org_peak_ratio)
        else:
            result = self.get_scenario_whole_log(filter_bcg_signal, filter_acc_signal, acc_org_peak_ratio)

        return result

    def compute_std_threshold_nobody(self, status, std_serial):
        counts = [0] * 7
        for i in status[:6]:
            counts[int(i) + 1] += 1
        self.state_mechine = np.argmax(counts) - 1
        if self.state_mechine == 0 :
            self.threshold_nobody_std = max(std_serial[:6])
            print("threshold_nobody_std is ", int(self.threshold_nobody_std))               


    def check_state_by_mechine(self, status):        
    
        status[self.ss_t_len - 1] = self.state_mechine
        for i in range(self.ss_t_len , len(status)):
            if status[i] * self.state_mechine == 0 and status[i] + self.state_mechine > 0:
                if status[i - 1] == -1:
                    self.state_mechine = status[i]
                else:
                    status[i] = status[i - 1]
        return status


    def calc_variance(self, data):
        CALC_VARIANCE_LEVEL_AMOUNT =  5000 #12500
        CALC_VARIANCE_LEVEL_NUM = 15
        var = np.zeros(CALC_VARIANCE_LEVEL_NUM)
        temp = abs(data) / CALC_VARIANCE_LEVEL_AMOUNT
        for i in range(len(temp)):
            if temp[i] > CALC_VARIANCE_LEVEL_NUM - 1:
                var[CALC_VARIANCE_LEVEL_NUM - 1] +=1
            else:
                var[int(temp[i])] += 1
        return var


    def find_peak_local_height(self, spec, peak_idx):
        min_index = int(peak_idx)
        lower_min = spec[min_index]

        min_index -= 1
        while min_index >= 0 and spec[min_index] < lower_min:
            lower_min = spec[min_index]
            min_index -= 1

        min_index = int(peak_idx)
        upper_min = spec[min_index]
        min_index += 1
        while min_index <= self.fft_window_size*10 and spec[min_index] < upper_min:
            upper_min = spec[min_index]
            min_index += 1

        return spec[int(peak_idx)] * 2 - upper_min - lower_min

    def get_confidence_level(self, spec_data, peak_index, status):
        spec_data = spec_data.T
        result = []
        list_peak_height = []
        list_overlap_index = []

        for i in range(len(peak_index)):
            peak_height = self.find_peak_local_height(spec_data[i], peak_index[i])
            overlap_index, peak_num = self.get_overlap_index(spec_data[i], peak_index[i] )
            list_peak_height.append(peak_height)
            list_overlap_index.append(peak_num)
            if status[i] <= 4:
                result.append(peak_height > self.reliable_threshold)
            else:
                result.append( (overlap_index > 2) and (peak_height > self.reliable_threshold))

        return np.array(result), np.array(list_peak_height)


    def get_engine_noise(self, spec_data):
        spec_data_overlap = np.zeros((spec_data.shape[0], spec_data.shape[1]))
        overlap_weight = [1, 1, 1, 1]
        if self.USE_EGINE_DETECT_EXTEND == 1:
            self.bpm_engine_search_lower = int(self.fft_window_size*3/self.stft_reduce_scale)
        for i in range(self.bpm_engine_search_lower, self.fft_window_size*10):
            for j in range(len(overlap_weight)):
                search_bound = self.fft_window_size*self.fs/2/self.stft_reduce_scale/self.decimate_scale
                if i*(j+1) < search_bound:
                    moving_max = np.amax(spec_data[i*(j+1): (i+1)*(j+1)], axis=0)
                    if j == 0 :
                        if self.USE_EGINE_DETECT_EXTEND == 1: # add by mads
                            moving_max[moving_max < 0.7] = 0  # hint: it is better to modified the weight by seconds but 
                        else:                                 # in here it would cost so much runtime. it may be further 
                            continue                          # studyed before the porting on the C code

                    spec_data_overlap[i] += moving_max * overlap_weight[j]

        return spec_data_overlap

    @staticmethod
    def moving_median(ppi, half_range):
        ppi1 = np.copy(ppi)
        for i in range(half_range, len(ppi) - half_range):
            ppi1[i] = np.median(ppi[i - half_range:i + half_range+1])
        return ppi1

    @staticmethod
    def moving_mode_status(ppi, half_range):
        ppi1 = np.copy(ppi)
        for i in range(half_range, len(ppi) - half_range):
            counts = [0] * 8
            status = ppi[i - half_range:i + half_range + 1]
            for j in status:
                counts[int(j) + 1] += 1
            ppi1[i] = np.argmax(counts) - 1
        return ppi1

    @staticmethod
    def _post_process_bpm(ppi, status):
        ppi1 = np.copy(ppi)
        for i in range(2, len(ppi) - 2):
            if status[i] < 5:
                ppi1[i] = np.median(ppi[i - 2:i + 3])
            else:
                ppi1[i] = np.mean(ppi[i - 2:i + 3])
        return ppi1

    @staticmethod
    def _pre_process(data, g_sensor_data_x, g_sensor_data_y=[], g_sensor_data_z=[]):
        data = np.array(data)
        data = data - data[0]

        if len(g_sensor_data_y) != 0:
            A = np.array([np.mean(g_sensor_data_x), np.mean(g_sensor_data_y), np.mean(g_sensor_data_z)])
            B = np.array([(g_sensor_data_x), (g_sensor_data_y), (g_sensor_data_z)])
            g_sensor_data = B[np.argmax(abs(A))] * np.sign(A[np.argmax(abs(A))])
        else:
            g_sensor_data = g_sensor_data_x

        g_sensor_data = np.array(g_sensor_data)
        g_sensor_data = g_sensor_data - g_sensor_data[0]
        return data, g_sensor_data

    @staticmethod
    def cos_sim(vector_a, vector_b):
        vector_a = vector_a.copy() - 0.5
        vector_b = vector_b.copy() - 0.5
        vector_a = np.mat(vector_a)
        vector_b = np.mat(vector_b)
        num = float(vector_a * vector_b.T)
        denom = np.linalg.norm(vector_a) * np.linalg.norm(vector_b)
        cos = num / denom if denom != 0 else -1
        sim = 0.5 + 0.5 * cos
        return sim

    @staticmethod
    def FIR_filter(fs, lowcut, highcut, data, numtaps=100):
        if isinstance(data, (np.ndarray, list)):
            if fs is None:
                raise ValueError("sampling frequency must be specified!")
            fir_tap = numtaps
            bpm_b = firwin(fir_tap, [lowcut, highcut], pass_zero=False, fs=fs)
            bpm_a = 1.0
            ripple_data = lfilter(bpm_b, bpm_a, data)
            return np.array(ripple_data)
        else:
            raise TypeError(
                "Unknown data type {} to filter.".format(str(type(data))))

    def time_fusion(self, bcg_data, acc_data):
        bcg_data = self.FIR_filter(self.fs, 1, 3, bcg_data)
        acc_data = self.FIR_filter(self.fs, 1, 3, acc_data)

        self.filter_time_bpm_data = bcg_data
        self.filter_time_g_sensor_data = acc_data
        start = 0
        window = 64
        acc_data = np.concatenate((np.array([0, 0, 0, 0, 0]), acc_data), axis=0)
        acc_data = np.concatenate((acc_data, np.array([0, 0, 0, 0, 0])), axis=0)
        result = []
        while start < len(bcg_data):
            bcg_window = bcg_data[start: start + window]
            max_corrcoef = -1

            for i in range(10):
                acc_window = acc_data[start + i: start + i + len(bcg_window)]
                corrcoef = np.corrcoef(bcg_window, acc_window)[0][1]
                if corrcoef > max_corrcoef:
                    offset = i
                    max_corrcoef = corrcoef
            if max_corrcoef < 0.7:
                offset = -1
                result.extend(bcg_window.tolist())
            else:
                acc_window = acc_data[start + offset: start + offset + len(bcg_window)]
                acc_window = np.array(acc_window)
                bcg_window = np.array(bcg_window)
                count = 0
                slice_point = 0
                for i in range(len(bcg_window) - 1):
                    if (int(bcg_window[i]) & int(bcg_window[i + 1])) < 0:
                        count += 1
                        if count == 2:
                            acc_slice = acc_window[slice_point:i]
                            bcg_slice = bcg_window[slice_point:i]
                            if max(acc_slice) == min(acc_slice):
                                scale = 1
                            else:
                                scale = (max(bcg_slice) - min(bcg_slice)) / (max(acc_slice) - min(acc_slice))
                            acc_slice = acc_slice * scale
                            offset = max(bcg_slice) - max(acc_slice)
                            acc_slice = acc_slice + offset
                            bcg_slice = bcg_slice - acc_slice
                            result.extend(bcg_slice.tolist())
                            count = 0
                            slice_point = i

                acc_slice = acc_window[slice_point:]
                bcg_slice = bcg_window[slice_point:]
                if max(acc_slice) == min(acc_slice):
                    scale = 1
                else:
                    scale = (max(bcg_slice) - min(bcg_slice)) / (max(acc_slice) - min(acc_slice))

                acc_slice = acc_slice * scale
                offset = max(bcg_slice) - max(acc_slice)
                acc_slice = acc_slice + offset
                bcg_slice = bcg_slice - acc_slice
                result.extend(bcg_slice.tolist())

            start = start + self.fs

        result = savgol_filter(result, 21, 7)

        return result

    def clip_data(self, input_signal):
        output_signal = input_signal
        clip_range = 20.0
        clip_reduce = 2.0
        clip_th = max(input_signal) / clip_range
        len_p = len(input_signal)
        for i in range(len_p):
            p_value = input_signal[i]
            if abs(p_value) > clip_th:
                amp_d = ((abs(p_value) - clip_th) / clip_th / clip_reduce + 1.0)
                output_signal[i] = input_signal[i] / amp_d
        return output_signal

    def filtering_signal(self, input_signal, cutoff_freq_low, cutoff_freq_high):
        if self.USE_FILTER == 0: # no filter
            output_signal = input_signal
        elif self.USE_FILTER == 1: # FIR filter
            output_signal = self.FIR_filter(self.fs,cutoff_freq_low, cutoff_freq_high, input_signal)
        elif self.USE_FILTER == 2: # IIR filter
            bpm_b, bpm_a = filter.butter_bandpass(cutoff_freq_low, cutoff_freq_high, self.fs, self.bpm_filter_order)
            output_signal = lfilter(bpm_b, bpm_a, input_signal)
        return output_signal

    def get_time_fusion_spectrum(self, ss_denoise,p_sensor_data, g_sensor_data):
        self.time_fusion_data = self.time_fusion(p_sensor_data, g_sensor_data)
        _, _, s = scipy.signal.stft(self.time_fusion_data, window='hamming', nperseg=self.fs * 5, noverlap=self.fs * 4, nfft=self.fs * self.fft_window_size, boundary=None)
        self.tss = np.abs(s[:,1:])
        self.normalization(self.tss)
        ss_denoise[0:100, self.status > self.als_threshold] = self.tss[0:100, self.status > self.als_threshold]
        return ss_denoise

    def get_golden_pickle_data(self,filename):
        with open(filename,'rb') as f:
            golden_data = pickle.load(f)
        return golden_data

    def get_golden_harmonic_spectrum(self, golden_data, spec_len):
        golden_harmonic_spectrum = np.zeros((spec_len,len(golden_data)))
        for i in range(len(golden_data)):
            dd = golden_data[i]
            golden_harmonic_spectrum[int(dd)  ,i] = 1
            golden_harmonic_spectrum[int(dd*2),i] = 1
            golden_harmonic_spectrum[int(dd*3),i] = 1
            golden_harmonic_spectrum[int(dd*4),i] = 1
            golden_harmonic_spectrum[int(dd*5),i] = 1
            golden_harmonic_spectrum[int(dd*6),i] = 1
        return golden_harmonic_spectrum 

    def update_status_other(self):
        result = np.copy(self.status)
        len_result = len(result)        
        max_power_buffer = 0                    
        threshold_body_up = 0.3
        threshold_mean_ss = 0.2
        maxi_sec_body_up = 2
        mini_sec_body_up = 2        
        time_check = 0  
        time_after_body_up = -1  
        mean_ss_denoise = np.mean(self.ss_denoise[int(self.fft_window_size*2):int(self.fft_window_size*7),:],0) 
        len_result = np.min([len(result), len(mean_ss_denoise)])
        for i in range(len_result):

            idx_pre = np.max([i - (math.ceil(self.ss_t_len / 2) - 1),0])
            idx_end = np.min([i + (self.ss_t_len // 2 + 1), len_result])             
            '''check the body up or down by mads'''    

            # in the first 6 second, the threshold for check body could be decide #mads
            if i == 6:
                self.compute_std_threshold_nobody(result, self.bcg_std_power)
            max_power = np.max(self.bcg_power[idx_pre:idx_end])                
            if result[i] >= 5:
                continue                 
            if (self.bcg_power[i] < threshold_body_up*max_power or self.bcg_power[i] > 2*max_power) and max_power!=0:
                time_check +=1
            elif time_check >= mini_sec_body_up and (time_after_body_up <= maxi_sec_body_up or self.bcg_power[i] > threshold_body_up*max_power_buffer):
                time_check +=1
            else:
                max_power_buffer = 0
                time_check = 0

            if time_check > 0: 
                if self.bcg_power[i] == max_power:
                    time_after_body_up = 0
                else:
                    time_after_body_up += 1
            else:
                time_after_body_up = -1

            if self.bcg_std_power[i] < self.threshold_nobody_std and result[i] == 1:
                result[i] = 0
            if self.bcg_std_power[i] == 0: 
                result[i] = -1
            if time_check >= mini_sec_body_up :
                result[i] = -1
                max_power_buffer = max(max_power_buffer, max_power)
            if self.status[i] == 3 and mean_ss_denoise[i] < threshold_mean_ss:
                result[i] = 0

        result = self.moving_mode_status(result, 2)
        result = self.check_state_by_mechine(result)
        return result


    def update_status(self):
        threshold_peak_height_static = 0.55
        threshold_peak_height_idle = 0.3
        threshold_body_up_down = 0.2
        new_status = np.copy(self.status)
        mean_spec_peak_height = 1
        nss_sum = np.sum(np.abs(self.nss[1:] - self.nss[:-1]), axis=0)
        rescale_factor = int(self.fft_window_size/self.decimate_scale/2) 
        for i in range(len(self.status)):
            novital = 0 
            nss_sum_threshold_body_up =  rescale_factor * 1.8
            nss_sum_threshold_no_vital = rescale_factor / 3
            if i > 3:
                mean_spec_peak_height = np.mean(self.spec_peak_height[i-3: i+1])
                if np.mean(self.status[i-3 : i+1]) > 2:
                    nss_sum_threshold_body_up = rescale_factor * 32 
                    nss_sum_threshold_no_vital = rescale_factor / 0.75

            #double check the big move happend
            if nss_sum[i] > nss_sum_threshold_body_up and self.similarity[i] < threshold_body_up_down:
                if i > 2:
                    if new_status[i-1] == -1:
                        new_status[i] = -1
            elif self.status[i] == -1 and self.status[i-1] != -1:
                new_status[i] = 2 if nss_sum_threshold_body_up >= 40 else 4

            # check if the vital signal exist
            if self.status[i] <= 2: 
                if mean_spec_peak_height < threshold_peak_height_static:
                    if nss_sum[i] < 5 :
                        new_status[i] = min(0, self.status[i])  
                    elif nss_sum[i] < nss_sum_threshold_body_up : 
                        new_status[i] = min(-1, self.status[i])                  
            elif self.status[i] <= 4  and (nss_sum[i] > nss_sum_threshold_no_vital  or mean_spec_peak_height < threshold_peak_height_idle):
                new_status[i] = min(0, self.status[i])                

            if new_status[i] > 0 and (new_status[i-1] <= 0 and new_status[i-2] > 0):
                new_status[i-1] = self.status[i-1]

        new_status = self.moving_median(new_status, 1)

        return new_status

    @staticmethod
    def down_sample(in_data, scale):
        return in_data[range(0,len(in_data),scale)]

    def knn_predict(self, pressure_data, acc_x, acc_y, acc_z):
        #
        #
        #
        data = pd.concat([pd.DataFrame(pressure_data), pd.DataFrame(acc_x), pd.DataFrame(
            acc_y), pd.DataFrame(acc_z)], axis=1)
        data.columns = (['pressure_data', 'acc_x',
                        'acc_y', 'acc_z'])

        aa = data
        gap = pd.DataFrame([])
        x_sd = pd.DataFrame([])
        y_sd = pd.DataFrame([])
        z_sd = pd.DataFrame([])
        for i in range(int(len(aa)/64)):
            gap = gap.append([max(aa['pressure_data'][i*64:(i+1)*64-1]) -
                             min(aa['pressure_data'][i*64:(i+1)*64-1])])
            x_sd = x_sd.append([np.std(aa['acc_x'][i*64:(i+1)*64-1])])
            y_sd = y_sd.append([np.std(aa['acc_y'][i*64:(i+1)*64-1])])
            z_sd = z_sd.append([np.std(aa['acc_z'][i*64:(i+1)*64-1])])

        data = pd.concat([x_sd, y_sd, z_sd, gap], axis=1)
        data.columns = (['x_sd', 'y_sd', 'z_sd', 'gap'])

        pp = knn_01.predict(data.iloc[:, [0, 1, 2]])
        data['p3c'] = pp

        # data10 = data[data['p3c'] == 1]
        # #knn_02.score(data10.iloc[:, [3]], data.iloc[:, [4]])

        # pp = knn_02.predict(data10.iloc[:, [3]])
        # data10['p4c'] = pp

        # data2 = data[data['p3c'] != 1]
        # data2['p4c'] = data2['p3c']
        # data = data10.append(data2)
        for i in range(len(pp)):
            if pp[i] == 2:
                pp[i] = 3
            elif pp[i] == 3:
                pp[i] = 5

        return pp

    def get_heart_rate(self, data, g_sensor_data, accx=[], accy=[], accz=[]):
        accx = self.acc_x
        accy = self.acc_y
        accz = self.acc_z
        self.p_sensor_data, self.g_sensor_data = self._pre_process(data, g_sensor_data)

        # filtering
        self.filter_p_sensor_data = self.filtering_signal(self.p_sensor_data, self.bpm_p_cutoff_freq[0], self.bpm_g_cutoff_freq[1]) # TODO USE_REAL_DECIMATE
        self.filter_g_sensor_data = self.filtering_signal(self.g_sensor_data, self.bpm_g_cutoff_freq[0], self.bpm_g_cutoff_freq[1])

        # self.filter_p_sensor_data = self.p_sensor_data
        # self.filter_g_sensor_data =self.g_sensor_data
        if self.USE_EXTEND_FFT_RESOLUTION == 1 or self.USE_REAL_DECIMATE == 1:
            self.decimate_scale = 2
            self.fs = int(self.fs/self.decimate_scale)
        else:
            self.decimate_scale = 1

        # STFT (short time Fourier transform)hamming
        _, _, s  = scipy.signal.stft(self.down_sample(self.filter_p_sensor_data,self.decimate_scale), window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)
        _, _, ns = scipy.signal.stft(self.down_sample(self.filter_g_sensor_data,self.decimate_scale), window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)

        #_, _, s  = scipy.signal.stft(self.filter_p_sensor_data, window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)
        #_, _, ns = scipy.signal.stft(self.filter_g_sensor_data, window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)

        if self.USE_REAL_DECIMATE == 1:
            self.filter_p_sensor_data = self.down_sample(self.filter_p_sensor_data,self.decimate_scale)
            self.filter_g_sensor_data = self.down_sample(self.filter_g_sensor_data,self.decimate_scale)
            self.decimate_scale = 1
        elif self.USE_EXTEND_FFT_RESOLUTION == 1:
            self.fs = int(self.fs*self.decimate_scale)

        self.ss  = np.abs(s [0:self.fs *self.fft_window_size//self.decimate_scale//2,])
        self.nss = np.abs(ns[0:self.fs *self.fft_window_size//self.decimate_scale//2,])
       
        self.golden_harmonic_spectrum = self.get_golden_harmonic_spectrum(self.golden_bpm, self.ss.shape[0])

        # get engine noise
        self.normalization(self.nss)
        self.engine_noise = self.get_engine_noise(self.nss)
        self.normalization(self.engine_noise)

        # get scenario and status
        mean_nss = np.mean(self.nss[int(self.fft_window_size*7):,:],0)
        mean_nss[np.where(mean_nss<0.02)] = 0.02 
        acc_org_peak_ratio = (np.max(self.nss[int(self.fft_window_size*7/self.stft_reduce_scale):,:],0)/mean_nss) > 4
        self.status = self.get_scenario(self.filter_p_sensor_data, self.filter_g_sensor_data, acc_org_peak_ratio)

        self.status = self.knn_predict(data, accx, accy, accz)
        # Spectrum subtraction
        self.reserve_freq_band(self.ss,  self.reserved_freq_lower_bound, self.reserved_freq_upper_bound)
        self.reserve_freq_band(self.nss, self.reserved_freq_lower_bound, self.reserved_freq_upper_bound)
        self.normalization(self.ss)
        self.normalization(self.nss)

        self.ss_clip = np.copy(self.ss)  
        self.nss_clip = np.copy(self.nss)

        self.get_trans_func(np.copy(self.ss), np.copy(self.nss), self.status)
        self.ss_denoise, self.ss_status = self.get_ss(np.copy(self.ss), np.copy(self.nss), self.status, self.engine_noise)

        '''double check the body up-or-down and check the no-vital by mads'''
        if self.USE_NEW_NO_VITAL_SIGN == 1 and self.USE_CHECK_STATUS_AFTER_SS == 1:
           self.status = self.update_status_other() 
           self.status = self.check_normal_move()

        if self.USE_TIME_FUSION:
            self.ss_denoise = self.get_time_fusion_spectrum(self.ss_denoise, self.p_sensor_data, self.g_sensor_data)

        # get overlaped spectrum and candidate peaks
        #self.ss_denoise_overlaped = self.get_overlap_spectrum(self.ss_denoise, self.overlap_weight)
        self.ss_denoise_overlaped = self.get_overlap_spectrum(np.copy(self.ss_denoise), np.array([1,1,1,1,1,1,1]))
        self.ss_denoise_overlaped = self.compensate_overlap_spectrum(np.copy(self.ss_denoise_overlaped), np.array([1,1,1,1,1,1,1]))
        self.normalization(self.ss_denoise_overlaped)
        self.bpm_idx = self.get_range_peak_idx(np.copy(self.ss_denoise_overlaped), self.bpm_search_lower, self.bpm_search_upper)

        # run iteration to get best overlap weighting and bpm results
        self.confidence_level, self.spec_peak_height = self.get_confidence_level(np.copy(self.ss_denoise_overlaped), self.bpm_idx, self.status)

        self.overlap_weight = self.get_overlap_list(self.confidence_level, self.bpm_idx)
        self.ss_denoise_overlaped = self.get_overlap_spectrum(np.copy(self.ss_denoise), self.overlap_weight)
        self.ss_denoise_overlaped = self.compensate_overlap_spectrum(np.copy(self.ss_denoise_overlaped), self.overlap_weight)
        self.normalization(self.ss_denoise_overlaped)
        self.bpm_pre = self.get_bpm_final(np.copy(self.ss_denoise_overlaped), self.bpm_search_lower, self.bpm_search_upper, self.status)
        self.peaks_locs, self.peaks_amps = self.get_peaks_array(self.ss_denoise, int(self.fft_window_size*0.833))
        self.peaks_locs_o, self.peaks_amps_o = self.get_peaks_array(self.ss_denoise_overlaped, 0)

        # heart rate post processing
        if self.USE_BPM_POST_PROCESSING and self.USE_TRAIN_FOR_DEEPBREATH == 0:
            self.bpm = self._post_process_bpm(self.bpm_pre, self.status)
        else:
            self.bpm = self.bpm_pre

        if self.USE_REAL_DECIMATE == 1:
            self.fs = self.fs*2

    def get_respiration_rate(self, data, g_sensor_data):
        rpm_b, rpm_a = filter.butter_bandpass(self.rpm_cutoff_freq[0], self.rpm_cutoff_freq[1], self.fs, self.rpm_filter_order)
        data = data - data[0]

        self.rpm_data_out = lfilter(rpm_b, rpm_a, data)
        self.rpm_data_out = np.around(self.rpm_data_out)
        self.filter_rpm_data = np.copy(self.rpm_data_out)
        self.rpm_data_out = self.rpm_data_out[::2]
        _, _, rpm_s = scipy.signal.stft(self.rpm_data_out, window='hamming', nperseg=self.fs * 10, noverlap=self.fs * 8, nfft=self.fs * self.fft_window_size)

        self.rpm_s = np.abs(rpm_s[:, 1:-1])
        self.normalization(self.rpm_s)
        self.rpm_overlap = self.get_overlap_spectrum(self.rpm_s, [1, 1])
        rpm_interval = self.dismantling(self.rpm_overlap, 3, 30)
        rpm_interval = rpm_interval.T
        self.rpm = self.get_rpm(rpm_interval, 3)
        self.rpm = self.moving_median(self.rpm, 2)
        rpm_list = self.rpm
        x = np.linspace(0, len(rpm_list) - 1, len(rpm_list))
        f = interp1d(x, rpm_list, kind='linear')
        x_new = np.linspace(0, len(rpm_list) - 1, len(rpm_list) * 5 - 4)
        self.rpm = f(x_new)

    #############################################################################################
    def main_func(self, data, g_sensor_data):
        self.get_heart_rate(data, g_sensor_data)
        if self.USE_GET_RPM:
            self.get_respiration_rate(data, g_sensor_data)
        return 0



#%%

cccc=[
    2.471626,17.201916,60.993153,152.412338,309.206696,548.302124,885.820068,1337.102051,1916.731689,
    2638.549316,3515.653809,4560.395508,5784.366211,7198.385254,8812.500000,10636.000000,12677.431641,
    14944.614258,17444.644531,20183.910156,23168.091797,26402.160156,29890.375000,33636.304688,
    37642.843750,41912.238281,46446.082031,51245.316406,56310.253906,61640.585938,67235.382813,
    73093.093750,79211.601563,85588.226563,92219.804688,99102.625000,106232.484375,113604.671875,
    121213.992188,129054.750000,137120.812500,145405.609375,153902.171875,162603.062500,171500.468750,
    180586.234375,189851.875000,199288.609375,208887.375000,218638.875000,228533.484375,238561.281250,
    248712.062500,258975.406250,269340.625000,279796.875000,290333.156250,300938.250000,311600.875000,
    322309.656250,333053.031250,343819.406250,354597.031250,365374.093750,376138.718750,386879.000000,
    397583.031250,408238.875000,418834.718750,429358.656250,439798.812500,450143.437500,460380.687500,
    470498.937500,480486.531250,490332.062500,500024.062500,509551.312500,518902.656250,528067.062500,
    537033.687500,545791.937500,554331.187500,562641.125000,570711.562500,578532.562500,586094.437500,
    593387.625000,600403.000000,607131.625000,613564.812500,619694.125000,625511.375000,631008.437500,
    636177.500000,641011.187500,645502.312500,649644.062500,653430.000000,656853.937500,659910.187500,
    662593.125000,664897.625000,666818.625000,668351.437500,669491.750000,670235.625000,670579.500000,
    670520.000000,670054.312500,669179.750000,667894.125000,666195.562500,664082.500000,661553.812500,
    658608.500000,655245.937500,651465.937500,647268.687500,642654.625000,637624.500000,632179.375000,
    626320.625000,620049.875000,613369.125000,606280.875000,598787.750000,590892.687500,582599.000000,
    573910.375000,564830.812500,555364.625000,545516.500000,535291.312500,524694.312500,513731.187500,
    502407.937500,490731.031250,478707.437500,466344.562500,453650.218750,440632.656250,427300.531250,
    413662.812500,399728.812500,385508.093750,371010.437500,356245.843750,341224.375000,325956.281250,
    310451.937500,294721.968750,278777.125000,262628.281250,246286.187500,229761.250000,213063.578125,
    196203.000000,179189.343750,162032.625000,144743.187500,127331.796875,109809.625000,92188.101563,
    74478.789063,56693.398438,38843.992188,20943.101563,3003.945313,-14959.395508,-32931.937500,
    -50897.929688,-68841.179688,-86745.492188,-104595.195313,-122375.523438,-140072.828125,
    -157674.453125,-175168.375000,-192542.937500,-209786.609375,-226887.859375,-243835.093750,
    -260616.515625,-277219.937500,-293632.812500,-309842.000000,-325833.875000,-341594.562500,
    -357109.750000,-372365.093750,-387346.125000,-402038.281250,-416426.843750,-430496.781250,
    -444232.218750,-457615.968750,-470628.812500,-483249.125000,-495452.718750,-507212.906250,
    -518501.500000,-529290.000000,-539551.187500,-549259.312500,-558390.187500,-566921.375000,
    -574831.937500,-582102.625000,-588715.625000,-594654.687500,-599905.125000,-604453.875000,
    -608289.250000,-611401.000000,-613780.500000,-615420.437500,-616314.875000,-616459.187500,
    -615850.437500,-614486.687500,-612367.437500,-609493.437500,-605866.687500,-601490.500000,
    -596369.312500,-590508.687500,-583915.375000,-576597.187500,-568563.062500,-559822.812500,
    -550387.500000,-540269.937500,-529488.375000,-518070.125000,-506053.531250,-493489.218750,
    -480439.531250,-466974.531250,-453166.218750,-439085.375000,-424800.968750,-410380.187500,
    -395888.250000,-381388.531250,-366942.437500,-352609.437500,-338446.968750,-324510.625000,
    -310853.937500,-297528.437500,-284583.687500,-272067.125000,-260024.281250,-248498.562500,
    -237531.390625,-227162.203125,-217428.359375,-208365.218750,-200006.156250,-192382.515625,
    -185523.625000,-179456.859375,-174207.578125,-169799.203125,-166253.234375,-163589.234375,
    -161824.812500,-160975.734375,-161055.875000,-162077.312500,-164050.218750,-166983.078125,
    -170882.500000,-175753.390625,-181598.984375,-188420.781250,-196218.640625,-204990.812500,
    -214733.937500,-225443.125000,-237111.953125,-249732.468750,-263295.343750,-277789.750000,
    -293203.625000,-309523.437500,-326734.406250,-344820.406250,-363764.187500,-383547.312500,
    -404150.187500,-425552.031250,-447731.156250,-470664.718750,-494329.031250,-518699.375000,
    -543750.187500,-569455.125000,-595786.875000,-622717.437500,-650218.062500,-678259.312500,
    -706811.125000,-735842.937500,-765323.500000,-795221.125000,-825503.625000,-856138.312500,
    -887092.250000,-918332.062500,-949824.125000,-981534.562500,-1013429.250000,-1045473.750000,
    -1077633.625000,-1109874.250000,-1142161.000000,-1174459.250000,-1206734.375000,-1238951.875000,
    -1271077.000000,-1303075.500000,-1334913.000000,-1366555.500000,-1397969.000000,-1429119.750000,
    -1459974.625000,-1490500.750000,-1520665.125000,-1550435.500000,-1579780.125000,-1608667.625000,
    -1637066.750000,-1664947.125000,-1692278.875000,-1719032.375000,-1745178.750000,-1770689.875000,
    -1795538.000000,-1819696.125000,-1843137.750000,-1865837.000000,-1887768.750000,-1908908.750000,
    -1929233.250000,-1948719.625000,-1967346.000000,-1985091.000000,-2001933.875000,-2017854.875000,
    -2032834.875000,-2046855.125000,-2059897.375000,-2071944.000000,-2082977.750000,-2092982.125000,
    -2101941.000000,-2109839.000000,-2116661.500000,-2122394.500000,-2127024.500000,-2130539.000000,
    -2132926.250000,-2134175.000000,-2134275.250000,-2133218.000000,-2130994.500000,-2127596.750000,
    -2123018.500000,-2117253.000000,-2110295.500000,-2102142.000000,-2092789.375000,-2082235.250000,
    -2070478.125000,-2057517.625000,-2043354.375000,-2027989.500000,-2011425.625000,-1993665.750000,
    -1974714.250000,-1954576.000000,-1933257.000000,-1910764.375000,-1887106.000000,-1862290.625000,
    -1836327.875000,-1809228.125000,-1781002.875000,-1751664.250000,-1721225.250000,-1689700.000000,
    -1657103.125000,-1623450.125000,-1588757.250000,-1553041.750000,-1516321.500000,-1478615.000000,
    -1439941.500000,-1400321.250000,-1359774.875000,-1318323.875000,-1275990.250000,-1232796.625000,
    -1188766.125000,-1143922.750000,-1098290.875000,-1051895.375000,-1004761.750000,-956915.937500,
    -908384.437500,-859194.062500,-809372.125000,-758946.375000,-707944.937500,-656396.250000,
    -604329.125000,-551772.687500,-498756.187500,-445309.312500,-391461.937500,-337244.125000,
    -282686.125000,-227818.375000,-172671.406250,-117275.890625,-61662.593750,-5862.343750,
    50093.984375,106175.507813,162351.328125,218590.593750,274862.500000,331136.343750,387381.437500,
    443567.218750,499663.343750,555639.625000,611465.937500,667112.437500,722549.625000,777748.250000,
    832679.125000,887313.375000,941622.625000,995578.562500,1049153.375000,1102319.750000,1155050.250000,
    1207318.250000,1259097.625000,1310362.250000,1361086.750000,1411246.000000,1460815.625000,
    1509771.750000,1558090.750000,1605749.500000,1652725.500000,1698996.750000,1744541.875000,
    1789340.000000,1833371.000000,1876614.875000,1919052.500000,1960665.125000,2001434.875000,
    2041344.500000,2080377.375000,2118517.500000,2155749.000000,2192057.000000,2227427.750000,
    2261847.250000,2295302.750000,2327782.000000,2359273.500000,2389766.000000,2419249.250000,
    2447714.000000,2475150.500000,2501551.250000,2526908.250000,2551214.750000,2574464.250000,
    2596651.250000,2617770.500000,2637817.750000,2656789.500000,2674682.500000,2691494.250000,
    2707223.000000,2721868.000000,2735428.250000,2747904.250000,2759296.500000,2769606.750000,
    2778836.750000,2786989.000000,2794067.250000,2800075.000000,2805016.500000,2808896.750000,
    2811720.750000,2813494.500000,2814225.000000,2813919.250000,2812584.500000,2810229.250000,
    2806862.000000,2802492.000000,2797128.750000,2790782.250000,2783463.000000,2775182.000000,
    2765951.000000,2755781.250000,2744685.250000,2732675.500000,2719765.500000,2705968.000000,
    2691297.250000,2675768.000000,2659394.250000,2642191.250000,2624173.750000,2605357.000000,
    2585757.000000,2565389.500000,2544270.500000,2522416.750000,2499844.750000,2476571.750000,
    2452615.000000,2427991.500000,2402718.750000,2376814.500000,2350296.500000,2323183.000000,
    2295492.000000,2267242.000000,2238452.500000,2209145.750000,2179352.500000,2149119.500000,
    2118505.000000,2087569.750000,2056372.125000,2024968.875000,1993414.875000,1961763.625000,
    1930066.500000,1898372.875000,1866730.625000,1835185.500000,1803781.250000,1772560.250000,
    1741562.875000,1710827.625000,1680391.250000,1650288.625000,1620553.000000,1591215.375000,
    1562305.500000,1533851.000000,1505877.875000,1478410.375000,1451471.125000,1425080.875000,
    1399259.125000,1374023.250000,1349389.375000,1325371.875000,1301983.375000,1279235.500000,
    1257137.625000,1235698.250000,1214923.875000,1194820.125000,1175390.875000,1156638.500000,
    1138564.375000,1121168.375000,1104449.000000,1088403.750000,1073028.750000,1058319.250000,
    1044268.875000,1030870.312500,1018115.250000,1005994.312500,994497.187500,983612.500000,
    973327.875000,963630.125000,954505.250000,945938.250000,937913.687500,930415.000000,
    923425.125000,916926.312500,910900.125000,905327.625000,900189.125000,895464.562500,
    891133.187500,887173.937500,883565.312500,880284.875000,877308.437500,874609.750000,
    872160.625000,869930.812500,867888.187500,865998.562500,864225.812500,862531.937500,
    860877.312500,859221.625000,857523.750000,855742.750000,853837.562500,851767.312500,
    849490.937500,846966.625000,844151.687500,841002.500000,837474.812500,833523.937500,
    829105.000000,824173.000000,818683.312500,812592.187500,805857.437500,798438.375000,
    790296.375000,781394.812500,771698.687500,761174.562500,749790.500000,737515.687500,
    724320.500000,710176.687500,695057.437500,678937.687500,661794.562500,643607.125000,
    624356.000000,604023.187500,582591.437500,560043.812500,536363.500000,511533.812500,
    485539.187500,458365.468750,430001.093750,400437.718750,369670.750000,337699.562500,
    304527.312500,270160.718750,234609.750000,197887.343750,160009.078125,120992.875000,
    80858.812500,39628.976563,-2672.570313,-46019.816406,-90384.734375,-135737.281250,
    -182045.421875,-229275.281250,-277391.312500,-326356.687500,-376133.500000,-426682.937500,
    -477965.343750,-529940.500000,-582567.687500,-635806.125000,-689614.500000,-743952.000000,
    -798777.687500,-854050.875000,-909730.812500,-965776.875000,-1022148.687500,-1078805.750000,
    -1135707.250000,-1192812.250000,-1250079.250000,-1307466.500000,-1364931.875000,-1422433.375000,
    -1479928.625000,-1537375.250000,-1594730.625000,-1651952.375000,-1708997.625000,-1765823.500000,
    -1822386.750000,-1878644.250000,-1934553.250000,-1990071.000000,-2045155.500000,-2099765.500000,
    -2153860.500000,-2207400.250000,-2260346.500000,-2312660.500000,-2364304.500000,-2415241.250000,
    -2465434.750000,-2514849.500000,-2563450.750000,-2611205.250000,-2658080.250000,-2704044.500000,
    -2749067.750000,-2793121.000000,-2836176.250000,-2878206.250000,-2919185.000000,-2959087.750000,
    -2997890.500000,-3035570.250000,-3072105.250000,-3107475.250000,-3141660.000000,-3174640.500000,
    -3206397.500000,-3236912.750000,-3266168.250000,-3294147.250000,-3320833.500000,-3346212.000000,
    -3370268.000000,-3392988.500000,-3414361.000000,-3434374.250000,-3453017.750000,-3470280.750000,
    -3486154.750000,-3500631.500000,-3513704.500000,-3525368.000000,-3535616.750000,-3544446.750000,
    -3551855.500000,-3557841.250000,-3562403.750000,-3565543.500000,-3567261.750000,-3567561.750000,
    -3566446.750000,-3563920.750000,-3559988.500000,-3554655.750000,-3547928.500000,-3539814.000000,
    -3530320.750000,-3519457.500000,-3507234.500000,-3493662.750000,-3478754.000000,-3462521.000000,
    -3444976.750000,-3426135.250000,-3406011.250000,-3384620.000000,-3361977.500000,-3338100.500000,
    -3313006.250000,-3286712.500000,-3259237.500000,-3230600.000000,-3200819.500000,-3169915.750000,
    -3137909.250000,-3104821.000000,-3070673.250000,-3035488.000000,-2999288.250000,-2962097.250000,
    -2923939.000000,-2884838.000000,-2844818.500000,-2803905.750000,-2762124.500000,-2719500.500000,
    -2676059.250000,-2631826.250000,-2586828.000000,-2541091.250000,-2494643.500000,-2447511.750000,
    -2399723.500000,-2351306.500000,-2302289.000000,-2252698.750000,-2202563.750000,-2151912.000000,
    -2100771.500000,-2049170.250000,-1997136.250000,-1944697.375000,-1891881.875000,-1838717.750000,
    -1785233.250000,-1731457.000000,-1677417.500000,-1623143.750000,-1568664.625000,-1514008.750000,
    -1459204.375000,-1404279.750000,-1349263.125000,-1294181.875000,-1239063.625000,-1183935.500000,
    -1128824.375000,-1073757.000000,-1018759.500000,-963857.875000,-909077.562500,-854443.812500,
    -799981.250000,-745714.187500,-691666.312500,-637860.937500,-584320.937500,-531068.625000,
    -478125.875000,-425514.156250,-373254.343750,-321366.875000,-269871.593750,-218787.843750,
    -168134.281250,-117929.031250,-68189.718750,-18933.500000,29822.949219,78063.414063,
    125772.140625,172933.843750,219533.718750,265557.468750,310991.312500,355822.062500,
    400037.062500,443624.250000,486572.125000,528869.687500,570506.500000,611472.562500,
    651758.375000,691355.000000,730254.000000,768447.437500,805927.937500,842688.500000,
    878722.687500,914024.625000,948588.812500,982410.437500,1015485.000000,1047808.687500,
    1079378.125000,1110190.250000,1140242.750000,1169533.750000,1198061.500000,1225825.000000,
    1252823.875000,1279057.875000,1304527.500000,1329233.750000,1353177.500000,1376360.500000,
    1398784.750000,1420452.375000,1441366.000000,1461528.500000,1480943.375000,1499614.250000,
    1517545.375000,1534741.125000,1551206.375000,1566946.500000,1581967.000000,1596273.625000,
    1609872.375000,1622769.750000,1634972.375000,1646487.250000,1657321.500000,1667482.500000,
    1676978.125000,1685816.000000,1694004.250000,1701551.375000,1708465.875000,1714756.375000,
    1720432.000000,1725501.625000,1729974.750000,1733861.000000,1737169.875000,1739911.000000,
    1742094.500000,1743730.250000,1744828.750000,1745400.375000,1745455.500000,1745004.750000,
    1744058.375000,1742626.875000,1740720.875000,1738351.250000,1735528.625000,1732263.875000,
    1728567.875000,1724451.500000,1719925.625000,1715001.125000,1709689.000000,1704000.375000,
    1697946.125000,1691537.000000,1684784.250000,1677698.625000,1670291.000000,1662572.000000,
    1654552.250000,1646242.500000,1637653.375000,1628795.750000,1619680.000000,1610316.750000,
    1600716.375000,1590889.125000,1580844.875000,1570593.875000,1560146.250000,1549512.000000,
    1538700.500000,1527721.625000,1516585.000000,1505300.000000,1493876.125000,1482322.500000,
    1470647.750000,1458861.125000,1446971.125000,1434986.125000,1422914.500000,1410764.625000,
    1398544.000000,1386260.750000,1373922.250000,1361536.000000,1349109.375000,1336649.375000,
    1324163.125000,1311657.750000,1299139.750000,1286615.500000,1274091.375000,1261573.625000,
    1249068.125000,1236580.500000,1224116.375000,1211681.000000,1199279.500000,1186917.000000,
    1174598.125000,1162327.500000,1150109.750000,1137949.000000,1125849.500000,1113815.125000,
    1101849.625000,1089956.625000,1078139.500000,1066401.375000,1054745.250000,1043174.062500,
    1031690.500000,1020297.125000,1008996.375000,997790.500000,986681.750000,975671.937500,
    964762.875000,953956.062500,943252.687500,932654.062500,922161.187500,911775.062500,
    901496.500000,891326.125000,881264.562500,871312.125000,861469.000000,851735.375000,
    842111.250000,832596.437500,823190.625000,813893.437500,804704.312500,795622.750000,
    786647.750000,777778.500000,769013.937500,760353.125000,751794.875000,743337.875000,
    734980.875000,726722.437500,718561.062500,710495.250000]


dada=[
    2657322,2657108,2655085,2649166,2645687,2645215,2648181,2653404,
    2659800,2665807,2667878,2670393,2667806,2666023,2667416,2669868,
    2670735,2672938,2676416,2676927,2673297,2671855,2674063,2672445,
    2674394,2673241,2673047,2671820,2669091,2664258,2660119,2660593,
    2661976,2666717,2667748,2666204,2663201,2660441,2659105,2659328,
    2656384,2653649,2648743,2648179,2651254,2654288,2661845,2665483,
    2667988,2664147,2659382,2653970,2650325,2649215,2650531,2653296,
    2657115,2659761,2660685,2660825,2659862,2658086,2656341,2655965,
    2657721,2659110,2660902,2662050,2661115,2659357,2659158,2659131,
    2659350,2658230,2660372,2661054,2659896,2660885,2658276,2655675,
    2651825,2650139,2650923,2652129,2653365,2656668,2658788,2660523,
    2659412,2659701,2653028,2649320,2643913,2641297,2643318,2646809,
    2653836,2658097,2660745,2663135,2660563,2653003,2648143,2645767,
    2644985,2648301,2652387,2654540,2657993,2659723,2658828,2657466,
    2657302,2656223,2656667,2657034,2659614,2659997,2659300,2658168,
    2655392,2654832,2654099,2655066,2657651,2660113,2664801,2668455,
    2672334,2675732,2681692,2687867,2695102,2707525,2725642,2748587,
    2775463,2814057,2853070,2888665,2918484,2946143,2972712,2995354,
    3019764,3038320,3046027,3047945,3056432,3075407,3105105,3128179,
    3128044,3091249,3036039,2985226,2958320,2969390,3004650,3064548,
    3137238,3189408,3217185,3237244,3278872,3347497,3446528,3576247,
    3737748,3902580,4035450,4128020,4145184,4093526,3991955,3880872,
    3806533,3791087,3817741,3856805,3900973,3963789,4061684,4170923,
    4297110,4441875,4565961,4680157,4797568,4895878,4989267,5089774,
    5204187,5364522,5607622,5960442,6394994,6899686,7442211,7911851,
    8337693,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    7273733,5911523,4339574,2623371,616934,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,
    0,0,0,0,0,5906,63956,116729,
    165123,218104,266832,313363,361434,407630,451949,493786,
    536361,574751,615191,652698,689905,724856,759865,792775,
    825594,856298,886243,916291,944607,974116,999174,1027106,
    1053708,1077725,1101506,1125399,1148036,1171668,1191917,1213068,
    1235513,1255256,1274470,1294343,1313254,1330609,1348372,1366230,
    1382438,1398789,1415480,1431532,1447410,1462684,1478563,1492317,
    1505886,1519081,1533034,1546624,1559941,1572278,1584501,1596953,
    1608540,1619287,1630773,1643311,1654437,1663859,1674498,1685176,
    1694274,1705210,1716327,1725057,1734170,1743964,1752160,1761710,
    1770834,1780275,1787911,1796720,1803696,1812870,1819832,1827626,
    1834105,1843433,1851172,1857148,1865827,1873493,1881555,1886982,
    1893972,1901457,1907166,1914516,1920684,1927444,1933483,1939554,
    1946026,1951519,1958072,1964869,1971134,1975927,1981696,1986625,
    1992270,1997790,2003879,2008200,2014532,2017813,2024175,2029586,
    2032319,2039071,2043654,2049139,2052187,2058239,2061796,2066710,
    2071161,2075418,2080096,2083464,2087221,2093707,2096678,2100965,
    2104921,2109203,2114519,2116721,2121725,2124820,2128471,2132084,
    2135905,2139453,2142539,2146439,2149958,2153549,2158120,2160099,
    2162975,2166032,2170658,2172667,2176712,2180253,2182570,2185320,
    2188471,2190622,2196872,2198460,2200504,2203598,2205684,2207772,
    2212194,2214063,2218254,2220181,2223694,2226556,2229899,2231475,
    2233877,2234390,2238357,2241184,2243215,2245139,2247573,2250161,
    2252100,2253948,2258869,2260738,2262962,2264329,2267213,2270460,
    2273599,2277441,2279496,2284680,2289351,2372522,2968611,4180440,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8388609,8388609,8388609,8388609,8388609,8388609,8388609,8388609,
    8301573,7996739,7744250,7505574,7240312,6950422,6643101,6318773,
    6006118,5749657,5552295,5411362,5305861,5209208,5073103,4868423,
    4593623,4271658,3969913,3708703,3445979,3191408,2968743,2803225,
    2698261,2664866,2652743,2651467,2646981,2608644,2541180,2426586,
    2311780,2189781,2083581,2025180,2008961,2009783,2000532,1926613,
    1764579,1527876,1268295,983716,709583,535174,502659,596104,
    775516,1019888,1270569,1503362,1712480,1889020,2033383,2148664,
    2242830,2321941,2397600,2475661,2574063,2687588,2812663,2939431,
    3053577,3135466,3182874,3215392,3239138,3247834,3247837,3227247,
    3177832,3111113,3041547,2971386,2899920,2836448,2778507,2730714,
    2702018,2702314,2722003,2753774,2788283,2820040,2839923,2849775,
    2858027,2883080,2929640,2989989,3054335,3112906,3158083,3185141,
    3186521,3165244,3126390,3082818,3049342,3039805,3043907,3052292,
    3054418,3047875,3026783,2990745,2934662,2872298,2815589,2780315,
    2758319,2734990,2708352,2676869,2634944,2583675,2535779,2507179,
    2504038,2527504,2571749,2628180,2686825,2723445,2727302,2711848,
    2696967,2695935,2711068,2738729,2764912,2787485,2797364,2794818,
    2785448,2777644,2771799,2763045,2747001,2724389,2695579,2671360,
    2653643,2643270,2643895,2660404,2684377,2711988,2730747,2735510,
    2717852,2694919,2673282,2658494,2651449,2647795,2652921,2657534,
    2664574,2674433,2682133,2681442,2677560,2676826,2686286,2704604,
    2723314,2735766,2733048,2724032,2707549,2688041,2671082,2650975,
    2636680,2634080,2645782,2666424,2684205,2692970,2697995,2701035,
    2691654,2673632,2657065,2639899,2627193,2620156,2621399,2623845,
    2628452,2638518,2645668,2651381,2655300,2660620,2660300,2645502,
    2614414,2578804,2536599,2501342,2472236,2453090,2445212,2443508,
    2448567,2453926,2455916,2451058,2446252,2442333,2438741,2436440,
    2436582,2438039,2441809,2450079,2462635,2473543,2479024,2484782,
    2488643,2491858,2496326,2501940,2511694,2525451,2543808,2559658,
    2567714,2568834,2567508,2566721,2561824,2557626,2552799,2550107,
    2552461,2559715,2570530,2579042,2586458,2590634,2592585,2592724,
    2591072,2590843,2592843,2594376,2594782,2595301,2596927,2599014,
    2601860,2605134,2610821,2616665,2622875,2624531,2624340,2624285,
    2623857,2627010,2634189,2648863,2658299,2660238,2656816,2651393,
    2647243,2640614,2638928,2639293,2642506,2644769,2648392,2651073,
    2652065,2655543,2659503,2660863,2660536,2662025,2659446,2653762,
    2651074,2648871,2650716,2652233,2653339,2655495,2655515,2657246,
    2656392,2655146,2655823,2656182,2656520,2655082,2657633,2660260,
    2666783,2671678,2666691,2656213,2652437,2651263,2646469,2645370,
    2643684,2644875,2642731,2642227,2646909,2651472,2657858,2660370,
    2660212,2655629,2648198,2641997,2639549,2641780,2645328,2651881,
    2658570,2662157,2659934,2656710,2655609,2654180,2653790,2656523,
    2660872,2661950,2662501,2661538,2660225,2663991,2667635,2671008,
    2666571,2663878,2661707,2661576,2657073,2651746,2648262,2644143,
    2643748,2645444,2649756,2655909,2658767,2660839,2661563,2660411,
    2658767,2661295,2660627,2658450,2655510,2651560,2648690,2647357,
    2647661,2648439,2652765,2654873,2656658,2655911,2658248,2656379,
    2655165,2652210,2653132,2657825,2663631,2661934,2661584,2663608,
    2667230,2666533,2662371,2657570,2652391,2651309,2652796,2653357,
    2657129,2661896,2664593,2665223,2665110,2660120,2657991,2656626,
    2658942,2657379,2657103,2655500,2653148,2651524,2649390,2648410,
    2651197,2656398,2658599,2659789,2661102,2659420,2656570,2652005
]


raw=[5723158,
    5721520,
    5737056,
    5730693,
    5764540,
    5754662,
    5746262,
    5735234,
    5708982,
    5726763,
    5733673,
    5747020,
    5773363,
    5753585,
    5765902,
    5762809,
    5740821,
    5756438,
    5743502,
    5767978,
    5774778,
    5754660,
    5748534,
    5737190,
    5746546,
    5759157,
    5755566,
    5778961,
    5764636,
    5761412,
    5769018,
    5712505,
    5721392,
    5729452,
    5735374,
    5751126,
    5744925,
    5743373,
    5739413,
    5728814,
    5746293,
    5743082,
    5766508,
    5782848,
    5773578,
    5781696,
    5766999,
    5756413,
    5774038,
    5768221,
    5781233,
    5791085,
    5793853,
    5806872,
    5782540,
    5791218,
    5799248,
    5793956,
    5815148,
    5790398,
    5784596,
    5779992,
    5761762,
    5778857,
    5766384,
    5770613,
    5795943,
    5784268,
    5793761,
    5759224,
    5748866,
    5760712,
    5762870,
    5772680,
    5757754,
    5743052,
    5742167,
    5712772,
    5725128,
    5720930,
    5715804,
    5756020,
    5765181,
    5755918,
    5742185,
    5722306,
    5728460,
    5741941,
    5749065,
    5763754,
    5748005,
    5750831,
    5738985,
    5728596,
    5744249,
    5735123,
    5742130,
    5748636,
    5745924,
    5747774,
    5738040,
    5732538,
    5745352,
    5736954,
    5763790,
    5753380,
    5738449,
    5736592,
    5714892,
    5736806,
    5741436,
    5743822,
    5767429,
    5751352,
    5761646,
    5757724,
    5717118,
    5722046,
    5718900,
    5748832,
    5761261,
    5747294,
    5734824,
    5731994,
    5725832,
    5739152,
    5732607,
    5747772,
    5749846,
    5738990,
    5748333,
    5717577,
    5707109,
    5736686,
    5743465,
    5755243,
    5761506,
    5744880,
    5750924,
    5722485,
    5732498,
    5735524,
    5736863,
    5760841,
    5744118,
    5743888,
    5747310,
    5724838,
    5746580,
    5743825,
    5747777,
    5779226,
    5769744,
    5776251,
    5741525,
    5737864,
    5751012,
    5745820,
    5764784,
    5751081,
    5743022,
    5734780,
    5707846,
    5717339,
    5715433,
    5718265,
    5764320,
    5762888,
    5763362,
    5739145,
    5722478,
    5734580,
    5739584,
    5741533,
    5746793,
    5733448,
    5743770,
    5726200,
    5725347,
    5732945,
    5723910,
    5757650,
    5764382,
    5746258,
    5743418,
    5727928,
    5724362,
    5733813,
    5730615,
    5756344,
    5747628,
    5751646,
    5743286,
    5718213,
    5729274,
    5723210,
    5731188,
    5752018,
    5729921,
    5744009,
    5738312,
    5726633,
    5740925,
    5732973,
    5766587,
    5761498,
    5746258,
    5736624,
    5705402,
    5716220,
    5726969,
    5727377,
    5753502,
    5739714,
    5747978,
    5748266,
    5717397,
    5727180,
    5718482,
    5743750,
    5756672,
    5742525,
    5740797,
    5735592,
    5726342,
    5740913,
    5731697,
    5754614,
    5750470,
    5748894,
    5756719,
    5721726,
    5714029,
    5723907,
    5730404,
    5749270,
    5749258,
    5745686,
    5744548,
    5721030,
    5735984,
    5726953,
    5744026,
    5757422,
    5740604,
    5748212,
    5728600,
    5710970,
    5733205,
    5726260,
    5734045,
    5745382,
    5734816,
    5745118,
    5716832,
    5726189,
    5743867,
    5751114,
    5773204,
    5750206,
    5741937,
    5741700,
    5722156,
    5738860,
    5732294,
    5737586,
    5772230,
    5772578,
    5784258,
    5753422,
    5741169,
    5755318,
    5758754,
    5768694,
    5763650,
    5748225,
    5753170,
    5734405,
    5743181,
    5749326,
    5743348,
    5781286,
    5783538,
    5769091,
    5753688,
    5734273,
    5737773,
    5759052,
    5755478,
    5777652,
    5782888,
    5770700,
    5758752,
    5748638,
    5766374,
    5756346,
    5772458,
    5789153,
    5764486,
    5771101,
    5759450,
    5744982,
    5756461,
    5755225,
    5792206,
    5784242,
    5778326,
    5775965,
    5746940,
    5758597,
    5760940,
    5753934,
    5772625,
    5759894,
    5774769,
    5772204,
    5744896,
    5754774,
    5749445,
    5783994,
    5791740,
    5773238,
    5764045,
    5752124,
    5754129,
    5768108,
    5755052,
    5768449,
    5761198,
    5761170,
    5769217,
    5736845,
    5737494,
    5746864,
    5758240,
    5773886,
    5762434,
    5747226,
    5750229,
    5733037,
    5744817,
    5734288,
    5741805,
    5754572,
    5747129,
    5758444,
    5743282,
    5720906,
    5744030,
    5736497,
    5746457,
    5760461,
    5743436,
    5734322,
    5715779,
    5723386,
    5731837,
    5732767,
    5760365,
    5744754,
    5739625,
    5739189,
    5708374,
    5727305,
    5722736,
    5725750,
    5755070,
    5735220,
    5741620,
    5710892,
    5707460,
    5734093,
    5739978,
    5752282,
    5748308,
    5733199,
    5741235,
    5720606,
    5723513,
    5725680,
    5719530,
    5752674,
    5745401,
    5735867,
    5728956,
    5712838,
    5720986,
    5728804,
    5722914,
    5740937,
    5730290,
    5736400,
    5721882,
    5707904,
    5722759,
    5717162,
    5741082,
    5760980,
    5734473,
    5738822,
    5728332,
    5711685,
    5720725,
    5715961,
    5750152,
    5744482,
    5736514,
    5732901,
    5706609,
    5725862,
    5731213,
    5733734,
    5754542,
    5736144,
    5740393,
    5738402,
    5722423,
    5737712,
    5735677,
    5751041,
    5760726,
    5748908,
    5750658,
    5732856,
    5728762,
    5744066,
    5734294,
    5757859,
    5757580,
    5757020,
    5764657,
    5730071,
    5732274,
    5739478,
    5750339,
    5770737,
    5767352,
    5758860,
    5760384,
    5736686,
    5751360,
    5745768,
    5765598,
    5773476,
    5756013,
    5764888,
    5742089,
    5731060,
    5759496,
    5754756,
    5763232,
    5775504,
    5768101,
    5776725,
    5745350,
    5750248,
    5755814,
    5759805,
    5784881,
    5768633,
    5766534,
    5778292,
    5765612,
    5779169,
    5763839,
    5761866,
    5785644,
    5779181,
    5787337,
    5757928,
    5748702,
    5767251,
    5772467,
    5788329,
    5785841,
    5768589,
    5774242,
    5755622,
    5756930,
    5759110,
    5756256,
    5783429,
    5788382,
    5780108,
    5770506,
    5752913,
    5761034,
    5776825,
    5771641,
    5787112,
    5772807,
    5766318,
    5753988,
    5745009,
    5762486,
    5752288,
    5768690,
    5785881,
    5762555,
    5771406,
    5758889,
    5738405,
    5746008,
    5744616,
    5778618,
    5771797,
    5767524,
    5763617,
    5738872,
    5753230,
    5753381,
    5747530,
    5769017,
    5750670,
    5761788,
    5758298,
    5733972,
    5743409,
    5738605,
    5772841,
    5771398,
    5749324,
    5738190,
    5716344,
    5728266,
    5741273,
    5737942,
    5757511,
    5749347,
    5754498,
    5756913,
    5724497,
    5731644,
    5728093,
    5752120,
    5762609,
    5743561,
    5733597,
    5732820,
    5726144,
    5741352,
    5727658,
    5740299,
    5751940,
    5743356,
    5741547,
    5735949,
    5708223,
    5727378,
    5723786,
    5737253,
    5743107,
    5732612,
    5740692,
    5716506,
    5724110,
    5727806,
    5731277,
    5754380,
    5739318,
    5739030,
    5739044,
    5713136,
    5734621,
    5724573,
    5725941,
    5750590,
    5736922,
    5743046,
    5714269,
    5711024,
    5730233,
    5723218,
    5738308,
    5732690,
    5720678,
    5738542,
    5727603,
    5730063,
    5727224,
    5721506,
    5745070,
    5738610,
    5734448,
    5723520,
    5708185,
    5721068,
    5729356,
    5724223,
    5743804,
    5732275,
    5737006,
    5723456,
    5708102,
    5718994,
    5713784,
    5735348,
    5753058,
    5726490,
    5735101,
    5726061,
    5713008,
    5722712,
    5711377,
    5737550,
    5736222,
    5729683,
    5735173,
    5707054,
    5725338,
    5731232,
    5727200,
    5747529,
    5731970,
    5738984,
    5744994,
    5718494,
    5720428,
    5713473,
    5731846,
    5743901,
    5734791,
    5745310,
    5731380,
    5724737,
    5740026,
    5724642,
    5737016,
    5743820,
    5737990,
    5745069,
    5722210,
    5723268,
    5734297,
    5737820,
    5755260,
    5755113,
    5744105,
    5751864,
    5724061,
    5733587,
    5738906,
    5753702,
    5767246,
    5747440,
    5749808,
    5740410,
    5726523,
    5752129,
    5740413,
    5743060,
    5763229,
    5754112,
    5763751,
    5740203,
    5737967,
    5755526,
    5757601,
    5776836,
    5760992,
    5752970,
    5764425,
    5747605,
    5760018,
    5754724,
    5747377,
    5777836,
    5779068,
    5775756,
    5752933,
    5740191,
    5769932,
    5761753,
    5780810,
    5793784,
    5775791,
    5781582,
    5769877,
    5760648,
    5769153,
    5762173,
    5783897,
    5793191,
    5781162,
    5785444,
    5768286,
    5768868,
    5788477,
    5778650,
    5808000,
    5800774,
    5789938,
    5783818,
    5766747,
    5783606,
    5779074,
    5777682,
    5797637,
    5777462,
    5797446,
    5791991,
    5763687,
    5767611,
    5765619,
    5794534,
    5799140,
    5784316,
    5780697,
    5763843,
    5775514,
    5785888,
    5775860,
    5798500,
    5790632,
    5790562,
    5798441,
    5759739,
    5755801,
    5766412,
    5786450,
    5800065,
    5788587,
    5782766,
    5779489,
    5769169,
    5786651,
    5772441,
    5774178,
    5787793,
    5777715,
    5785762,
    5767164,
    5760733,
    5775873,
    5772883,
    5784944,
    5779093,
    5767377,
    5781261,
    5755317,
    5761192,
    5764854,
    5767463,
    5787646,
    5778322,
    5781087,
    5780664,
    5757516,
    5781304,
    5769749,
    5774732,
    5801843,
    5788634,
    5791782,
    5759595,
    5771140,
    5774246,
    5793250,
    5781458,
    5770692,
    5779546,
    5750453,
    5762088,
    5760684,
    5755449,
    5788485,
    5784868,
    5773708,
    5755780,
    5744875,
    5759448,
    5761188,
    5764729,
    5774315,
    5758665,
    5767317,
    5760708,
    5747198,
    5761134,
    5757560,
    5778417,
    5781732,
    5761666,
    5760022,
    5744694,
    5738507,
    5751562,
    5741028,
    5774810,
    5771153,
    5764022,
    5753717,
    5733338,
    5751442,
    5754688,
    5764931,
    5787292,
    5759393,
    5768150,
    5762087,
    5735912,
    5754342,
    5749262,
    5771464,
    5778124,
    5759302,
    5753829,
    5738697,
    5747353,
    5759893,
    5751014,
    5771714,
    5763065,
    5757837,
    5768492,
    5736731,
    5734518,
    5743127,
    5752172,
    5766578,
    5760026,
    5763349,
    5760692,
    5744488,
    5760790,
    5751886,
    5762950,
    5780479,
    5769702,
    5773870,
    5757184,
    5743988,
    5758610,
    5755166,
    5769961,
    5776769,
    5764184,
    5775044,
    5741902,
    5748697,
    5760345,
    5774071,
    5795050,
    5781397,
    5779069,
    5778269,
    5758861,
    5780196,
    5763109,
    5763224,
    5786485,
    5776744,
    5784612,
    5761720,
    5754570,
    5775929,
    5785262,
    5802256,
    5797902,
    5787149,
    5800749,
    5779850,
    5777153,
    5774717,
    5763432,
    5788617,
    5798813,
    5792734,
    5790149,
    5776864,
    5785996,
    5795145,
    5799834,
    5816790,
    5797237,
    5795975,
    5788605,
    5775700,
    5793626,
    5788840,
    5803972,
    5812846,
    5791622,
    5797764,
    5785178,
    5773260,
    5798660,
    5788321,
    5823433,
    5823228,
    5801864,
    5793981,
    5780486,
    5793294,
    5801523,
    5794560,
    5809662,
    5796884,
    5802661,
    5811382,
    5780893,
    5785945,
    5801140,
    5817714,
    5831298,
    5817017,
    5799712,
    5795796,
    5777941,
    5791736,
    5779990,
    5790186,
    5805510,
    5792181,
    5799202,
    5778821,
    5761643,
    5786294,
    5789030,
    5797213,
    5802262,
    5780942,
    5785512,
    5755228,
    5766305,
    5775934,
    5772489,
    5801776,
    5783276,
    5780204,
    5777555,
    5757456,
    5777482,
    5772144,
    5779588,
    5806590,
    5788121,
    5797278,
    5761046,
    5755729,
    5768616,
    5766468,
    5783358,
    5778092,
    5768966,
    5778678,
    5748133,
    5762142,
    5755186,
    5754078,
    5795686,
    5791002,
    5786262,
    5758786,
    5743822,
    5752482,
    5762326,
    5773154,
    5780973,
    5767453,
    5779594,
    5755214,
    5751486,
    5755108,
    5746833,
    5777964,
    5787432,
    5769669,
    5769057,
    5757861,
    5761436,
    5765229,
    5760904,
    5780511,
    5766762,
    5770177,
    5764584,
    5740898,
    5757806,
    5757020,
    5773105,
    5789900,
    5768636,
    5774899,
    5763014,
    5745152,
    5754462,
    5742987,
    5777592,
    5777425,
    5749492,
    5755289,
    5736606,
    5748854,
    5757522,
    5763125,
    5785936,
    5762585,
    5768018,
    5766665,
    5735358,
    5751372,
    5745353,
    5769729,
    5779751,
    5763961,
    5759959,
    5747363,
    5748540,
    5759325,
    5746282,
    5763564,
    5754754,
    5754733,
    5769820,
    5750941,
    5754250,
    5766117,
    5769885,
    5783584,
    5776344,
    5768212,
    5757560,
    5728168,
    5743498,
    5734593,
    5754775,
    5776647,
    5766930,
    5770577,
    5754996,
    5741168,
    5761548,
    5757884,
    5768770,
    5779086,
    5764836,
    5775161,
    5739989,
    5746654,
    5760448,
    5770148,
    5790174,
    5775132,
    5769512,
    5770924,
    5754376,
    5773692,
    5762717,
    5763194,
    5791538,
    5781890,
    5793650,
    5765982,
    5761072,
    5780812,
    5777352,
    5786034,
    5790333,
    5779538,
    5793992,
    5771453,
    5774637,
    5771394,
    5763238,
    5795701,
    5806387,
    5792392,
    5782678,
    5768046,
    5772546,
    5788105,
    5794534,
    5815064,
    5796510,
    5794904,
    5782820,
    5768064,
    5785349,
    5778082,
    5790337,
    5802167,
    5785656,
    5796204,
    5784883,
    5776673,
    5790964,
    5781354,
    5813651,
    5808154,
    5796905,
    5795326,
    5773987,
    5787321,
    5789293,
    5783242,
    5801817,
    5788158,
    5803072,
    5798690,
    5767508,
    5774294,
    5765833,
    5793442,
    5802438,
    5785925,
    5778058,
    5766972,
    5769445,
    5779450,
    5764271,
    5780229,
    5768762,
    5767558,
    5778272,
    5743252,
    5746252,
    5764608,
    5783106,
    5792520,
    5790285,
    5764636,
    5759088,
    5741221,
    5757286,
    5745769,
    5755526,
    5773194,
    5764942,
    5772977,
    5759150,
    5742156,
    5760622,
    5758301,
    5768509,
    5772527,
    5755215,
    5766633,
    5739290,
    5747277,
    5759265,
    5759736,
    5784152,
    5768576,
    5762416,
    5760838,
    5734686,
    5756337,
    5750590,
    5754890,
    5787888,
    5765458,
    5773498,
    5742564,
    5733466,
    5754800,
    5758963,
    5769589,
    5765172,
    5753178,
    5762825,
    5738816,
    5747093,
    5747426,
    5739150,
    5772430,
    5774725,
    5762074,
    5757117,
    5744760,
    5755406,
    5762161,
    5760582,
    5772779,
    5758628,
    5763272,
    5751546,
    5733620,
    5748561,
    5742940,
    5760483,
    5776061,
    5754370,
    5761161,
    5750077,
    5741490,
    5756181,
    5748233,
    5784616,
    5777873,
    5766332,
    5759762,
    5734196,
    5752801,
    5761100,
    5767958,
    5790168,
    5768592,
    5775002,
    5773094,
    5746781,
    5764184,
    5755612,
    5782688,
    5794333,
    5780286,
    5777702,
    5769535,
    5770312,
    5782448,
    5770806,
    5791352,
    5785289,
    5786044,
    5798421,
    5771372,
    5768217,
    5778271,
    5779484,
    5795934,
    5795760,
    5795961,
    5796162,
    5774328,
    5787958,
    5780849,
    5792645,
    5811887,
    5793386,
    5799516,
    5785570,
    5774938,
    5795630,
    5790207,
    5797450,
    5809826,
    5799361,
    5808413,
    5775437,
    5781994,
    5795308,
    5799569,
    5823448,
    5807572,
    5798666,
    5805276,
    5789608,
    5800580,
    5801810,
    5795541,
    5815932,
    5810124,
    5821773,
    5799311,
    5784938,
    5799201,
    5804582,
    5813074,
    5814112,
    5801121,
    5811670,
    5795216,
    5798856,
    5797361,
    5786445,
    5813821,
    5818386,
    5803165,
    5797528,
    5782529,
    5785180,
    5800656,
    5799856,
    5817901,
    5802179,
    5798377,
    5786361,
    5775233,
    5793633,
    5784418,
    5796854,
    5806776,
    5787470,
    5796234,
    5786161,
    5777832,
    5786523,
    5781006,
    5808354,
    5795621,
    5786485,
    5783145,
    5760050,
    5774712,
    5774956,
    5773931,
    5789968,
    5773905,
    5783489,
    5773837,
    5748345,
    5760605,
    5752714,
    5789066,
    5790580,
    5772047,
    5761983,
    5747772,
    5758334,
    5767163,
    5758354,
    5786246,
    5780450,
    5767614,
    5773654,
    5740973,
    5747949,
    5757600,
    5774338,
    5787417,
    5773418,
    5760270,
    5761986,
    5750730,
    5765108,
    5753497,
    5761904,
    5775134,
    5766110,
    5774632,
    5755805,
    5736664,
    5758823,
    5755214,
    5763141,
    5774822,
    5765112,
    5772691,
    5744900,
    5752597,
    5756218,
    5752244,
    5779204,
    5766320,
    5759927,
    5764710,
    5741112,
    5758456,
    5755461,
    5758513,
    5789914,
    5771780,
    5778642,
    5748254,
    5740304,
    5757738,
    5756860,
    5764000,
    5759862,
    5747364,
    5761890,
    5751044,
    5755424,
    5758513,
    5751278,
    5777991,
    5777972,
    5762876,
    5755780,
    5740436,
    5739013,
    5743726,
    5742257,
    5766728,
    5759304,
    5759474,
    5759602,
    5739028,
    5752644,
    5746869,
    5757444,
    5775830,
    5750754,
    5760149,
    5755158,
    5741000,
    5754221,
    5747780,
    5783670,
    5782832,
    5775773,
    5777498,
    5751067,
    5763892,
    5774167,
    5768394,
    5784558,
    5773498,
    5778258,
    5783448,
    5761449,
    5776779,
    5771397,
    5789957,
    5803776,
    5788040,
    5781924,
    5775905,
    5760558,
    5775721,
    5768402,
    5791232,
    5795011,
    5790822,
    5801305,
    5775674,
    5767912,
    5783942,
    5779160,
    5795320,
    5803865,
    5799942,
    5805876,
    5778861,
    5787400,
    5792722,
    5805754,
    5824246,
    5802514,
    5803065,
    5795466,
    5779854,
    5804987,
    5796158,
    5796392,
    5813270,
    5796862,
    5804413,
    5771654,
    5777306,
    5796648,
    5793980,
    5813948,
    5801122,
    5787889,
    5795344,
    5776372,
    5782577,
    5773193,
    5767814,
    5795472,
    5791268,
    5793153,
    5771357,
    5754536,
    5768400,
    5778616,
    5785060,
    5802158,
    5787328,
    5791684,
    5773849,
    5765227,
    5771282,
    5763918,
    5788405,
    5804302,
    5785863,
    5791037,
    5774534,
    5761714,
    5772933,
    5764635,
    5791468,
    5782952,
    5772630,
    5768288,
    5750138,
    5772974,
    5770397,
    5768148,
    5784068,
    5764100,
    5775854,
    5774449,
    5747946,
    5753682,
    5749868,
    5777174,
    5781406,
    5765266,
    5767172,
    5747476,
    5750244,
    5761609,
    5745944,
    5766364,
    5768650,
    5774324,
    5778318,
    5742494,
    5737790,
    5746430,
    5759070,
    5775249,
    5777692,
    5752842,
    5754778,
    5741228,
    5756284,
    5750556,
    5757840,
    5767180,
    5756873,
    5766616,
    5744366,
    5735965,
    5759788,
    5757186,
    5767647,
    5771508,
    5753153,
    5766408,
    5744993,
    5748896,
    5756152,
    5754288,
    5775614,
    5760910,
    5761592,
    5763948,
    5739746,
    5761744,
    5755148,
    5754070,
    5780433,
    5766092,
    5767425,
    5739692,
    5737638,
    5756042,
    5756461,
    5772857,
    5764721,
    5751376,
    5765874,
    5750619,
    5750562,
    5750510,
    5744560,
    5770769,
    5760953,
    5754658,
    5743153,
    5730577,
    5752413,
    5771182,
    5766298,
    5782206,
    5767114,
    5765382,
    5752064,
    5739290,
    5752548,
    5747208,
    5768793,
    5788020,
    5759330,
    5776633,
    5765135,
    5749817,
    5760385,
    5749543,
    5779029,
    5777946,
    5773584,
    5768209,
    5744513,
    5760800,
    5763288,
    5769970,
    5798929,
    5775129,
    5778852,
    5779339,
    5747111,
    5755377,
    5755105,
    5785205,
    5793086,
    5780622,
    5779652,
    5759870,
    5763171,
    5781093,
    5775038,
    5791942,
    5788800,
    5778131,
    5785781,
    5755532,
    5758612,
    5768120,
    5782356,
    5799871,
    5793500,
    5791142,
    5791950,
    5766515,
    5779326,
    5770749,
    5785904,
    5800248,
    5791465,
    5798082,
    5779107,
    5766620,
    5785757,
    5777265,
    5790493,
    5803881,
    5791370,
    5800073,
    5764051,
    5766928,
    5776688,
    5791432,
    5809403,
    5789846,
    5785854,
    5783197,
    5761514,
    5768273,
    5771676,
    5767778,
    5796104,
    5791570,
    5792936,
    5766472,
    5759210,
    5776147,
    5776791,
    5791256,
    5781822,
    5765994,
    5777430,
    5764358,
    5761816,
    5762451,
    5754629,
    5779653,
    5783080,
    5778520,
    5766680,
    5747741,
    5748824,
    5759072,
    5756745,
    5783265,
    5770330,
    5764426,
    5753992,
    5735625,
    5748351,
    5747736,
    5754308,
    5776038,
    5753004,
    5766609,
    5760006,
    5732892,
    5746173,
    5741618,
    5768226,
    5773865,
    5753911,
    5746453,
    5733670,
    5743656,
    5754324,
    5742108,
    5759486,
    5754384,
    5758921,
    5770166,
    5739472,
    5730613,
    5743956,
    5755765,
    5769889,
    5758346,
    5749177,
    5743891,
    5728887,
    5740188,
    5740496,
    5745521,
    5766342,
    5754918,
    5759527,
    5737245,
    5722642,
    5744124,
    5748782,
    5763674,
    5764533,
    5745646,
    5755350,
    5724260,
    5733245,
    5740140,
    5743214,
    5762942,
    5749044,
    5750018,
    5746008,
    5725588,
    5750536,
    5740330,
    5747085,
    5770819,
    5752389,
    5762282,
    5732790,
    5728301,
    5741301,
    5741816,
    5761292,
    5754385,
    5748860,
    5761294,
    5728052,
    5741922,
    5730395,
    5725829,
    5760700,
    5759194,
    5752728,
    5732386,
    5722212,
    5736852,
    5741123,
    5754372,
    5757328,
    5741249,
    5752810,
    5735778,
    5727481,
    5738554,
    5732548,
    5761765,
    5766804,
    5750598,
    5744204,
    5728981,
    5732713,
    5739182,
    5732136,
    5760286,
    5749723,
    5738438,
    5752335,
    5731141,
    5746697,
    5744436,
    5755540,
    5768686,
    5747548,
    5759517,
    5748629,
    5735682,
    5748569,
    5736713,
    5769993,
    5770158,
    5760461,
    5752550,
    5730122,
    5742298,
    5748386,
    5751610,
    5782012,
    5759346,
    5766418,
    5769797,
    5738720,
    5747005,
    5746716,
    5768149,
    5779589,
    5763450,
    5763594,
    5748381,
    5750160,
    5767552,
    5757420,
    5774208,
    5774778,
    5765880,
    5777144,
    5753634,
    5754688,
    5766733,
    5770000,
    5785188,
    5773540,
    5769651,
    5771832,
    5749668,
    5763884,
    5761552,
    5772970,
    5788365,
    5772284,
    5775723,
    5759490,
    5749824,
    5770486,
    5767638,
    5780753,
    5795032,
    5777994,
    5788420,
    5748462,
    5750466,
    5766910,
    5784349,
    5802460,
    5787106,
    5781675,
    5781126,
    5759816,
    5782882,
    5772206,
    5767906,
    5797545,
    5793278,
    5794942,
    5771464,
    5761533,
    5775651,
    5782676,
    5798364,
    5792479,
    5778472,
    5790367,
    5776040,
    5777786,
    5781378,
    5771485,
    5798736,
    5806076,
    5795277,
    5783196,
    5766748,
    5768280,
    5780833,
    5784993,
    5809208,
    5791191,
    5786892,
    5778168,
    5763973,
    5779818,
    5775820,
    5785837,
    5796464,
    5778188,
    5785862,
    5770974,
    5754533,
    5770902,
    5760498,
    5794794,
    5792450,
    5778430,
    5769452,
    5750448,
    5762016,
    5762916,
    5755720,
    5778332,
    5760257,
    5776288,
    5776659,
    5742046,
    5737858,
    5741900,
    5765284,
    5775812,
    5761204,
    5755712,
    5740457,
    5742851,
    5755439,
    5740288,
    5759900,
    5758454,
    5753673,
    5762286,
    5728704,
    5722932,
    5736370,
    5748673,
    5760256,
    5748014,
    5733197,
    5734928,
    5721530,
    5739692,
    5736725,
    5741398,
    5756838,
    5740676,
    5743624,
    5725702,
    5712224,
    5734086,
    5731220,
    5744307,
    5752652,
    5732068,
    5746530,
    5714442,
    5714786,
    5721966,
    5722950,
    5744522,
    5735873,
    5732904,
    5737417,
    5703819,
    5724393,
    5710832,
    5711745,
    5746376,
    5737662,
    5739877,
    5716879,
    5708522,
    5726294,
    5729357,
    5743293,
    5738425,
    5724693,
    5731528,
    5702193,
    5711385,
    5727920,
    5718058,
    5770890,
    5753098,
    5738768,
    5725958,
    5713966,
    5725988,
    5735676,
    5730871,
    5747865,
    5733978,
    5735578,
    5731500,
    5711013,
    5726494,
    5724977,
    5736585,
    5748708,
    5727885,
    5739024,
    5726164,
    5717026,
    5730024,
    5714444,
    5751396,
    5749301,
    5737322,
    5728167,
    5704258,
    5719237,
    5725317,
    5728425,
    5753932,
    5730165,
    5738738,
    5738309,
    5705108,
    5715436,
    5714061,
    5740264,
    5754158,
    5740400,
    5739378,
    5724772,
    5726837,
    5742910,
    5729583,
    5747818,
    5747054,
    5745314,
    5762068,
    5737494,
    5730528,
    5738824,
    5736544,
    5753770,
    5749887,
    5757574,
    5760663,
    5742192,
    5757149,
    5745753,
    5750016,
    5771504,
    5759736,
    5766460,
    5755226,
    5747038,
    5747682,
    5746592,
    5758654,
    5774018,
    5760666,
    5775390,
    5739074,
    5740944,
    5759505,
    5770220,
    5788948,
    5771573,
    5762885,
    5765421,
    5745698,
    5773940,
    5769536,
    5765741,
    5802434,
    5791593,
    5791472,
    5760581,
    5747505,
    5766052,
    5776800,
    5792253,
    5792572,
    5780285,
    5797380,
    5775429,
    5776740,
    5768924,
    5756878,
    5783096,
    5790465,
    5782629,
    5775786,
    5762371,
    5776074,
    5785957,
    5791849,
    5802850,
    5784772,
    5789602,
    5784274,
    5776099,
    5793298,
    5784133,
    5798406,
    5803327,
    5788983,
    5792796,
    5776299,
    5773753,
    5789169,
    5780767,
    5811798,
    5800208,
    5787962,
    5782112,
    5760413,
    5779154,
    5773943,
    5772998,
    5803161,
    5783135,
    5801797,
    5795896,
    5765482,
    5774734,
    5768622,
    5802514,
    5810426,
    5792781,
    5778313,
    5759065,
    5759096,
    5768850,
    5752393,
    5768742,
    5763012,
    5766152,
    5778694,
    5754520,
    5758640,
    5772045,
    5779942,
    5789293,
    5765870,
    5753841,
    5753097,
    5745490,
    5763580,
    5755045,
    5759320,
    5772917,
    5757308,
    5762201,
    5742293,
    5729692,
    5747068,
    5745400,
    5756398,
    5762804,
    5750281,
    5760658,
    5727998,
    5730280,
    5735958,
    5738660,
    5769752,
    5770337,
    5765188,
    5771337,
    5733372,
    5747686,
    5721866,
    5722139,
    5747218,
    5739797,
    5750796,
    5733898,
    5722805,
    5740124,
    5736738,
    5738517,
    5736826,
    5733908,
    5734274,
    5727132,
    5732076,
    5739664,
    5729046,
    5754865,
    5752382,
    5735982,
    5726886,
    5715686,
    5708978,
    5702821,
    5703116,
    5728788,
    5723132,
    5754112,
    5793276,
    5787844,
    5818432,
    5818512,
    5816505,
    5794958,
    5757906,
    5714468,
    5700996,
    5654596,
    5664287,
    5666093,
    5711736,
    5715181,
    5708358,
    5700844,
    5683326,
    5698890,
    5714424,
    5728954,
    5758366,
    5739929,
    5746983,
    5753920,
    5737034,
    5762358,
    5767858,
    5791314,
    5803968,
    5793792,
    5782629,
    5775966,
    5754505,
    5765294,
    5740274,
    5742673,
    5744936,
    5736432,
    5746268,
    5718794,
    5698301,
    5706432,
    5691414,
    5706170,
    5720412,
    5731109,
    5756634,
    5734277,
    5745202,
    5762357,
    5767741,
    5790724,
    5767148,
    5765022,
    5758842,
    5746645,
    5757549,
    5743948,
    5748928,
    5773330,
    5778988,
    5795815,
    5775466,
    5766565,
    5776073,
    5764027,
    5775825,
    5768680,
    5758169,
    5778792,
    5767890,
    5774056,
    5759914,
    5750374,
    5779540,
    5781273,
    5779304,
    5758941,
    5741380,
    5749818,
    5764601,
    5771408,
    5789238,
    5775972,
    5784796,
    5769837,
    5760476,
    5768474,
    5754606,
    5758829,
    5763918,
    5743172,
    5751925,
    5741742,
    5734700,
    5746511,
    5742782,
    5777669,
    5773605,
    5785221,
    5804429,
    5795778,
    5824197,
    5826650,
    5820216,
    5823447,
    5804182,
    5805041,
    5802319,
    5760907,
    5781078,
    5781136,
    5797226,
    5803701,
    5788854,
    5778882,
    5758662,
    5744935,
    5750101,
    5723844,
    5728636,
    5728422,
    5738734,
    5744123,
    5718524,
    5716097,
    5719073,
    5731966,
    5753568,
    5752897,
    5759948,
    5763669,
    5754805,
    5763049,
    5747865,
    5750246,
    5761394,
    5756454,
    5763964,
    5757028,
    5741148,
    5758536,
    5744792,
    5750638,
    5751778,
    5727395,
    5735500,
    5707114,
    5715654,
    5727490,
    5729292,
    5757562,
    5749124,
    5748554,
    5762629,
    5749880,
    5758430,
    5741090,
    5737602,
    5751140,
    5735104,
    5739508,
    5704926,
    5695070,
    5707514,
    5698768,
    5713435,
    5710582,
    5720030,
    5703990,
    5707986,
    5708584,
    5708857,
    5742247,
    5737112,
    5752314,
    5759016,
    5744673,
    5754236,
    5756679,
    5751015,
    5762136,
    5751756,
    5754689,
    5741130,
    5726892,
    5734586,
    5725921,
    5737368,
    5746409,
    5722786,
    5730009,
    5718826,
    5708980,
    5713213,
    5703316,
    5732883,
    5728044,
    5733404,
    5740445,
    5715130,
    5732330,
    5731724,
    5726201,
    5745654,
    5730152,
    5742330,
    5738654,
    5714286,
    5723041,
    5717812,
    5749166,
    5757582,
    5747322,
    5754714,
    5745096,
    5757881,
    5774238,
    5774258,
    5794820,
    5787720,
    5785381,
    5795353,
    5768419,
    5774276,
    5777203,
    5773258,
    5786434,
    5768637,
    5762812,
    5774384,
    5763005,
    5774456,
    5767532,
    5778830,
    5789048,
    5783232,
    5794032,
    5798182,
    5769838,
    5786686,
    5768436,
    5776380,
    5785700,
    5779373,
    5785792,
    5753810,
    5755853,
    5756502,
    5750602,
    5768557,
    5746020,
    5739950,
    5745219,
    5728914,
    5748023,
    5744314,
    5745456,
    5778540,
    5781412,
    5798874,
    5789696,
    5783289,
    5809176,
    5807945,
    5806804,
    5790206,
    5772482,
    5762968,
    5739788,
    5725052,
    5705648,
    5692760,
    5689570,
    5679168,
    5668334,
    5662672,
    5646614,
    5632505,
    5636868,
    5631528,
    5660814,
    5659162,
    5668516,
    5676849,
    5666405,
    5689729,
    5693564,
    5706580,
    5746761,
    5736665,
    5763422,
    5765430,
    5742734,
    5747286,
    5744042,
    5767547,
    5772081,
    5751809,
    5751444,
    5737529,
    5730205,
    5742740,
    5717072,
    5719164,
    5713080,
    5706629,
    5711606,
    5676553,
    5670126,
    5664722,
    5668529,
    5679380,
    5665533,
    5664817,
    5662716,
    5646364,
    5654417,
    5632214,
    5627403,
    5639805,
    5636530,
    5647996,
    5631416,
    5632220,
    5658016,
    5677786,
    5698748,
    5717570,
    5717594,
    5730005,
    5711463,
    5717135,
    5715972,
    5715055,
    5731094,
    5720595,
    5725013,
    5723902,
    5693958,
    5713801,
    5689220,
    5691808,
    5706032,
    5687457,
    5693584,
    5657052,
    5655408,
    5666161,
    5660848,
    5691658,
    5686181,
    5684337,
    5712669,
    5695644,
    5706806,
    5691102,
    5683642,
    5709558,
    5701550,
    5708030,
    5684740,
    5673809,
    5695528,
    5702465,
    5707390,
    5711873,
    5695180,
    5702470,
    5689586,
    5680105,
    5687396,
    5683160,
    5707020,
    5714653,
    5701737,
    5707694,
    5696099,
    5702721,
    5723953,
    5715843,
    5736502,
    5726526,
    5717989,
    5706157,
    5690024,
    5699771,
    5690774,
    5694502,
    5703389,
    5679286,
    5697264,
    5690936,
    5684572,
    5700997,
    5686411,
    5712076,
    5708969,
    5694910,
    5688780,
    5665162,
    5679043,
    5684092,
    5677377,
    5692347,
    5670686,
    5658789,
    5657068,
    5626377,
    5678110,
    5616748,
    5577372,
    5670222,
    5665169,
    5729498,
    5744164,
    5703566,
    5729873,
    5681388,
    5697361,
    5726424,
    5719585,
    5728393,
    5681438,
    5672494,
    5678402,
    5698134,
    5720758,
    5721073,
    5714804,
    5701013,
    5673544,
    5686068,
    5683314,
    5705930,
    5711076,
    5688742,
    5693256,
    5663181,
    5645985,
    5676433,
    5674142,
    5683805,
    5698929,
    5694477,
    5701429,
    5676720,
    5684564,
    5707861,
    5727738,
    5743584,
    5714262,
    5708037,
    5702808,
    5690754,
    5714330,
    5710009,
    5703544,
    5722871,
    5713078,
    5714778,
    5692787,
    5684120,
    5701875,
    5707326,
    5729714,
    5737601,
    5724446,
    5741189,
    5727060,
    5720141,
    5712674,
    5703194,
    5728993,
    5737168,
    5735506,
    5728522,
    5710526,
    5715972,
    5724227,
    5723946,
    5741425,
    5726836,
    5721634,
    5700484,
    5683672,
    5692370,
    5685920,
    5707837,
    5735760,
    5719450,
    5743437,
    5729781,
    5718407,
    5740722,
    5765417,
    5794324,
    5795520,
    5803510,
    5816013,
    5799282,
    5825470,
    5824846,
    5813503,
    5831986,
    5810368,
    5819169,
    5821662,
    5775803,
    5758036,
    5747852,
    5759462,
    5768037,
    5747527,
    5749378,
    5726104,
    5714320,
    5727147,
    5693854,
    5698994,
    5706942,
    5706274,
    5715137,
    5680376,
    5662481,
    5665883,
    5660771,
    5678469,
    5657233,
    5638996,
    5642096,
    5605430,
    5616677,
    5602272,
    5597053,
    5609004,
    5578452,
    5582398,
    5550888,
    5508146,
    5526872,
    5491862,
    5500651,
    5501582,
    5476702,
    5490204,
    5452619,
    5450244,
    5451561,
    5442321,
    5467143,
    5453460,
    5457201,
    5473198,
    5444511,
    5459241,
    5434579,
    5427508,
    5457776,
    5448842,
    5449236,
    5414854,
    5403665,
    5413954,
    5409554,
    5435390,
    5440730,
    5427014,
    5449179,
    5426565,
    5421494,
    5421805,
    5416250,
    5456592,
    5468099,
    5458949,
    5445751,
    5425767,
    5425912,
    5415000,
    5395710,
    5391855,
    5368958,
    5338684,
    5294244,
    5253512,
    5236894,
    5226962,
    5235848,
    5275652,
    5275830,
    5326839,
    5318811,
    5317974,
    5325610,
    5312186,
    5344026,
    5343729,
    5339111,
    5339070,
    5313020,
    5326836,
    5329797,
    5324489,
    5363718,
    5353937,
    5393131,
    5407036,
    5405788,
    5443390,
    5452569,
    5504359,
    5521475,
    5523309,
    5542684,
    5529892,
    5543857,
    5565485,
    5561235,
    5592370,
    5609236,
    5615477,
    5627571,
    5611702,
    5610501,
    5609862,
    5602622,
    5616050,
    5589780,
    5570924,
    5563538,
    5511905,
    5516133,
    5477977,
    5460058,
    5475475,
    5457682,
    5465065,
    5457790,
    5444259,
    5463482,
    5450521,
    5464984,
    5486962,
    5479368,
    5488245,
    5447683,
    5445278,
    5452343,
    5462294,
    5489578,
    5479136,
    5476118,
    5482894,
    5453538,
    5474821,
    5460334,
    5456198,
    5492058,
    5491678,
    5493977,
    5469391,
    5457867,
    5472265,
    5468948,
    5487090,
    5487673,
    5472318,
    5493897,
    5479846,
    5472231,
    5471854,
    5461533,
    5486636,
    5497893,
    5490914,
    5491322,
    5472587,
    5481726,
    5494896,
    5498957,
    5538586,
    5528201,
    5538575,
    5532531,
    5482132,
    5503526,
    5498166,
    5505024,
    5525564,
    5504942,
    5521241,
    5509866,
    5492856,
    5510992,
    5500853,
    5541443,
    5544325,
    5537083,
    5533229,
    5505868,
    5507012,
    5505934,
    5477868,
    5488928,
    5473767,
    5487615,
    5495138,
    5464968,
    5466635,
    5473025,
    5497866,
    5508830,
    5498032,
    5493258,
    5477929,
    5469807,
    5483778,
    5465533,
    5479199,
    5490080,
    5485021,
    5489406,
    5454591,
    5438662,
    5455229,
    5466719,
    5485075,
    5486875,
    5476453,
    5481729,
    5452645,
    5464416,
    5463542,
    5470679,
    5495770,
    5488518,
    5491482,
    5485016,
    5463835,
    5485314,
    5472347,
    5482153,
    5501156,
    5488964,
    5500206,
    5469457,
    5465126,
    5482965,
    5476653,
    5492073,
    5496148,
    5491708,
    5506457,
    5470638,
    5482053,
    5460557,
    5456835,
    5493161,
    5498379,
    5490696,
    5469226,
    5457417,
    5467511,
    5469895,
    5484491,
    5493133,
    5476888,
    5491252,
    5467037,
    5459526,
    5509876,
    5531516,
    5617661,
    5629007,
    5585253,
    5540826,
    5522434,
    5513521,
    5533561,
    5524355,
    5553675,
    5543609,
    5540909,
    5539054,
    5516832,
    5535459,
    5535725,
    5543335,
    5561215,
    5540762,
    5555455,
    5547065,
    5527720,
    5540395,
    5531355,
    5565905,
    5573791,
    5568619,
    5568083,
    5547195,
    5550785,
    5559233,
    5549650,
    5578809,
    5567628,
    5574704,
    5581484,
    5544679,
    5539845,
    5542014,
    5551007,
    5558312,
    5560902,
    5553502,
    5546832,
    5536282,
    5548220,
    5559674,
    5581786,
    5590873,
    5582291,
    5590915,
    5572397,
    5564718,
    5577270,
    5575277,
    5588580,
    5592779,
    5590807,
    5601873,
    5576342,
    5585291,
    5586645,
    5588888,
    5613001,
    5602017,
    5599466,
    5593643,
    5573134,
    5592796,
    5582876,
    5590203,
    5617420,
    5605225,
    5614315,
    5583241,
    5576549,
    5590300,
    5595730,
    5609610,
    5597897,
    5587761,
    5593827,
    5571485,
    5585554,
    5577802,
    5568711,
    5596230,
    5596434,
    5589018,
    5574595,
    5561301,
    5567330,
    5571741,
    5578531,
    5586509,
    5572423,
    5582837,
    5569770,
    5557660,
    5564087,
    5553108,
    5568655,
    5587539,
    5574848,
    5579963,
    5567604,
    5553908,
    5557149,
    5552157,
    5583688,
    5573889,
    5567589,
    5558282,
    5537052,
    5553305,
    5555205,
    5558042,
    5575991,
    5556393,
    5566301,
    5557190,
    5529625,
    5541073,
    5529417,
    5562515,
    5568251,
    5554166,
    5549760,
    5534345,
    5537431,
    5543028,
    5526199,
    5545255,
    5538423,
    5553806,
    5561891,
    5533476,
    5534001,
    5542299,
    5557926,
    5572394,
    5563407,
    5556283,
    5552142,
    5540300,
    5554998,
    5539511,
    5554639,
    5568018,
    5558431,
    5564962,
    5538907,
    5518800,
    5539270,
    5538974,
    5552680,
    5556396,
    5541235,
    5547102,
    5516410,
    5526158,
    5526146,
    5517918,
    5537141,
    5514933,
    5513702,
    5512381,
    5497093,
    5517808,
    5508731,
    5514410,
    5536750,
    5520708,
    5524824,
    5491791,
    5484920,
    5501527,
    5506593,
    5523255,
    5521445,
    5513489,
    5528595,
    5503794,
    5518927,
    5515388,
    5510013,
    5548253,
    5545607,
    5529910,
    5506520,
    5491843,
    5499791,
    5511470,
    5521958,
    5540640,
    5525931,
    5539508,
    5521132,
    5510416,
    5525165,
    5516104,
    5544801,
    5560228,
    5541852,
    5541753,
    5528184,
    5526712,
    5533646,
    5530154,
    5558536,
    5547449,
    5556583,
    5552637,
    5527171,
    5534392,
    5531187,
    5541132,
    5560459,
    5540722,
    5548512,
    5533600,
    5517657,
    5529090,
    5519137,
    5556473,
    5553848,
    5546339,
    5536479,
    5512981,
    5522765,
    5529113,
    5535054,
    5567037,
    5539194,
    5544789,
    5544579,
    5500118,
    5517750,
    5543151,
    5550562,
    5563103,
    5548690,
    5538284,
    5526398,
    5520186,
    5534584,
    5519942,
    5540133,
    5537812,
    5530158,
    5541384,
    5511876,
    5501302,
    5515739,
    5517611,
    5532161,
    5532669,
    5529517,
    5528439,
    5500683,
    5513223,
    5508819,
    5521787,
    5546741,
    5535087,
    5533471,
    5523615,
    5505017,
    5522454,
    5512233,
    5520297,
    5539284,
    5527733,
    5537928,
    5502760,
    5500164,
    5516415,
    5524262,
    5539580,
    5525476,
    5513852,
    5518684,
    5498918,
    5514416,
    5502413,
    5495372,
    5525127,
    5523301,
    5521426,
    5506114,
    5490508,
    5499624,
    5505059,
    5510994,
    5518646,
    5503410,
    5507537,
    5506087,
    5485644,
    5497740,
    5487614,
    5506729,
    5522045,
    5500558,
    5503856,
    5493047,
    5484958,
    5499118,
    5499245,
    5530497,
    5519968,
    5509828,
    5502435,
    5480211,
    5502499,
    5506680,
    5508749,
    5524432,
    5505775,
    5514731,
    5510385,
    5483861,
    5499635,
    5491250,
    5524013,
    5530628,
    5513077,
    5505782,
    5494854,
    5497635,
    5508484,
    5497958,
    5517964,
    5514114,
    5519639,
    5527180,
    5493554,
    5489908,
    5498314,
    5509229,
    5524762,
    5517750,
    5506732,
    5504654,
    5488717,
    5504252,
    5501947,
    5520851,
    5536867,
    5525949,
    5533439,
    5515460,
    5496239,
    5519859,
    5516193,
    5523617,
    5532665,
    5513629,
    5521149,
    5488005,
    5498382,
    5516595,
    5505514,
    5525853,
    5521381,
    5515496,
    5518834,
    5491245,
    5505538,
    5495695,
    5499636,
    5532392,
    5525129,
    5533651,
    5509429,
    5496952,
    5509344,
    5506581,
    5516388,
    5518825,
    5507986,
    5521152,
    5498925,
    5498680,
    5495261,
    5488264,
    5526122,
    5537491,
    5522952,
    5516654,
    5499996,
    5498393,
    5505340,
    5502043,
    5526818,
    5517810,
    5526176,
    5517970,
    5498046,
    5512545,
    5502439,
    5508136,
    5522354,
    5498366,
    5511292,
    5505637,
    5492678,
    5502702,
    5494385,
    5526931,
    5525303,
    5521019,
    5524020,
    5496528,
    5507516,
    5515640,
    5509190,
    5531539,
    5524187,
    5533738,
    5535332,
    5503368,
    5511577,
    5505145,
    5530484,
    5544888,
    5529316,
    5525822,
    5515922,
    5508215,
    5525582,
    5520379,
    5542090,
    5540072,
    5532714,
    5541208,
    5506953,
    5503769,
    5518156,
    5521478,
    5538838,
    5536743,
    5528714,
    5537576,
    5515974,
    5527415,
    5526511,
    5540764,
    5555665,
    5538833,
    5544701,
    5532407,
    5514925,
    5537196,
    5527500,
    5532683,
    5552121,
    5542379,
    5547288,
    5508174,
    5511001,
    5523662,
    5532839,
    5559841,
    5547852,
    5535576,
    5536935,
    5513903,
    5525159,
    5517016,
    5515381,
    5545499,
    5538344,
    5540949,
    5512705,
    5498570,
    5515563,
    5525355,
    5532224,
    5535028,
    5517942,
    5516550,
    5497271,
    5494654,
    5495194,
    5484952,
    5509834,
    5521336,
    5506360,
    5512153,
    5494455,
    5486407,
    5492112,
    5485622,
    5508975,
    5499322,
    5496996,
    5486026,
    5467418,
    5482217,
    5476129,
    5484159,
    5509809,
    5488530,
    5500109,
    5492112,
    5464786,
    5471212,
    5470283,
    5504544,
    5503156,
    5487858,
    5485589,
    5462460,
    5477701,
    5487532,
    5478911,
    5494500,
    5488122,
    5493257,
    5498534,
    5469981,
    5475349,
    5473839,
    5494762,
    5506175,
    5487480,
    5481027,
    5478368,
    5471384,
    5487227,
    5478024,
    5492106,
    5500052,
    5498176,
    5506206,
    5476590,
    5464277,
    5480352,
    5485159,
    5502845,
    5506941,
    5493296,
    5499358,
    5471966,
    5480141,
    5479213,
    5489171,
    5509451,
    5496712,
    5501494,
    5493497,
    5467305,
    5497956,
    5492153,
    5496231,
    5517804,
    5505165,
    5511662,
    5481199,
    5481854,
    5498500,
    5497967,
    5522360,
    5512510,
    5503945,
    5519090,
    5499743,
    5506697,
    5498050,
    5492875,
    5519603,
    5514078,
    5513217,
    5493632,
    5478433,
    5495187,
    5507398,
    5517040,
    5536017,
    5521770,
    5526210,
    5501115,
    5489789,
    5496036,
    5492012,
    5524173,
    5535956,
    5515754,
    5514816,
    5500791,
    5497529,
    5516576,
    5507628,
    5536421,
    5529825,
    5525602,
    5517642,
    5498593,
    5519614,
    5516852,
    5529202,
    5551083,
    5524835,
    5535605,
    5532865,
    5511112,
    5518794,
    5514099,
    5544924,
    5548555,
    5544374,
    5549650,
    5523176,
    5530556,
    5539072,
    5524224,
    5550255,
    5551807,
    5543913,
    5547822,
    5517061,
    5521184,
    5522100,
    5546234,
    5560615,
    5550578,
    5545664,
    5535448,
    5518498,
    5535917,
    5529668,
    5549426,
    5559342,
    5548488,
    5555114,
    5527210,
    5520748,
    5535226,
    5533438,
    5549449,
    5553172,
    5544662,
    5552703,
    5524479,
    5529326,
    5529391,
    5536793,
    5555098,
    5541408,
    5543988,
    5539348,
    5513968,
    5533763,
    5517591,
    5519664,
    5547670,
    5550390,
    5554163,
    5521871,
    5514296,
    5519818,
    5517515,
    5539861,
    5530145,
    5518390,
    5529786,
    5514853,
    5520487,
    5517433,
    5509582,
    5535035,
    5529855,
    5526168,
    5507663,
    5491995,
    5507778,
    5518246,
    5523810,
    5535890,
    5524210,
    5516620,
    5513496,
    5495193,
    5504496,
    5496900,
    5514105,
    5523466,
    5510704,
    5516054,
    5498921,
    5488554,
    5498409,
    5492971,
    5523926,
    5518541,
    5510980,
    5497889,
    5476557,
    5490244,
    5486937,
    5492592,
    5520708,
    5496617,
    5506259,
    5501458,
    5469397,
    5474334,
    5473514,
    5503548,
    5508051,
    5492853,
    5488330,
    5473038,
    5480564,
    5494730,
    5483856,
    5494693,
    5498957,
    5493582,
    5501983,
    5475365,
    5468116,
    5479758,
    5488227,
    5500694,
    5497148,
    5486286,
    5495007,
    5470960,
    5480805,
    5482785,
    5488499,
    5510828,
    5500903,
    5501150,
    5493538,
    5468770,
    5489838,
    5481138,
    5490653,
    5516272,
    5501068,
    5509246,
    5476828,
    5477332,
    5484779,
    5489194,
    5508604,
    5500144,
    5494997,
    5503343,
    5472649,
    5489290,
    5476843,
    5473770,
    5507254,
    5505927,
    5504302,
    5484819,
    5475134,
    5491866,
    5491376,
    5505357,
    5507775,
    5495932,
    5514173,
    5497836,
    5489304,
    5490242,
    5483564,
    5511021,
    5520143,
    5509350,
    5501165,
    5484691,
    5487937,
    5493603,
    5493674,
    5521927,
    5510162,
    5516059,
    5506172,
    5484526,
    5494362,
    5492616,
    5512436,
    5531268,
    5511054,
    5519461,
    5506966,
    5497108,
    5512538,
    5498510,
    5527150,
    5525691,
    5518582,
    5515144,
    5494309,
    5509863,
    5510872,
    5511829,
    5533955,
    5512306,
    5527161,
    5528541,
    5504574,
    5510420,
    5508030,
    5530753,
    5539393,
    5531109,
    5531031,
    5508286,
    5509653,
    5522638,
    5512555,
    5540833,
    5537448,
    5536917,
    5544619,
    5511989,
    5511165,
    5522008,
    5542031,
    5557101,
    5549532,
    5545836,
    5539588,
    5520598,
    5538337,
    5528325,
    5539085,
    5551619,
    5539015,
    5544526,
    5526075,
    5520811,
    5537458,
    5534087,
    5548719,
    5552996,
    5540884,
    5553327,
    5523811,
    5528948,
    5536009,
    5548074,
    5564472,
    5547852,
    5547004,
    5538296,
    5513851,
    5539237,
    5530040,
    5533756,
    5566353,
    5562591,
    5562680,
    5528453,
    5520249,
    5529661,
    5541470,
    5562030,
    5554285,
    5541793,
    5548784,
    5522825,
    5531579,
    5526269,
    5519055,
    5548855,
    5555099,
    5541317,
    5525627,
    5510371,
    5520809,
    5524112,
    5531347,
    5539615,
    5522091,
    5528249,
    5518339,
    5503691,
    5508166,
    5500686,
    5518491,
    5528181,
    5517149,
    5517976,
    5498328,
    5490460,
    5503559,
    5500647,
    5533317,
    5524878,
    5512725,
    5496960,
    5478641,
    5492234,
    5491461,
    5499347,
    5524111,
    5502282,
    5514424,
    5507021,
    5476057,
    5484079,
    5481117,
    5510884,
    5514704,
    5496137,
    5487232,
    5469536,
    5481332,
    5489602,
    5479844,
    5501346,
    5493646,
    5500099,
    5506855,
    5472806,
    5467157,
    5473414,
    5491941,
    5503137,
    5491764,
    5488937,
    5478550,
    5467331,
    5483778,
    5469143,
    5481063,
    5498720,
    5493162,
    5498136,
    5465549,
    5469772,
    5477273,
    5491655,
    5506907,
    5509886,
    5488236,
    5495744,
    5465721,
    5474042,
    5482810,
    5491976,
    5511024,
    5497295,
    5497586,
    5489372,
    5466303,
    5489341,
    5477510,
    5483463,
    5505662,
    5490093,
    5500507,
    5472044,
    5468482,
    5483986,
    5485039,
    5504974,
    5495975,
    5489788,
    5501322,
    5470853,
    5482362,
    5473709,
    5469127,
    5503774,
    5504878,
    5497145,
    5475622,
    5464769,
    5475697,
    5480045,
    5490265,
    5500237,
    5485222,
    5496117,
    5482557,
    5470466,
    5482688,
    5478837,
    5504269,
    5508953,
    5491960,
    5487952,
    5473266,
    5473012,
    5487241,
    5478447,
    5508232,
    5500808,
    5499170,
    5496282,
    5475749,
    5489580,
    5484670,
    5496152,
    5507683,
    5503998,
    5507715,
    5502011,
    5480864,
    5491035,
    5485845,
    5518023,
    5524765,
    5517079,
    5510465,
    5489134,
    5496274,
    5507200,
    5504806,
    5539452,
    5526374,
    5527472,
    5534120,
    5495152,
    5494806,
    5503279,
    5523456,
    5535899,
    5527088,
    5528282,
    5519626,
    5510570,
    5529221,
    5521822,
    5537461,
    5548693,
    5536104,
    5541840,
    5520878,
    5516166,
    5530555,
    5530624,
    5545256,
    5548750,
    5541750,
    5550374,
    5517785,
    5529062,
    5542125,
    5563779,
    5553641,
    5551918,
    5545590,
    5522030,
    5541441,
    5527460,
    5533070,
    5561378,
    5550924,
    5556298,
    5520837,
    5513634,
    5526114,
    5538374,
    5557011,
    5549207,
    5544646,
    5541651,
    5519034,
    5531719,
    5524984,
    5515476,
    5544270,
    5545753,
    5538970,
    5527130,
    5513624,
    5523189,
    5528044,
    5533895,
    5542733,
    5524963,
    5529307,
    5522671,
    5509978,
    5521527,
    5514425,
    5526457,
    5535334,
    5520175,
    5522136,
    5506552,
    5498229,
    5512042,
    5505340,
    5540445,
    5530885,
    5517243,
    5502763,
    5481172,
    5495391,
    5498064,
    5504967,
    5526877,
    5504801,
    5514773,
    5505240,
    5477449,
    5491608,
    5486388,
    5518830,
    5520428,
    5502264,
    5490777,
    5472095,
    5486031,
    5492443,
    5491243,
    5518403,
    5502275,
    5512759,
    5514780,
    5479676,
    5478542,
    5480291,
    5502781,
    5511726,
    5497564,
    5492360,
    5482168,
    5476702,
    5491546,
    5479711,
    5497121,
    5503020,
    5495884,
    5502136,
    5469141,
    5458780,
    5478569,
    5496092,
    5509802,
    5506914,
    5486110,
    5488895,
    5461460,
    5474300,
    5476459,
    5481598,
    5502589,
    5489740,
    5487527,
    5478529,
    5459576,
    5480347,
    5472560,
    5481261,
    5504707,
    5491423,
    5501223,
    5469924,
    5464177,
    5475130,
    5475577,
    5493706,
    5490474,
    5484827,
    5498911,
    5470264,
    5482131,
    5472000,
    5466724,
    5498170,
    5499485,
    5488449,
    5472705,
    5460209,
    5471097,
    5477441,
    5484604,
    5496281,
    5481808,
    5490776,
    5478699,
    5464624,
    5478921,
    5473136,
    5491968,
    5501585,
    5482461,
    5484269,
    5473459,
    5466203,
    5480086,
    5460743,
    5490539,
    5485357,
    5484188,
    5488176,
    5466697,
    5480943,
    5484894,
    5488717,
    5510201,
    5494124,
    5508606,
    5508160,
    5484342,
    5500632,
    5497461,
    5527701,
    5541286,
    5531855,
    5535363,
    5529722,
    5548628,
    5566845,
    5568644,
    5590928,
    5570183,
    5545575,
    5554400,
    5503005,
    5491778,
    5507466,
    5510993,
    5524638,
    5509973,
    5485825,
    5478499,
    5452240,
    5472531,
    5469544,
    5486161,
    5512814,
    5508166,
    5518199,
    5519797,
    5516555,
    5548581,
    5562071,
    5578431,
    5627182,
    5640544,
    5663737,
    5643088,
    5652728,
    5690293,
    5722290,
    5757784,
    5746465,
    5730779,
    5726917,
    5685283,
    5700121,
    5679769,
    5680940,
    5754663,
    5730573,
    5745484,
    5760924,
    5758384,
    5826560,
    5870932,
    5887469,
    5899301,
    5883617,
    5903670,
    5882552,
    5876806,
    5854882,
    5835733,
    5853084,
    5867364,
    5858741,
    5880126,
    5877750,
    5908034,
    5943629,
    5950932,
    6004194,
    5983855,
    6011414,
    6015724,
    6006688,
    6043124,
    6045310,
    6055937,
    6088356,
    6068318,
    6081798,
    6075262,
    6019265,
    5972981,
    5925949,
    5887638,
    5880032,
    5801255,
    5753462,
    5705250,
    5680274,
    5683397,
    5647265,
    5653034,
    5634218,
    5633542,
    5630741,
    5572520,
    5550606,
    5528478,
    5510127,
    5515082,
    5451824,
    5408399,
    5390983,
    5361510,
    5371471,
    5333737,
    5333719,
    5330328,
    5315545,
    5324540,
    5285766,
    5281782,
    5258278,
    5244826,
    5256712,
    5247735,
    5233018,
    5233354,
    5198885,
    5208509,
    5193922,
    5187651,
    5209819,
    5185200,
    5187049,
    5177548,
    5150597,
    5174154,
    5157184,
    5157047,
    5159397,
    5121161,
    5136722,
    5099648,
    5103240,
    5122728,
    5117261,
    5136003,
    5116407,
    5106622,
    5122272,
    5112584,
    5128001,
    5123533,
    5121077,
    5153319,
    5142207,
    5143300,
    5110942,
    5088379,
    5080175,
    5058312,
    5052802,
    5052167,
    5040946,
    5054648,
    5046519,
    5052252,
    5077248,
    5069107,
    5110185,
    5132621,
    5123310,
    5145282,
    5131038,
    5128527,
    5106471,
    5077396,
    5065244,
    5048361,
    5034505,
    5041521,
    5030695,
    5084076,
    5084632,
    5101630,
    5201573,
    5181853,
    5206582,
    5195253,
    5151571,
    5119549,
    5086476,
    5076848,
    5069182,
    5024365,
    5009115,
    4996556,
    5037407,
    5066887,
    5117784,
    5195643,
    5207712,
    5243609,
    5244478,
    5194880,
    5145595,
    5110894,
    5071425,
    5085044,
    5048398,
    5032852,
    5027409,
    5010051,
    5029244,
    5033930,
    5084555,
    5114538,
    5150918,
    5170590,
    5162415,
    5128986,
    5122146,
    5071516,
    5077219,
    5055220,
    5043242,
    5057004,
    5050221,
    5070596,
    5120547,
    5193614,
    5256188,
    5317121,
    5339016,
    5413977,
    5447845,
    5479674,
    5478093,
    5476740,
    5496851,
    5474567,
    5481233,
    5429417,
    5418395,
    5409241,
    5382385,
    5393476,
    5368433,
    5345880,
    5333305,
    5273258,
    5252286,
    5208115,
    5204920,
    5241553,
    5280574,
    5315311,
    5360613,
    5359928,
    5432717,
    5481130,
    5478075,
    5483486,
    5461975,
    5443323,
    5396747,
    5373023,
    5352610,
    5338412,
    5356494,
    5395866,
    5392556,
    5439406,
    5426654,
    5435712,
    5442356,
    5421885,
    5431148,
    5415449,
    5391511,
    5375812,
    5346743,
    5348755,
    5346657,
    5345603,
    5374022,
    5371182,
    5409709,
    5414957,
    5420201,
    5460408,
    5465314,
    5511824,
    5512873,
    5487121,
    5454802,
    5408868,
    5367351,
    5368419,
    5318427,
    5325692,
    5329419,
    5348695,
    5358994,
    5333509,
    5331112,
    5322112,
    5319903,
    5334203,
    5300095,
    5277691,
    5287345,
    5263288,
    5274836,
    5261604,
    5279010,
    5299893,
    5317732,
    5335450,
    5330332,
    5320393,
    5334681,
    5323059,
    5335298,
    5334649,
    5312127,
    5310388,
    5258401,
    5257698,
    5227025,
    5191619,
    5205777,
    5169034,
    5174930,
    5179563,
    5160798,
    5188248,
    5180591,
    5183711,
    5216971,
    5205704,
    5208594,
    5169195,
    5161309,
    5171153,
    5167623,
    5189626,
    5200214,
    5188691,
    5212601,
    5195295,
    5174578,
    5152709,
    5140063,
    5150165,
    5156005,
    5151645,
    5149928,
    5128540,
    5121372,
    5120733,
    5115175,
    5157104,
    5154750,
    5178973,
    5183612,
    5160360,
    5171936,
    5164723,
    5174914,
    5208254,
    5188327,
    5226565,
    5218861,
    5197289,
    5210324,
    5219777,
    5238637,
    5242534,
    5240529,
    5249480,
    5223776,
    5241182,
    5245467,
    5235735,
    5265778,
    5258683,
    5285639,
    5294574,
    5279641,
    5285788,
    5279465,
    5297942,
    5310096,
    5295295,
    5298719,
    5279530,
    5268865,
    5282317,
    5260415,
    5279995,
    5293761,
    5300582,
    5307940,
    5280094,
    5269932,
    5270998,
    5267029,
    5287356,
    5279704,
    5274418,
    5278925,
    5247123,
    5258578,
    5248191,
    5261575,
    5277891,
    5268815,
    5279118,
    5265806,
    5252682,
    5274807,
    5266556,
    5277712,
    5297074,
    5286490,
    5295600,
    5258827,
    5259739,
    5263530,
    5265225,
    5293719,
    5279353,
    5278317,
    5286799,
    5260088,
    5274232,
    5250175,
    5250862,
    5269588,
    5258147,
    5249230,
    5219313,
    5210988,
    5215381,
    5214452,
    5240472,
    5244015,
    5231961,
    5254116,
    5240732,
    5239140,
    5237385,
    5229022,
    5263051,
    5267755,
    5262570,
    5245178,
    5225224,
    5231801,
    5240495,
    5237239,
    5257120,
    5242794,
    5240269,
    5224594,
    5211716,
    5219851,
    5212911,
    5229652,
    5252187,
    5231286,
    5237069,
    5218296,
    5186671,
    5186608,
    5178744,
    5214520,
    5217572,
    5221311,
    5218245,
    5193781,
    5198826,
    5197449,
    5191441,
    5228563,
    5214193,
    5237770,
    5232676,
    5195702,
    5187812,
    5190151,
    5221272,
    5227063,
    5217313,
    5219617,
    5204038,
    5215572,
    5231614,
    5228475,
    5255176,
    5263977,
    5273073,
    5280159,
    5265484,
    5238434,
    5242127,
    5252010,
    5270713,
    5271040,
    5275250,
    5278085,
    5257815,
    5266283,
    5245293,
    5246122,
    5264012,
    5261651,
    5268773,
    5247655,
    5230216,
    5249710,
    5244308,
    5258940,
    5272034,
    5258570,
    5267941,
    5231160,
    5230982,
    5227696,
    5229719,
    5254221,
    5245985,
    5250044,
    5259740,
    5234401,
    5261488,
    5255632,
    5259717,
    5297826,
    5296961,
    5300783,
    5265604,
    5256523,
    5251809,
    5238660,
    5257532,
    5251921,
    5239466,
    5250812,
    5216870,
    5205206,
    5184479,
    5177186,
    5198611,
    5196350,
    5189181,
    5164222,
    5145867,
    5144564,
    5140195,
    5142671,
    5159836,
    5146377,
    5151652,
    5128969,
    5105206,
    5099925,
    5094717,
    5109501,
    5121893,
    5105035,
    5110412,
    5092359,
    5077639,
    5087258,
    5077712,
    5111942,
    5109159,
    5105236,
    5091782,
    5063205,
    5069681,
    5067982,
    5068556,
    5095791,
    5070830,
    5080244,
    5076683,
    5040404,
    5039018,
    5034907,
    5066566,
    5075604,
    5071667,
    5078381,
    5053841,
    5055451,
    5067570,
    5049104,
    5073480,
    5081934,
    5100071,
    5108559,
    5079591,
    5060921,
    5057401,
    5061684,
    5080603,
    5070472,
    5074542,
    5071951,
    5049581,
    5063854,
    5043953,
    5045759,
    5056792,
    5046776,
    5057855,
    5050562,
    5062521,
    5086383,
    5098458,
    5121090,
    5164325,
    5213860,
    5238619,
    5212197,
    5197365,
    5145990,
    5092590,
    5099280,
    5096435,
    5094707,
    5121464,
    5132731,
    5178395,
    5192474,
    5192448,
    5226450,
    5214736,
    5214522,
    5171479,
    5161310,
    5165160,
    5171162,
    5191117,
    5177557,
    5166137,
    5195531,
    5211979,
    5230653,
    5247362,
    5235611,
    5262738,
    5237660,
    5216787,
    5155835,
    5127525,
    5102624,
    5097387,
    5114650,
    5155069,
    5141783,
    5164588,
    5134691,
    5100361,
    5065447,
    5047047,
    5034475,
    5039035,
    5033678,
    5063090,
    5047627,
    5059066,
    5093524,
    5099966,
    5157891,
    5157040,
    5157227,
    5126130,
    5089864,
    5073639,
    5071151,
    5066714,
    5110180,
    5097326,
    5130990,
    5129613,
    5108470,
    5120767,
    5120276,
    5159257,
    5165324,
    5140790,
    5147791,
    5128388,
    5138206,
    5156493,
    5167431,
    5216284,
    5216657,
    5226581,
    5230001,
    5183502,
    5161754,
    5161285,
    5174158,
    5188854,
    5175772,
    5175918,
    5177680,
    5171910,
    5187947,
    5183941,
    5199129,
    5225486,
    5225176,
    5229445,
    5210109,
    5180448,
    5181936,
    5155258,
    5169186,
    5175338,
    5178041,
    5200643,
    5183827,
    5182946,
    5179307,
    5156101,
    5169151,
    5146747,
    5150122,
    5155923,
    5123291,
    5136403,
    5101523,
    5100275,
    5120001,
    5116820,
    5131668,
    5113940,
    5107265,
    5125162,
    5126232,
    5147487,
    5147027,
    5139234,
    5167889,
    5163229,
    5167787,
    5168920,
    5161272,
    5187646,
    5199204,
    5193296,
    5182907,
    5171319,
    5157317,
    5137131,
    5132616,
    5142925,
    5126004,
    5123232,
    5101810,
    5076768,
    5082246,
    5077280,
    5090885,
    5120389,
    5131671,
    5186029,
    5172674,
    5179928,
    5179903,
    5158047,
    5191671,
    5198912,
    5216691,
    5226747,
    5196475,
    5200480,
    5203338,
    5197512,
    5218025,
    5199133,
    5222877,
    5225628,
    5200363,
    5195768,
    5186344,
    5200120,
    5209623,
    5190731,
    5190749,
    5181953,
    5210321,
    5226026,
    5235798,
    5282917,
    5277753,
    5278885,
    5281524,
    5231257,
    5232254,
    5252237,
    5294861,
    5318485,
    5338913,
    5375787,
    5374814,
    5392305,
    5409851,
    5382212,
    5351560,
    5348079,
    5335170,
    5358398,
    5374692,
    5444525,
    5491848,
    5568586,
    5604086,
    5666948,
    5717566,
    5762777,
    5730648,
    5715994,
    5717785,
    5708060,
    5724766,
    5695247,
    5695941,
    5685510,
    5664938,
    5682796,
    5645513,
    5642311,
    5642386,
    5620536,
    5634172,
    5607424,
    5600889,
    5616631,
    5622053,
    5647096,
    5643134,
    5632698,
    5652141,
    5626362,
    5637612,
    5626493,
    5615485,
    5646012,
    5644300,
    5633194,
    5610296,
    5596364,
    5606682,
    5608630,
    5617568,
    5628754,
    5611888,
    5625897,
    5618256,
    5599872,
    5604476,
    5598380,
    5614573,
    5627815,
    5612096,
    5613316,
    5591023,
    5576632,
    5585234,
    5575018,
    5608022,
    5604728,
    5594516,
    5590760,
    5569683,
    5585259,
    5588938,
    5590225,
    5624295,
    5610242,
    5619015,
    5614552,
    5557946,
    5527934,
    5513934,
    5515083,
    5524800,
    5500237,
    5501740,
    5492990,
    5504163,
    5515984,
    5502012,
    5520388,
    5520194,
    5520963,
    5530350,
    5497123,
    5480301,
    5491576,
    5490645,
    5506107,
    5501618,
    5500420,
    5499479,
    5475759,
    5485391,
    5466798,
    5462014,
    5486870,
    5478289,
    5478788,
    5468307,
    5447806,
    5467964,
    5461549,
    5471873,
    5490425,
    5468364,
    5475922,
    5430697,
    5424807,
    5424452,
    5409972,
    5428137,
    5414148,
    5409391,
    5425680,
    5407546,
    5426415,
    5419900,
    5419237,
    5464484,
    5478507,
    5482374,
    5474383,
    5461313,
    5470976,
    5467147,
    5474838,
    5482285,
    5476635,
    5505640,
    5508146,
    5483927,
    5512731,
    5518432,
    5526599,
    5536163,
    5515390,
    5504399,
    5487014,
    5472179,
    5467260,
    5461945,
    5488264,
    5475572,
    5475130,
    5469047,
    5443240,
    5460118,
    5461996,
    5472890,
    5492854,
    5471352,
    5477542,
    5464408,
    5432679,
    5436046,
    5421490,
    5450805,
    5455744,
    5441595,
    5434161,
    5411220,
    5407497,
    5413550,
    5397508,
    5411417,
    5395513,
    5397550,
    5403013,
    5368702,
    5371167,
    5381489,
    5402420,
    5422224,
    5419756,
    5421112,
    5409280,
    5389668,
    5400327,
    5376710,
    5389063,
    5399535,
    5393781,
    5404364,
    5380418,
    5364764,
    5384933,
    5383118,
    5395160,
    5399456,
    5383060,
    5379874,
    5335217,
    5345672,
    5350573,
    5345630,
    5377585,
    5380678,
    5380672,
    5387126,
    5367161,
    5377629,
    5359495,
    5362581,
    5386648,
    5386007,
    5400091,
    5366058,
    5356166,
    5360354,
    5355541,
    5371280,
    5365346,
    5355384,
    5367558,
    5344899,
    5356385,
    5345736,
    5340867,
    5378934,
    5384307,
    5377621,
    5365083,
    5348658,
    5357496,
    5366980,
    5368973,
    5382066,
    5369726,
    5382737,
    5378415,
    5373374,
    5391721,
    5381640,
    5404670,
    5426406,
    5408158,
    5414055,
    5399739,
    5382827,
    5388699,
    5385893,
    5421639,
    5414162,
    5414883,
    5418078,
    5393181,
    5409703,
    5411552,
    5408321,
    5426013,
    5407445,
    5413888,
    5404821,
    5365682,
    5365597,
    5357966,
    5392105,
    5392340,
    5370887,
    5373263,
    5365653,
    5355014,
    5365975,
    5351640,
    5369941,
    5360259,
    5359883,
    5363942,
    5324260,
    5323209,
    5333126,
    5349660,
    5367545,
    5360789,
    5348933,
    5345445,
    5324828,
    5335595,
    5323027,
    5335962,
    5350725,
    5342244,
    5352120,
    5332842,
    5309433,
    5331286,
    5318300,
    5328276,
    5334214,
    5322131,
    5325260,
    5291039,
    5299003,
    5303114,
    5308895,
    5340036,
    5334072,
    5329626,
    5332364,
    5301717,
    5317681,
    5311859,
    5314387,
    5348091,
    5336470,
    5343822,
    5313475,
    5306697,
    5326727,
    5330716,
    5342459,
    5341860,
    5328276,
    5339555,
    5316443,
    5320070,
    5314296,
    5308635,
    5341447,
    5341381,
    5331271,
    5319031,
    5293045,
    5296094,
    5311753,
    5313231,
    5340174,
    5329543,
    5340401,
    5323725,
    5306374,
    5314458,
    5307320,
    5328856,
    5354079,
    5328998,
    5334286,
    5323384,
    5306881,
    5316535,
    5312349,
    5349978,
    5344527,
    5342488,
    5340984,
    5312869,
    5328219,
    5334246,
    5332662,
    5356220,
    5340332,
    5350344,
    5347462,
    5319771,
    5329299,
    5320948,
    5349194,
    5358942,
    5342926,
    5337272,
    5323305,
    5319977,
    5336494,
    5334433,
    5364523,
    5361078,
    5361212,
    5366896,
    5327942,
    5332002,
    5341470,
    5362633,
    5361409,
    5353987,
    5351207,
    5323052,
    5334968,
    5328647,
    5350378,
    5362235,
    5347245,
    5355168,
    5332368,
    5312703,
    5338227,
    5332154,
    5338573,
    5350901,
    5338155,
    5339909,
    5301615,
    5307051,
    5315083,
    5324176,
    5352903,
    5338135,
    5330829,
    5328735,
    5300791,
    5311944,
    5301292,
    5300587,
    5334554,
    5336027,
    5342312,
    5310011,
    5297952,
    5308359,
    5312806,
    5331264,
    5334426,
    5317554,
    5322623,
    5293320,
    5290325,
    5285246,
    5279708,
    5321182,
    5348073,
    5336755,
    5336777,
    5316395,
    5306017,
    5318707,
    5314041,
    5342449,
    5335599,
    5329266,
    5321086,
    5304095,
    5323152,
    5320822,
    5322484,
    5348599,
    5333561,
    5352890,
    5351650,
    5320729,
    5317474,
    5314478,
    5339209,
    5344880,
    5327538,
    5320823,
    5298594,
    5289786,
    5302853,
    5282138,
    5293619,
    5308543,
    5307467,
    5312799,
    5284426,
    5288467,
    5297686,
    5319858,
    5336322,
    5325613,
    5313185,
    5309067,
    5285679,
    5299105,
    5288157,
    5300520,
    5313379,
    5306630,
    5313898,
    5287685,
    5268189,
    5284819,
    5276417,
    5291894,
    5300701,
    5289380,
    5296750,
    5267524,
    5271566,
    5271397,
    5273201,
    5294167,
    5284136,
    5288164,
    5286623,
    5258530,
    5283358,
    5271749,
    5276394,
    5309185,
    5304160,
    5307457,
    5273372,
    5270219,
    5281150,
    5281008,
    5308889,
    5302606,
    5291355,
    5302775,
    5278402,
    5286672,
    5289041,
    5286217,
    5322271,
    5316859,
    5316281,
    5290830,
    5277503,
    5290615,
    5288186,
    5294333,
    5300523,
    5287016,
    5296781,
    5287023,
    5276576,
    5280999,
    5276010,
    5306166,
    5315156,
    5305233,
    5306245,
    5289996,
    5289002,
    5297181,
    5290715,
    5320476,
    5312785,
    5316844,
    5307233,
    5293104,
    5314359,
    5311839,
    5335054,
    5360014,
    5331325,
    5337042,
    5329179,
    5308615,
    5328064,
    5331038,
    5382554,
    5383799,
    5386512,
    5387329,
    5363248,
    5382659,
    5389204,
    5381255,
    5395746,
    5380790,
    5392417,
    5399895,
    5388366,
    5409082,
    5407885,
    5439267,
    5449629,
    5438133,
    5436886,
    5422139,
    5417789,
    5433672,
    5417230,
    5416739,
    5411468,
    5393478,
    5400224,
    5363033,
    5356483,
    5362151,
    5361441,
    5378731,
    5365610,
    5350464,
    5353650,
    5329684,
    5342232,
    5361699,
    5365190,
    5379890,
    5354251,
    5358481,
    5332551,
    5313733,
    5340475,
    5331058,
    5339495,
    5356479,
    5347238,
    5354825,
    5323523,
    5325631,
    5331334,
    5329761,
    5350836,
    5330848,
    5326463,
    5330524,
    5313031,
    5327409,
    5319982,
    5318928,
    5348746,
    5343971,
    5344835,
    5311860,
    5302325,
    5316631,
    5323371,
    5342305,
    5344922,
    5327980,
    5337018,
    5315367,
    5307366,
    5303286,
    5295908,
    5322804,
    5325934,
    5318341,
    5310915,
    5293112,
    5300961,
    5317045,
    5315060,
    5339078,
    5327860,
    5327679,
    5316432,
    5303925,
    5314592,
    5304808,
    5315037,
    5330453,
    5310181,
    5324040,
    5314597,
    5298200,
    5306963,
    5301797,
    5333368,
    5326513,
    5317245,
    5320478,
    5297092,
    5307091,
    5307638,
    5294754,
    5316194,
    5301783,
    5312399,
    5313437,
    5287148,
    5297691,
    5299946,
    5332084,
    5337971,
    5320993,
    5313192,
    5296449,
    5294961,
    5311367,
    5300889,
    5317060,
    5324133,
    5293600,
    5294155,
    5304416,
    5319357,
    5333778,
    5322330,
    5304001,
    5309125,
    5289495,
    5301640,
    5301799,
    5316432,
    5331540,
    5322674,
    5327119,
    5304538,
    5280695,
    5305084,
    5299420,
    5308665,
    5325287,
    5310032,
    5315369,
    5284755,
    5285537,
    5295136,
    5303457,
    5329494,
    5320789,
    5316678,
    5321980,
    5291501,
    5309204,
    5300244,
    5298274,
    5329150,
    5320954,
    5319243,
    5294089,
    5287207,
    5302697,
    5300206,
    5315785,
    5316491,
    5303445,
    5323107,
    5310150,
    5303395,
    5299773,
    5294127,
    5318459,
    5318659,
    5315307,
    5305039,
    5289095,
    5291743,
    5299992,
    5298404,
    5326806,
    5315919,
    5321900,
    5305176,
    5286587,
    5294422,
    5289624,
    5309010,
    5328510,
    5306150,
    5313288,
    5304456,
    5289619,
    5302031,
    5290123,
    5315869,
    5314520,
    5306438,
    5302743,
    5281602,
    5297218,
    5299581,
    5301558,
    5325933,
    5305761,
    5314591,
    5313877,
    5283946,
    5287575,
    5280487,
    5309601,
    5314488,
    5304081,
    5307775,
    5286162,
    5293310,
    5303189,
    5293545,
    5314736,
    5306046,
    5305944,
    5308688,
    5274937,
    5275995,
    5280114,
    5283495,
    5309212,
    5303105,
    5298433,
    5291874,
    5279117,
    5296128,
    5294074,
    5312315,
    5316681,
    5304497,
    5312570,
    5290046,
    5287234,
    5306421,
    5301370,
    5315173,
    5321330,
    5309492,
    5316268,
    5285178,
    5289121,
    5292539,
    5301497,
    5320458,
    5305198,
    5306674,
    5309193,
    5288263,
    5308845,
    5295200,
    5294665,
    5324123,
    5321352,
    5323306,
    5291685,
    5285054,
    5296729,
    5300210,
    5323417,
    5317011,
    5301278,
    5311760,
    5296452,
    5297371,
    5298954,
    5291226,
    5318199,
    5316415,
    5308758,
    5295194,
    5278936,
    5291602,
    5308412,
    5306036,
    5327935,
    5313178,
    5310337,
    5303000,
    5289904,
    5304401,
    5298431,
    5317029,
    5318828,
    5310725,
    5325071,
    5311984,
    5288273,
    5298329,
    5290428,
    5323204,
    5324707,
    5312994,
    5304140,
    5282899,
    5293456,
    5298944,
    5292056,
    5320323,
    5305351,
    5314899,
    5316749,
    5278353,
    5278505,
    5286124,
    5311163,
    5323453,
    5309047,
    5305421,
    5297062,
    5291776,
    5308116,
    5292309,
    5298152,
    5308741,
    5300615,
    5308713,
    5285696,
    5279362,
    5295903,
    5301615,
    5316174,
    5311930,
    5295259,
    5303981,
    5277372,
    5283439,
    5284394,
    5290816,
    5311813,
    5301180,
    5301568,
    5290880,
    5263039,
    5284825,
    5271946,
    5280689,
    5305994,
    5289497,
    5296973,
    5262167,
    5256869,
    5268221,
    5270763,
    5292281,
    5280649,
    5278714,
    5282015,
    5262712,
    5251626,
    5264202,
    5256646,
    5289446,
    5284336,
    5275840,
    5258092,
    5246754,
    5264485,
    5267093,
    5275419,
    5284379,
    5268419,
    5280715,
    5267049,
    5251169,
    5260810,
    5255468,
    5277719,
    5284610,
    5264719,
    5261124,
    5244617,
    5239629,
    5254427,
    5245882,
    5283262,
    5276930,
    5275615,
    5266223,
    5243217,
    5256354,
    5258079,
    5269222,
    5292919,
    5272100,
    5281156,
    5275826,
    5251311,
    5265013,
    5257505,
    5288815,
    5297260,
    5289599,
    5284794,
    5265144,
    5268265,
    5277739,
    5266603,
    5290898,
    5286198,
    5293574,
    5305963,
    5281777,
    5276104,
    5282831,
    5287920,
    5303555,
    5299910,
    5300920,
    5298341,
    5276745,
    5289795,
    5301163,
    5297248,
    5315727,
    5307382,
    5311333,
    5293688,
    5279787,
    5293838,
    5288638,
    5301815,
    5308754,
    5302345,
    5311493,
    5279990,
    5284299,
    5287118,
    5288796,
    5307995,
    5294378,
    5291585,
    5294853,
    5278534,
    5294321,
    5278127,
    5280293,
    5305893,
    5301494,
    5311193,
    5288408,
    5278588,
    5297050,
    5307654,
    5323244,
    5321654,
    5312067,
    5324132,
    5302071,
    5305893,
    5298579,
    5285368,
    5312174,
    5322472,
    5310535,
    5304217,
    5289631,
    5294072,
    5306007,
    5312843,
    5336176,
    5319968,
    5321419,
    5305648,
    5287286,
    5298287,
    5292636,
    5305975,
    5321453,
    5303085,
    5305757,
    5291575,
    5277301,
    5292481,
    5279791,
    5318064,
    5312612,
    5302925,
    5299209,
    5276622,
    5286308,
    5288473,
    5285236,
    5309120,
    5295316,
    5313477,
    5308684,
    5276661,
    5282055,
    5280874,
    5314678,
    5324159,
    5312168,
    5296997,
    5279856,
    5274031,
    5285866,
    5276474,
    5305837,
    5302199,
    5305096,
    5314046,
    5279167,
    5272739,
    5285501,
    5296155,
    5309032,
    5297957,
    5288825,
    5288997,
    5273700,
    5291046,
    5282039,
    5289182,
    5304967,
    5293063,
    5297780,
    5279621,
    5264908,
    5284415,
    5287713,
    5300586,
    5312296,
    5300744,
    5307868,
    5273968,
    5278128,
    5283351,
    5286318,
    5311514,
    5304941,
    5299939,
    5304696,
    5277796,
    5295381,
    5284607,
    5288300,
    5319455,
    5305174,
    5303777,
    5276427,
    5267745,
    5287753,
    5298322,
    5312271,
    5310244,
    5298829,
    5308169,
    5281499,
    5286037,
    5281175,
    5272722,
    5305643,
    5313174,
    5299739,
    5291158,
    5278250,
    5281793,
    5284734,
    5290802,
    5306824,
    5294732,
    5307352,
    5297105,
    5275076,
    5284147,
    5279470,
    5296721,
    5317977,
    5299952,
    5305385,
    5292678,
    5277450,
    5284969,
    5274477,
    5312174,
    5303680,
    5295050,
    5286715,
    5259474,
    5270528,
    5277672,
    5279770,
    5304125,
    5286416,
    5297257,
    5294241,
    5265901,
    5274943,
    5264775,
    5288941,
    5300032,
    5286431,
    5280894,
    5266251,
    5260127,
    5271156,
    5257067,
    5279956,
    5274653,
    5277840,
    5286691,
    5244813,
    5252290,
    5261449,
    5262320,
    5277646,
    5273872,
    5268147,
    5262051,
    5233860,
    5248827,
    5241295,
    5258327,
    5277729,
    5262760,
    5267371,
    5253215,
    5233297,
    5249074,
    5236337,
    5244073,
    5256317,
    5246280,
    5253414,
    5219628,
    5220628,
    5234100,
    5238989,
    5260911,
    5245200,
    5235209,
    5237415,
    5212898,
    5225725,
    5209366,
    5208916,
    5240759,
    5237272,
    5245616,
    5221428,
    5206481,
    5218272,
    5222639,
    5232516,
    5230817,
    5217358,
    5224490,
    5199246,
    5201096,
    5198189,
    5187446,
    5222248,
    5236793,
    5220288,
    5210509,
    5192144,
    5184954,
    5195342,
    5201575,
    5228513,
    5212550,
    5212466,
    5194348,
    5169386,
    5176125,
    5167420,
    5166342,
    5184270,
    5166624,
    5180239,
    5171337,
    5153070,
    5157570,
    5145566,
    5177915,
    5174475,
    5167073,
    5169253,
    5144686,
    5153871,
    5158749,
    5147490,
    5167544,
    5160516,
    5174376,
    5170871,
    5135540,
    5136038,
    5130528,
    5160193,
    5174322,
    5165107,
    5158685,
    5148370,
    5141430,
    5153765,
    5141250,
    5165271,
    5166869,
    5176276,
    5184248,
    5154563,
    5147033,
    5164945,
    5172176,
    5186922,
    5183607,
    5174892,
    5177010,
    5156737,
    5168646,
    5155597,
    5158842,
    5182759,
    5176050,
    5182331,
    5174728,
    5151409,
    5168448,
    5157200,
    5164572,
    5180779,
    5170717,
    5179541,
    5148474,
    5149066,
    5158429,
    5161022,
    5188931,
    5182680,
    5179590,
    5176229,
    5149042,
    5161229,
    5151859,
    5155460,
    5190244,
    5176937,
    5180838,
    5149248,
    5136973,
    5153438,
    5159896,
    5168985,
    5173751,
    5162085,
    5176021,
    5155572,
    5158808,
    5160750,
    5153580,
    5189343,
    5195430,
    5177409,
    5164951,
    5150266,
    5148096,
    5154329,
    5153755,
    5178563,
    5168498,
    5178123,
    5165463,
    5143516,
    5153795,
    5149230,
    5165270,
    5187993,
    5165713,
    5170762,
    5160780,
    5141371,
    5152297,
    5149241,
    5190866,
    5185717,
    5179336,
    5170825,
    5139803,
    5147465,
    5157659,
    5159735,
    5184853,
    5171475,
    5179811,
    5180341,
    5151822,
    5159823,
    5152191,
    5175633,
    5189464,
    5179148,
    5174286,
    5169524,
    5152168,
    5151894,
    5161296,
    5172532,
    5170547,
    5165732,
    5176682,
    5146057,
    5140489,
    5153608,
    5155377,
    5172449,
    5174253,
    5165319,
    5161622,
    5128147,
    5140342,
    5136121,
    5158891,
    5182315,
    5174858,
    5179219,
    5171793,
    5152010,
    5169403,
    5154329,
    5158462,
    5176271,
    5175726,
    5189852,
    5166884,
    5165244,
    5181280,
    5175928,
    5195287,
    5183850,
    5170915,
    5183701,
    5171072,
    5171772,
    5162967,
    5156269,
    5180233,
    5184585,
    5184725,
    5181521,
    5164027,
    5168620,
    5176525,
    5172587,
    5190934,
    5179275,
    5174381,
    5159662,
    5145926,
    5159195,
    5152436,
    5164309,
    5180374,
    5154259,
    5159718,
    5150215,
    5125636,
    5139411,
    5138173,
    5154832,
    5174865,
    5157356,
    5148034,
    5124359,
    5138939,
    5142303,
    5137787,
    5161363,
    5146532,
    5156038,
    5156678,
    5126148,
    5128842,
    5127188,
    5159390,
    5163702,
    5149542,
    5155332,
    5134839,
    5138195,
    5153153,
    5139779,
    5163618,
    5164773,
    5167875,
    5171398,
    5136335,
    5135011,
    5139664,
    5158443,
    5173954,
    5160994,
    5146793,
    5144074,
    5125666,
    5139804,
    5132279,
    5150334,
    5162111,
    5161726,
    5169220,
    5144121,
    5130363,
    5151803,
    5150924,
    5160769,
    5162225,
    5140576,
    5145925,
    5116593,
    5122514,
    5122316,
    5127611,
    5151113,
    5143870,
    5149153,
    5154235,
    5131697,
    5153139,
    5144376,
    5149549,
    5192323,
    5185272,
    5182074,
    5153290,
    5150432,
    5163971,
    5164232,
    5194542,
    5194521,
    5184911,
    5200270,
    5170644,
    5173098,
    5163691,
    5163467,
    5200483,
    5195630,
    5192767,
    5164076,
    5149327,
    5162833,
    5171222,
    5180340,
    5198682,
    5186443,
    5199918,
    5177497,
    5162743,
    5157239,
    5150137,
    5177569,
    5190973,
    5177503,
    5180548,
    5164535,
    5156444,
    5157932,
    5151134,
    5179114,
    5172985,
    5179342,
    5171552,
    5148975,
    5161549,
    5156551,
    5164624,
    5187547,
    5163621,
    5172611,
    5164994,
    5138398,
    5139854,
    5133463,
    5165051,
    5165560,
    5160785,
    5167867,
    5142004,
    5155220,
    5164387,
    5156491,
    5172906,
    5161348,
    5162116,
    5161406,
    5144245,
    5156054,
    5152316,
    5163077,
    5178349,
    5170056,
    5173482,
    5165835,
    5155703,
    5170419,
    5158559,
    5174072,
    5175484,
    5170538,
    5179215,
    5149817,
    5142917,
    5155322,
    5166599,
    5193517,
    5217289,
    5219292,
    5209761,
    5161961,
    5167756,
    5158718,
    5190098,
    5232051,
    5253598,
    5261913,
    5260204,
    5218773,
    5232535,
    5210152,
    5218579,
    5252743,
    5260279,
    5262640,
    5222022,
    5221707,
    5237193,
    5258388,
    5291163,
    5288422,
    5275205,
    5275680,
    5229928,
    5222193,
    5190786,
    5187469,
    5218694,
    5230309,
    5246702,
    5245802,
    5236007,
    5262924,
    5263064,
    5264515,
    5260308,
    5239095,
    5230637,
    5199618,
    5185257,
    5179745,
    5173413,
    5177253,
    5207693,
    5198929,
    5204964,
    5190681,
    5194904,
    5218510,
    5218192,
    5249618,
    5241086,
    5234117,
    5227472,
    5210650,
    5227473,
    5221679,
    5221927,
    5239754,
    5220913,
    5239140,
    5236470,
    5214798,
    5225297,
    5223993,
    5260246,
    5259255,
    5248143,
    5245110,
    5219358,
    5227244,
    5233627,
    5217923,
    5236917,
    5230480,
    5240272,
    5245394,
    5212587,
    5217665,
    5220858,
    5251734,
    5266426,
    5255795,
    5256158,
    5252322,
    5249591,
    5267055,
    5261008,
    5278125,
    5289953,
    5288243,
    5295930,
    5268413,
    5257455,
    5272282,
    5271212,
    5286497,
    5286123,
    5271085,
    5280974,
    5252892,
    5258294,
    5254380,
    5256118,
    5279597,
    5273321,
    5281587,
    5291471,
    5278295,
    5305744,
    5303112,
    5309864,
    5341526,
    5338855,
    5341258,
    5313014,
    5310220,
    5316105,
    5302236,
    5322074,
    5299890,
    5290889,
    5297858,
    5269443,
    5277333,
    5265537,
    5256811,
    5281331,
    5265813,
    5261435,
    5235219,
    5222642,
    5242896,
    5257954,
    5266897,
    5283551,
    5269330,
    5282086,
    5282517,
    5275894,
    5295068,
    5290583,
    5314992,
    5324622,
    5302282,
    5300839,
    5287713,
    5279243,
    5297730,
    5284117,
    5307431,
    5290945,
    5270301,
    5260854,
    5237370,
    5254307,
    5255369,
    5260913,
    5283489,
    5261091,
    5276579,
    5278935,
    5254077,
    5260434,
    5263129,
    5291683,
    5294917,
    5285176,
    5288966,
    5264020,
    5263679,
    5271172,
    5248638,
    5249987,
    5246434,
    5254791,
    5267365,
    5258139,
    5262759,
    5254986,
    5243232,
    5246645,
    5210518,
    5196255,
    5188763,
    5210012,
    5223011,
    5256617,
    5282975,
    5306166,
    5314413,
    5316207,
    5304163,
    5298577,
    5258212,
    5261702,
    5230123,
    5198182,
    5208408,
    5182613,
    5191538,
    5216372,
    5246800,
    5267975,
    5257129,
    5252945,
    5240016,
    5203067,
    5224330,
    5199425,
    5196922,
    5213333,
    5216565,
    5236739,
    5233334,
    5229866,
    5251827,
    5251513,
    5262470,
    5230735,
    5213162,
    5206985,
    5175913,
    5183514,
    5177282,
    5170757,
    5207918,
    5227006,
    5235482,
    5233466,
    5218697,
    5238022,
    5220044,
    5220341,
    5223313,
    5200560,
    5195183,
    5180827,
    5167941,
    5184286,
    5179587,
    5211515,
    5232481,
    5221932,
    5237536,
    5218484,
    5211856,
    5219288,
    5198521,
    5224486,
    5216800,
    5205978,
    5204554,
    5189539,
    5220786,
    5218578,
    5225922,
    5244400,
    5219412,
    5231582,
    5223372,
    5186919,
    5186098,
    5171446,
    5197161,
    5203070,
    5192949,
    5205820,
    5192514,
    5220290,
    5228875,
    5219228,
    5237873,
    5223306,
    5228559,
    5235079,
    5200682,
    5200624,
    5200331,
    5220806,
    5234020,
    5214232,
    5214946,
    5209815,
    5209211,
    5228689,
    5218153,
    5221374,
    5228253,
    5208947,
    5217491,
    5187365,
    5179603,
    5195578,
    5193370,
    5209810,
    5214613,
    5197050,
    5209290,
    5191541,
    5201086,
    5215610,
    5220384,
    5239833,
    5221503,
    5227730,
    5234782,
    5218319,
    5248987,
    5234225,
    5233364,
    5262689,
    5241715,
    5243679,
    5201516,
    5189604,
    5195767,
    5179789,
    5198241,
    5185183,
    5178349,
    5210214,
    5203897,
    5222512,
    5224286,
    5213057,
    5247735,
    5244921,
    5238856,
    5225770,
    5215463,
    5237409,
    5238783,
    5240127,
    5246810,
    5231699,
    5247031,
    5249248,
    5228336,
    5237101,
    5222817,
    5216976,
    5204077,
    5183232,
    5183925,
    5170646,
    5167374,
    5174863,
    5161949,
    5193193,
    5190513,
    5202905,
    5220305,
    5208793,
    5232420,
    5228360,
    5229179,
    5239802,
    5214158,
    5225485,
    5206887,
    5190502,
    5195478,
    5182199,
    5207632,
    5210505,
    5203317,
    5202644,
    5180531,
    5178309,
    5179020,
    5157505,
    5169061,
    5160235,
    5173367,
    5190890,
    5188190,
    5214936,
    5230825,
    5257382,
    5269274,
    5273139,
    5286297,
    5288933,
    5292110,
    5305913,
    5286251,
    5270704,
    5271790,
    5236967,
    5240729,
    5206375,
    5204854,
    5219071,
    5225461,
    5233991,
    5220061,
    5202617,
    5200855,
    5181427,
    5194996,
    5194450,
    5210077,
    5224705,
    5222662,
    5228432,
    5210220,
    5199568,
    5216177,
    5203252,
    5213095,
    5218707,
    5210565,
    5220923,
    5183855,
    5184353,
    5181253,
    5180823,
    5198818,
    5184245,
    5184557,
    5189124,
    5162323,
    5182770,
    5170791,
    5165328,
    5195382,
    5205683,
    5220562,
    5207789,
    5206340,
    5219300,
    5204784,
    5215273,
    5181198,
    5169150,
    5166390,
    5140605,
    5151380,
    5148253,
    5140589,
    5171623,
    5184866,
    5198502,
    5205675,
    5199966,
    5229756,
    5236935,
    5239589,
    5234759,
    5218015,
    5217598,
    5205810,
    5201286,
    5206300,
    5202830,
    5235511,
    5254297,
    5257074,
    5262092,
    5247531,
    5247837,
    5261102,
    5252263,
    5289451,
    5291718,
    5322388,
    5343793,
    5332767,
    5352767,
    5338958,
    5328882,
    5335679,
    5318984,
    5342285,
    5341689,
    5322987,
    5318016,
    5297842,
    5309657,
    5304881,
    5293475,
    5296459,
    5287486,
    5322375,
    5323039,
    5303919,
    5280079,
    5236895,
    5231687,
    5234390,
    5209382,
    5206260,
    5196271,
    5195103,
    5205725,
    5187939,
    5200869,
    5208259,
    5240124,
    5266960,
    5295127,
    5322157,
    5323737,
    5318083,
    5321125,
    5294903,
    5299037,
    5304763,
    5313623,
    5326094,
    5315243,
    5304033,
    5303594,
    5277462,
    5273849,
    5235988,
    5209129,
    5194161,
    5170460,
    5181440,
    5155686,
    5172328,
    5205567,
    5232492,
    5249107,
    5260657,
    5259082,
    5251243,
    5207169,
    5208435,
    5172360,
    5152723,
    5156166,
    5128027,
    5137380,
    5160827,
    5212344,
    5273743,
    5328029,
    5331978,
    5363258,
    5343009,
    5348557,
    5334152,
    5340476,
    5374944,
    5375686,
    5396221,
    5371787,
    5357306,
    5351035,
    5339502,
    5307344,
    5299187,
    5293622,
    5296377,
    5249190,
    5230473,
    5169699,
    5152438,
    5131123,
    5093207,
    5104699,
    5107040,
    5112889,
    5184181,
    5251607,
    5275313,
    5302136,
    5293330,
    5310080,
    5281658,
    5256121,
    5216283,
    5197409,
    5185473,
    5180818,
    5181166,
    5195323,
    5198051,
    5238507,
    5280937,
    5281800,
    5312227,
    5296232,
    5296343,
    5280283,
    5241403,
    5226721,
    5217360,
    5208019,
    5237259,
    5246051,
    5291758,
    5280449,
    5279608,
    5261115,
    5231831,
    5217975,
    5208280,
    5191046,
    5217828,
    5222201,
    5277293,
    5286688,
    5312051,
    5340723,
    5329869,
    5344376,
    5341143,
    5307830,
    5302359,
    5284048,
    5296484,
    5291674,
    5287504,
    5293210,
    5265487,
    5244404,
    5247524,
    5222282,
    5241249,
    5241506,
    5258585,
    5270084,
    5265935,
    5298231,
    5318377,
    5347760,
    5362539,
    5360036,
    5367131,
    5361484,
    5352708,
    5371723,
    5353944,
    5344147,
    5354998,
    5334016,
    5342691,
    5331958,
    5332060,
    5337660,
    5329187,
    5345416,
    5346495,
    5356272,
    5382832,
    5374335,
    5383253,
    5379573,
    5376609,
    5393073,
    5392314,
    5394751,
    5396551,
    5392282,
    5408161,
    5391688,
    5395778,
    5419234,
    5426303,
    5456505,
    5447516,
    5440741,
    5440389,
    5400195,
    5401574,
    5362627,
    5352405,
    5347278,
    5313103,
    5323770,
    5291642,
    5281299,
    5296855,
    5304692,
    5318088,
    5326875,
    5319149,
    5322748,
    5310163,
    5304303,
    5282821,
    5271638,
    5283931,
    5301501,
    5313541,
    5337352,
    5319151,
    5344746,
    5345580,
    5342361,
    5346364,
    5331017,
    5328904,
    5313607,
    5293892,
    5288764,
    5277579,
    5274843,
    5281471,
    5252708,
    5249013,
    5238771,
    5229001,
    5259796,
    5259408,
    5314986,
    5319281,
    5357239,
    5400470,
    5382846,
    5412273,
    5420049,
    5415915,
    5407517,
    5376393,
    5351802,
    5344691,
    5311110,
    5317379,
    5302972,
    5295168,
    5283745,
    5209987,
    5139197,
    5118676,
    5105840,
    5124522,
    5151977,
    5226356,
    5245909,
    5288451,
    5289955,
    5251282,
    5236849,
    5250100,
    5268108,
    5285701,
    5285523,
    5304756,
    5329668,
    5362368,
    5382654,
    5382998,
    5361499,
    5357253,
    5320943,
    5335580,
    5317035,
    5284748,
    5275240,
    5220406,
    5226478,
    5214581,
    5241428,
    5277273,
    5299392,
    5306549,
    5321374,
    5300752,
    5299705,
    5254488,
    5254580,
    5255369,
    5253820,
    5261146,
    5227836,
    5231105,
    5259373,
    5304020,
    5332417,
    5322658,
    5317917,
    5306189,
    5252141,
    5237926,
    5172681,
    5143257,
    5089753,
    5023733,
    5019482,
    4993762,
    5001406,
    5070590,
    5170424,
    5217808,
    5283115,
    5269994,
    5290989,
    5269421,
    5249832,
    5220467,
    5210357,
    5210362,
    5215751,
    5239051,
    5298415,
    5295426,
    5339288,
    5344982,
    5315146,
    5306561,
    5297689,
    5278675,
    5268703,
    5238420,
    5262336,
    5257912,
    5279492,
    5320448,
    5296723,
    5312062,
    5300496,
    5264306,
    5256788,
    5250622,
    5267322,
    5260895,
    5242089,
    5230813,
    5208295,
    5206502,
    5198787,
    5161751,
    5160442,
    5165003,
    5215445,
    5237455,
    5276132,
    5308926,
    5275648,
    5239978,
    5229066,
    5161903,
    5132434,
    5126795,
    5140598,
    5158429,
    5165360,
    5191252,
    5198892,
    5216314,
    5229050,
    5212589,
    5218235,
    5240171,
    5240846,
    5257184,
    5266821,
    5274373,
    5295883,
    5286590,
    5293675,
    5296791,
    5284009,
    5301663,
    5269956,
    5274113,
    5269217,
    5245098,
    5254091,
    5214049,
    5203314,
    5174015,
    5119973,
    5111037,
    5076331,
    5073979,
    5080022,
    5080331,
    5109716,
    5099847,
    5090957,
    5087901,
    5062855,
    5073638,
    5066964,
    5072987,
    5116344,
    5136196,
    5166203,
    5192109,
    5193457,
    5225842,
    5191526,
    5180699,
    5128740,
    5104772,
    5086191,
    5066298,
    5075745,
    5096386,
    5102129,
    5155589,
    5164596,
    5162911,
    5163148,
    5151424,
    5169140,
    5170241,
    5160658,
    5153351,
    5140869,
    5139547,
    5150706,
    5163577,
    5211405,
    5213201,
    5259084,
    5257385,
    5210383,
    5154326,
    5123924,
    5049397,
    4996409,
    4964565,
    4940739,
    4928239,
    4893134,
    4886025,
    4857541,
    4868972,
    4858421,
    4835552,
    4850810,
    4845368,
    4878540,
    4891426,
    4913143,
    4978251,
    4993120,
    5058189,
    5052162,
    5018732,
    5023366,
    4995148,
    4990767,
    5001823,
    4991701,
    5002731,
    4981168,
    4963984,
    4963608,
    4908115,
    4860552,
    4833169,
    4796975,
    4807596,
    4777139,
    4786724,
    4787367,
    4775683,
    4777971,
    4736121,
    4705907,
    4697604,
    4694997,
    4710492,
    4724112,
    4783316,
    4813489,
    4872701,
    4887306,
    4898252,
    4878343,
    4864740,
    4826724,
    4836213,
    4809331,
    4809548,
    4811990,
    4800325,
    4818936,
    4820008,
    4831080,
    4851389,
    4842896,
    4851666,
    4833779,
    4797565,
    4801314,
    4765412,
    4771676,
    4768614,
    4786605,
    4826221,
    4832578,
    4826909,
    4831655,
    4784584,
    4785415,
    4736010,
    4731923,
    4717273,
    4683213,
    4692800,
    4666327,
    4668591,
    4689677,
    4690632,
    4718168,
    4735445,
    4738478,
    4798568,
    4836388,
    4863999,
    4881943,
    4878992,
    4910201,
    4892450,
    4893548,
    4868450,
    4854523,
    4857789,
    4842538,
    4830854,
    4812482,
    4810459,
    4840046,
    4870563,
    4888600,
    4906734,
    4886561,
    4887707,
    4839716,
    4807684,
    4756692,
    4732394,
    4687691,
    4656844,
    4660548,
    4678119,
    4677327,
    4733026,
    4808891,
    4824418,
    4884875,
    4873122,
    4885371,
    4868572,
    4842330,
    4838075,
    4831560,
    4831348,
    4853818,
    4852361,
    4893057,
    4886630,
    4889908,
    4899044,
    4881941,
    4893968,
    4888711,
    4865911,
    4843767,
    4815546,
    4814846,
    4817214,
    4815511,
    4851861,
    4847608,
    4884718,
    4884694,
    4871941,
    4853791,
    4850447,
    4863103,
    4870378,
    4863052,
    4874387,
    4871244,
    4888137,
    4903063,
    4906153,
    4941390,
    4959549,
    4965829,
    4966451,
    4920645,
    4886608,
    4858352,
    4821977,
    4826343,
    4794918,
    4795628,
    4810456,
    4816237,
    4832002,
    4832258,
    4815332,
    4814815,
    4771541,
    4775238,
    4746724,
    4738670,
    4776999,
    4822464,
    4856668,
    4956292,
    5046880,
    5099824,
    5116575,
    5107534,
    5083840,
    4992306,
    4951169,
    4845046,
    4834744,
    4808809,
    4811822,
    4839333,
    4841981,
    4824327,
    4817591,
    4769562,
    4765064,
    4748324,
    4748984,
    4788299,
    4803750,
    4806287,
    4805106,
    4796611,
    4817984,
    4816285,
    4819909,
    4839288,
    4876750,
    4910911,
    4996891,
    5021429,
    5044029,
    5022455,
    5000780,
    4943297,
    4909745,
    4862092,
    4839840,
    4812545,
    4796012,
    4785430,
    4791775,
    4784252,
    4782252,
    4773948,
    4760599,
    4781982,
    4779741,
    4795617,
    4836553,
    4831427,
    4880910,
    4885299,
    4894079,
    4908890,
    4899007,
    4919361,
    4909509,
    4879674,
    4872320,
    4867246,
    4911198,
    4920345,
    4924736,
    4934078,
    4915920,
    4892556,
    4883115,
    4820134,
    4770681,
    4751594,
    4734302,
    4744227,
    4739840,
    4762651,
    4764936,
    4781951,
    4803726,
    4821102,
    4865633,
    4875895,
    4892860,
    4896096,
    4872021,
    4869143,
    4872591,
    4874508,
    4890293,
    4896922,
    4900772,
    4929178,
    4920896,
    4927268,
    4905232,
    4877977,
    4868002,
    4826500,
    4829811,
    4795521,
    4763975,
    4784727,
    4777145,
    4789187,
    4823858,
    4850275,
    4874142,
    4871290,
    4868868,
    4874602,
    4847644,
    4865452,
    4833841,
    4824260,
    4836398,
    4829349,
    4845622,
    4850083,
    4850391,
    4892870,
    4912046,
    4936686,
    4940046,
    4925966,
    4932275,
    4891809,
    4873821,
    4836876,
    4855008,
    4878809,
    4897881,
    4890994,
    4917377,
    4909648,
    4907917,
    4913112,
    4902064,
    4917462,
    4933292,
    4921663,
    4939748,
    4935057,
    4933316,
    4940012,
    4918657,
    4906192,
    4891336,
    4838907,
    4798967,
    4763526,
    4741940,
    4741124,
    4729928,
    4702253,
    4700132,
    4690892,
    4702317,
    4697417,
    4730328,
    4754674,
    4783454,
    4804423,
    4825779,
    4855130,
    4890273,
    4897622,
    4902597,
    4909840,
    4901999,
    4920217,
    4899673,
    4896108,
    4895218,
    4869463,
    4883683,
    4864465,
    4853518,
    4847775,
    4807935,
    4822986,
    4811295,
    4813854,
    4835779,
    4848012,
    4858910,
    4845858,
    4834552,
    4826145,
    4806191,
    4809032,
    4781740,
    4770493,
    4755287,
    4732280,
    4730796,
    4725031,
    4737229,
    4769183,
    4788047,
    4800842,
    4792563,
    4792413,
    4794430,
    4798775,
    4822053,
    4828457,
    4826335,
    4815719,
    4793553,
    4808291,
    4810454,
    4808881,
    4827820,
    4833157,
    4834606,
    4826815,
    4828125,
    4824160,
    4815408,
    4809137,
    4773568,
    4770750,
    4723821,
    4687093,
    4694810,
    4701258,
    4720916,
    4768987,
    4816244,
    4837185,
    4859909,
    4866758,
    4873240,
    4894914,
    4905167,
    4939268,
    4947989,
    4954958,
    4964057,
    4933852,
    4890029,
    4870320,
    4796626,
    4760454,
    4749597,
    4759319,
    4758985,
    4764554,
    4765457,
    4754976,
    4750504,
    4750971,
    4748241,
    4777727,
    4801517,
    4854749,
    4866315,
    4923171,
    4958752,
    4966187,
    4959264,
    4943738,
    4930054,
    4891742,
    4888425,
    4858706,
    4857493,
    4849663,
    4835327,
    4823749,
    4790249,
    4782362,
    4745016,
    4720447,
    4723801,
    4735892,
    4751060,
    4772783,
    4806727,
    4796765,
    4817857,
    4813571,
    4811122,
    4822768,
    4862115,
    4905506,
    4921625,
    4996602,
    5050467,
    5053638,
    5024090,
    4999659,
    4919627,
    4830551,
    4824096,
    4778407,
    4785687,
    4797015,
    4826365,
    4820195,
    4807726,
    4797620,
    4740883,
    4694589,
    4668583,
    4665652,
    4671421,
    4714482,
    4788641,
    4829618,
    4878737,
    4873376,
    4864985,
    4829273,
    4828949,
    4824258,
    4839805,
    4879781,
    4949036,
    4974730,
    4999314,
    4988425,
    4937772,
    4867965,
    4832042,
    4801082,
    4797680,
    4807942,
    4835579,
    4864492,
    4893178,
    4889623,
    4890853,
    4844946,
    4834351,
    4807095,
    4811654,
    4808916,
    4830185,
    4820222,
    4829326,
    4826679,
    4816032,
    4812475,
    4787374,
    4766330,
    4763603,
    4791554,
    4827520,
    4850655,
    4868761,
    4875302,
    4872351,
    4856314,
    4838658,
    4828328,
    4831375,
    4829413,
    4868617,
    4880808,
    4929573,
    4926551,
    4965694,
    4943859,
    4909434,
    4819690,
    4813509,
    4757993,
    4755286,
    4773392,
    4809342,
    4819338,
    4841894,
    4847592,
    4826279,
    4783349,
    4758388,
    4705997,
    4655871,
    4680593,
    4694225,
    4719988,
    4777304,
    4832135,
    4818932,
    4813151,
    4798969,
    4740032,
    4696068,
    4688455,
    4702062,
    4717109,
    4777739,
    4836329,
    4864271,
    4896138,
    4895286,
    4861514,
    4824409,
    4809961,
    4821748,
    4826456,
    4853624,
    4882566,
    4911171,
    4938133,
    4939440,
    4965397,
    4952307,
    4911377,
    4888450,
    4869413,
    4870916,
    4893321,
    4875819,
    4861429,
    4834456,
    4773033,
    4658619,
    4613998,
    4516055,
    4523599,
    4495218,
    4547678,
    4591002,
    4698321,
    4709256,
    4797471,
    4823094,
    4816662,
    4774440,
    4765925,
    4746125,
    4780102,
    4825205,
    4920417,
    4939762,
    5024235,
    5069557,
    5047882,
    5022544,
    4999060,
    4952438,
    4867789,
    4838725,
    4768270,
    4758632,
    4680983,
    4577081,
    4494970,
    4348351,
    4308621,
    4308621,
    4308621,
    4308621,
    4308621,
    4308621,
    4336992,
    4611151,
    4755533,
    5059471,
    5128840,
    5370200,
    5582963,
    5643555,
    5721840,
    5724300,
    5698156,
    5615128,
    5545139,
    5388445,
    5346742,
    5231688,
    4873046,
    4768842,
    4566650,
    4532849,
    4418013,
    4391057,
    4453958,
    4532957,
    4559685,
    4633930,
    4698609,
    4711012,
    4771693,
    4785709,
    4878957,
    4962626,
    4994281,
    5017682,
    5005968,
    4936217,
    4786874,
    4686029,
    4536048,
    4508614,
    4444269,
    4488853,
    4599702,
    4788625,
    4862506,
    5075728,
    5182008,
    5150756,
    5132462,
    5104949,
    5053321,
    4979658,
    4946385,
    4879116,
    4866828,
    4830053,
    4765739,
    4719055,
    4648108,
    4638541,
    4587267,
    4591593,
    4607750,
    4642977,
    4650783,
    4685552,
    4698004,
    4692007,
    4674539,
    4678146,
    4658602,
    4719129,
    4792087,
    4959817,
    4990812,
    5166201,
    5273066,
    5299559,
    5295183,
    5286152,
    5187692,
    5086319,
    5011607,
    4937886,
    4914676,
    4842975,
    4783362,
    4757146,
    4694750,
    4673463,
    4602511,
    4530936,
    4528379,
    4522732,
    4543899,
    4585079,
    4708574,
    4759754,
    4872203,
    4880663,
    4951831,
    4990281,
    5022525,
    5046243,
    5068852,
    5108484,
    5137064,
    5107487,
    5077318,
    5051288,
    4963125,
    4853777,
    4809857,
    4726506,
    4715642,
    4695433,
    4692450,
    4709437,
    4707108,
    4694581,
    4629976,
    4571005,
    4544769,
    4552105,
    4567381,
    4669751,
    4841737,
    4904308,
    5030045,
    5058729,
    5155013,
    5196886,
    5174867,
    5151330,
    5154451,
    5090266,
    5040591,
    4998303,
    4947055,
    4917110,
    4819633,
    4710045,
    4690783,
    4617949,
    4618508,
    4626703,
    4622666,
    4652166,
    4690932,
    4690929,
    4699743,
    4710886,
    4711338,
    4735923,
    4728069,
    4752714,
    4814779,
    4849792,
    4938793,
    4971753,
    5064096,
    5078473,
    5051674,
    5001834,
    5000062,
    4937437,
    4897329,
    4887193,
    4895557,
    4900816,
    4914601,
    4953213,
    4993629,
    5073512,
    5091983,
    5170709,
    5187746,
    5153634,
    5088755,
    5070476,
    5038048,
    5040707,
    5045530,
    5032818,
    5026443,
    4982830,
    4913226,
    4879941,
    4849959,
    4853030,
    4862789,
    4903738,
    4918335,
    4946957,
    4939661,
    4926833,
    4857734,
    4799300,
    4784940,
    4720593,
    4613400,
    4587285,
    4520345,
    4517705,
    4502041,
    4487842,
    4491385,
    4502124,
    4543324,
    4595921,
    4769210,
    4869099,
    5080515,
    5140803,
    5354297,
    5556766,
    5589115,
    5660304,
    5641365,
    5577647,
    5389045,
    5264507,
    5039828,
    4986408,
    4817941,
    4695198,
    4673668,
    4658787,
    4668562,
    4727823,
    4806986,
    4863785,
    4931909,
    4939579,
    4953598,
    4905910,
    4867506,
    4786188,
    4781942,
    4752356,
    4799634,
    4805857,
    4834440,
    4839367,
    4830502,
    4825662,
    4838046,
    4901809,
    4933403,
    4997607,
    5023791,
    4998724,
    4954880,
    4930943,
    4835712,
    4750428,
    4701113,
    4660862,
    4676561,
    4702939,
    4794908,
    4808305,
    4860831,
    4864927,
    4882300,
    4912011,
    4920984,
    4943449,
    4928987,
    4896317,
    4878679,
    4816263,
    4798169,
    4794223,
    4830180,
    4968259,
    5086993,
    5323163,
    5371299,
    5616470,
    5766070,
    5753719,
    5720970,
    5688393,
    5595533,
    5408933,
    5277261,
    4996315,
    4910724,
    4607878,
    4329230,
    4266182,
    4266182,
    4266182,
    4266182,
    4306676,
    4391013,
    4552889,
    4602868,
    4833872,
    5080010,
    5159620,
    5263932,
    5245187,
    5209010,
    5026088,
    4905902,
    4675417,
    4621050,
    4468900,
    4406204,
    4439591,
    4492208,
    4500021,
    4593977,
    4684462,
    4738207,
    4861113,
    4882922,
    5021310,
    5114384,
    5114499,
    5133702,
    5113220,
    5083737,
    5047823,
    5035060,
    5034748,
    5022905,
    5026807,
    5021109,
    5005226,
    4994916,
    4982055,
    4966525,
    4981534,
    4998078,
    5049262,
    5047860,
    5053379,
    5039686,
    5009732,
    4976032,
    4901218,
    4828251,
    4784927,
    4741101,
    4738520,
    4701216,
    4722791,
    4724631,
    4749768,
    4759206,
    4728805,
    4712739,
    4704331,
    4707363,
    4724654,
    4743517,
    4795605,
    4827037,
    4876005,
    4900437,
    4932444,
    4965629,
    4989362,
    5027757,
    5063923,
    5121442,
    5184475,
    5184838,
    5153179,
    5138582,
    5041529,
    4958422,
    4945820,
    4888366,
    4889112,
    4865409,
    4850219,
    4860658,
    4817465,
    4820911,
    4819001,
    4821104,
    4840176,
    4843447,
    4866489,
    4922480,
    4939281,
    4952922,
    4936025,
    4937026,
    4947223,
    4921196,
    4907717,
    4854501,
    4842358,
    4816536,
    4800599,
    4835613,
    4865719,
    4876724,
    4928960,
    4939804,
    4950608,
    4925713,
    4910170,
    4903235,
    4914561,
    4952781,
    4983888,
    4982147,
    5014672,
    5019224,
    5029919,
    5017805,
    5021726,
    5039826,
    5010008,
    4992600,
    4966900,
    4982374,
    5015278,
    5021647,
    5054549,
    5054910,
    5046194,
    5025492,
    4983880,
    5000596,
    4971507,
    4955621,
    4921891,
    4887259,
    4889073,
    4865121,
    4862644,
    4868742,
    4872818,
    4896823,
    4914093,
    4922898,
    4972124,
    4972437,
    4966729,
    4934491,
    4928185,
    4926552,
    4904678,
    4917182,
    4899527,
    4882988,
    4865998,
    4805563,
    4783751,
    4733683,
    4724713,
    4748551,
    4822301,
    4848204,
    4927006,
    4935251,
    4997265,
    5041922,
    5042819,
    5050489,
    5032722,
    5017936,
    4972936,
    4953520,
    4939051,
    4934288,
    4959127,
    4999042,
    5006726,
    5035097,
    5027980,
    5040363,
    5055516,
    5040427,
    5033556,
    5020141,
    4978933,
    4930027,
    4893918,
    4859853,
    4854045,
    4831256,
    4840369,
    4840032,
    4875353,
    4875176,
    4877703,
    4875873,
    4852237,
    4855055,
    4855178,
    4844608,
    4846418,
    4832761,
    4832872,
    4830241,
    4801080,
    4803503,
    4793170,
    4803852,
    4817884,
    4819156,
    4852304,
    4885659,
    4939563,
    4960811,
    4998989,
    5042024,
    5060103,
    5077248,
    5090546,
    5079982,
    5075228,
    5089667,
    5073845,
    5074968,
    5055907,
    5048768,
    5060855,
    5064091,
    5076962,
    5076133,
    5063743,
    5063117,
    5024631,
    5017017,
    4982531,
    4936226,
    4932628,
    4904108,
    4903450,
    4900961,
    4892867,
    4907189,
    4899283,
    4902716,
    4931221,
    4931775,
    4938972,
    4909034,
    4890444,
    4864971,
    4819428,
    4821708,
    4812045,
    4812515,
    4854324,
    4884801,
    4903133,
    4921231,
    4905774,
    4916861,
    4908669,
    4898700,
    4906801,
    4903601,
    4924149,
    4944346,
    4956987,
    4999170,
    4998361,
    5037826,
    5052463,
    5026206,
    5016898,
    4996318,
    4950565,
    4921769,
    4910669,
    4924995,
    4919908,
    4925261,
    4936045,
    4915271,
    4930629,
    4925347,
    4911915,
    4909230,
    4891850,
    4901864,
    4900419,
    4896407,
    4906850,
    4916077,
    4943212,
    4964138,
    4964617,
    4972607,
    4960452,
    4964108,
    4974015,
    4962421,
    4966243,
    4952806,
    4940296,
    4937387,
    4892920,
    4873440,
    4863557,
    4857959,
    4874539,
    4861633,
    4858108,
    4869521,
    4874200,
    4886515,
    4895807,
    4911619,
    4920601,
    4914809,
    4923895,
    4913912,
    4911487,
    4936289,
    4954237,
    4969333,
    5008452,
    5026713,
    5022411,
    4991352,
    4990773,
    4968402,
    4953091,
    4961951,
    4927056,
    4923177,
    4895064,
    4871308,
    4885559,
    4880854,
    4890417,
    4897982,
    4897524,
    4908639,
    4894529,
    4902958,
    4909093,
    4899389,
    4904237,
    4875646,
    4870938,
    4857429,
    4841563,
    4856456,
    4851602,
    4864152,
    4887533,
    4908786,
    4928417,
    4916633,
    4906521,
    4915119,
    4903358,
    4912559,
    4894307,
    4890119,
    4901316,
    4899162,
    4919761,
    4938147,
    4942204,
    4995740,
    5016206,
    5020850,
    5014140,
    4997282,
    4999152,
    4982210,
    4982369,
    4979704,
    4976972,
    5004257,
    5017228,
    5008262,
    5010714,
    4998704,
    5003678,
    5008240,
    4995419,
    4992211,
    4983712,
    4976809,
    4973903,
    4966126,
    4983108,
    4971149,
    4970515,
    4975600,
    4954621,
    4968974,
    4967825,
    4970734,
    4994299,
    4994254,
    5021635,
    5018234,
    5016649,
    5020782,
    5002979,
    5017888,
    5021242,
    5008480,
    5004887,
    4991250,
    4986164,
    4991148,
    4973612,
    4982765,
    4973383,
    4974121,
    4982314,
    4959262,
    4962621,
    4977798,
    4981580,
    4996673,
    4996788,
    4988194,
    4981578,
    4948965,
    4952151,
    4923588,
    4915349,
    4927449,
    4916906,
    4923761,
    4911354,
    4894885,
    4898428,
    4872672,
    4876665,
    4874111,
    4885964,
    4904508,
    4907944,
    4917238,
    4940947,
    4951456,
    4972893,
    4968095,
    4962962,
    4971877,
    4959652,
    4969931,
    4956141,
    4955557,
    4976594,
    4968289,
    4973400,
    4945258,
    4931837,
    4930780,
    4921363,
    4923581,
    4920820,
    4911703,
    4918999,
    4914603,
    4921970,
    4929388,
    4920325,
    4948418,
    4954430,
    4946639,
    4947719,
    4933067,
    4939613,
    4946704,
    4943863,
    4953527,
    4944820,
    4939157,
    4923310,
    4899428,
    4899014,
    4887758,
    4882124,
    4892877,
    4886513,
    4909200,
    4904895,
    4906207,
    4919410,
    4914789,
    4948536,
    4944846,
    4941251,
    4948472,
    4924953,
    4938047,
    4944029,
    4934467,
    4943762,
    4934968,
    4945609,
    4948616,
    4932784,
    4945098,
    4931058,
    4940286,
    4950569,
    4927629,
    4924951,
    4926633,
    4928264,
    4942196,
    4934115,
    4947767,
    4949637,
    4950745,
    4959014,
    4936706,
    4931890,
    4943654,
    4947122,
    4958201,
    4956407,
    4946194,
    4933443,
    4891145,
    4880630,
    4822887,
    4767215,
    4759882,
    4712866,
    4714424,
    4693806,
    4675403,
    4692819,
    4690570,
    4697364,
    4722379,
    4738405,
    4756230,
    4767714,
    4777963,
    4819492,
    4841038,
    4873128,
    4884414,
    4883436,
    4915129,
    4922315,
    4932338,
    4936825,
    4934511,
    4958734,
    4957990,
    4958544,
    4943944,
    4933233,
    4937236,
    4928511,
    4921625,
    4915341,
    4901507,
    4898703,
    4881097,
    4873510,
    4866964,
    4862562,
    4872901,
    4873211,
    4857130,
    4849245,
    4837301,
    4815485,
    4801962,
    4789840,
    4796143,
    4791868,
    4789487,
    4797751,
    4789398,
    4821111,
    4822880,
    4845813,
    4881746,
    4873565,
    4896921,
    4898789,
    4894074,
    4903633,
    4900128,
    4921654,
    4927239,
    4926194,
    4938670,
    4924790,
    4929842,
    4937967,
    4917137,
    4915107,
    4903717,
    4891154,
    4889535,
    4853980,
    4845959,
    4839335,
    4842417,
    4852768,
    4832193,
    4836178,
    4837749,
    4821266,
    4824166,
    4818339,
    4826998,
    4842109,
    4848800,
    4861946,
    4860239,
    4864758,
    4881277,
    4876724,
    4885151,
    4885507,
    4873278,
    4880366,
    4855424,
    4856676,
    4851162,
    4845267,
    4862795,
    4847594,
    4847523,
    4855993,
    4838946,
    4856451,
    4845913,
    4846508,
    4872255,
    4874778,
    4879288,
    4857447,
    4852345,
    4862980,
    4859967,
    4881942,
    4882753,
    4869591,
    4884351,
    4869135,
    4869578,
    4866753,
    4861178,
    4885101,
    4877752,
    4873572,
    4857085,
    4842431,
    4855588,
    4861489,
    4862666,
    4877309,
    4867130,
    4875058,
    4876392,
    4871764,
    4890446,
    4885453,
    4907151,
    4920658,
    4901171,
    4907110,
    4894350,
    4881106,
    4892362,
    4886605,
    4893926,
    4901806,
    4891580,
    4883314,
    4865539,
    4882642,
    4885603,
    4888704,
    4915088,
    4903202,
    4918936,
    4919021,
    4897244,
    4897522,
    4891598,
    4910727,
    4918083,
    4905003,
    4904228,
    4889965,
    4891491,
    4906306,
    4895023,
    4903402,
    4904660,
    4901391,
    4907286,
    4882132,
    4880520,
    4884344,
    4888825,
    4904417,
    4897710,
    4891326,
    4903695,
    4892305,
    4905268,
    4911187,
    4925479,
    4943972,
    4942932,
    4950686,
    4944290,
    4929379,
    4947490,
    4936620,
    4948531,
    4968185,
    4959153,
    4966874,
    4939040,
    4936389,
    4939637,
    4933050,
    4949427,
    4934992,
    4936127,
    4955000,
    4951331,
    4978206,
    4980841,
    4981961,
    5023330,
    5021227,
    5022442,
    4994140,
    4985028,
    4995983,
    4987169,
    5000161,
    4991886,
    4979930,
    4999235,
    4990482,
    4991701,
    4996281,
    4988715,
    5021754,
    5033200,
    5026065,
    5024701,
    5007282,
    5018635,
    5032117,
    5032996,
    5068978,
    5058522,
    5051799,
    5032088,
    5005484,
    5016471,
    5022804,
    5013482,
    5027702,
    5036144,
    5038557,
    5046677,
    5034058,
    5026155,
    5041403,
    5035992,
    5047064,
    5062411,
    5060448,
    5060082,
    5015076,
    5017135,
    5021341,
    5009878,
    5040859,
    5025068,
    5017137,
    5041356,
    5022679,
    5032879,
    5028265,
    5021820,
    5050195,
    5043426,
    5048380,
    5021912,
    5009522,
    5015104,
    5013336,
    5024222,
    5039467,
    5030606,
    5052204,
    5046405,
    5053459,
    5051005,
    5050557,
    5078269,
    5068328,
    5069690,
    5040550,
    5028518,
    5045532,
    5067521,
    5082312,
    5096045,
    5089953,
    5109207,
    5111825,
    5108660,
    5088113,
    5060405,
    5027229,
    5023231,
    5071600,
    5206978,
    5232239,
    5343364,
    5359682,
    5324367,
    5274501,
    5242357,
    5147486,
    5017851,
    4931639,
    4809220,
    4782548,
    4698955,
    4705349,
    4732572,
    4821186,
    4840657,
    4921288,
    5008478,
    5029219,
    5113892,
    5124527,
    5168110,
    5192371,
    5168008,
    5161711,
    5148257,
    5105805,
    5060479,
    5027300,
    5000434,
    4995721,
    4985423,
    5012747,
    5014648,
    5054662,
    5055631,
    5061650,
    5073357,
    5050862,
    5054401,
    5050831,
    5026573,
    5020980,
    5005054,
    5013504,
    5005633,
    4993857,
    4992726,
    4982696,
    5000251,
    4996209,
    4995065,
    5004139,
    5001927,
    5033761,
    5036290,
    5058511,
    5079390,
    5067005,
    5078057,
    5074488,
    5056898,
    5055814,
    5040181,
    5051656,
    5046540,
    5030072,
    5028769,
    5010092,
    5027754,
    5028359,
    5020654,
    5035489,
    5027051,
    5054543,
    5058142,
    5056389,
    5066808,
    5055749,
    5067796,
    5069404,
    5055259,
    5067465,
    5052109,
    5066461,
    5070122,
    5056256,
    5058339,
    5047245,
    5046690,
    5042735,
    5012651,
    5007962,
    4999251,
    5019299,
    5031508,
    5034799,
    5057569,
    5061346,
    5084331,
    5092961,
    5089489,
    5093260,
    5090298,
    5067248,
    5060949,
    5026645,
    5007091,
    4989363,
    4981777,
    4990344,
    4981393,
    4994302,
    4993324,
    5006141,
    5015244,
    5011380,
    5034948,
    5039794,
    5059633,
    5070671,
    5064199,
    5070338,
    5081201,
    5100053,
    5109035,
    5114991,
    5107580,
    5085142,
    5047478,
    5045901,
    5002481,
    4978065,
    4971788,
    4954086,
    4960141,
    4954267,
    4968546,
    4981545,
    4999905,
    5013985,
    5029125,
    5043186,
    5050346,
    5054599,
    5067827,
    5072241,
    5083162,
    5081540,
    5067596,
    5069502,
    5041917,
    5024966,
    5015926,
    4998212,
    5010283,
    5005096,
    5021508,
    5039951,
    5052308,
    5067163,
    5082167,
    5096420,
    5096883,
    5072181,
    5072444,
    5063806,
    5004787,
    5015651,
    4995469,
    5006439,
    5025832,
    5037096,
    5058927,
    5061637,
    5068775,
    5094716,
    5104051,
    5115650,
    5098612,
    5096815,
    5082856,
    5042952,
    5050297,
    5016170,
    5012736,
    5007144,
    4986045,
    4990805,
    4981413,
    4986330,
    5011863,
    5027643,
    5051209,
    5051336,
    5048067,
    5057931,
    5034766,
    5028538,
    4994700,
    4986443,
    4974723,
    4962876,
    4965793,
    4956738,
    4951997,
    4965504,
    4956031,
    4963460,
    4967546,
    4964223,
    4990903,
    4986173,
    4976614,
    4961130,
    4956474,
    4968897,
    4976281,
    4968970,
    4965781,
    4957743,
    4965962,
    5002340,
    5009932,
    5023424,
    5010996,
    5004977,
    5008484,
    5021847,
    5029692,
    5020373,
    5013359,
    4991425,
    4981683,
    4966141,
    4959745,
    4962623,
    4953488,
    4940976,
    4911911,
    4904861,
    4910462,
    4915170,
    4937187,
    4951548,
    4945213,
    4966949,
    4958872,
    4960471,
    4959130,
    4950543,
    4971001,
    4971105,
    4967394,
    4956844,
    4944373,
    4956355,
    4972459,
    4968880,
    4968726,
    4957050,
    4946345,
    4943654,
    4940845,
    4954194,
    4947756,
    4955763,
    4966609,
    4970820,
    5000483,
    4998630,
    5021402,
    5021990,
    4997927,
    4967828,
    4952948,
    4927000,
    4928680,
    4932439,
    4958141,
    4949906,
    4958163,
    4956229,
    4941320,
    4946433,
    4940971,
    4946292,
    4954375,
    4946085,
    4954048,
    4944620,
    4943377,
    4947980,
    4934659,
    4955090,
    4952036,
    4962780,
    4979490,
    4970192,
    4987008,
    4979595,
    4981116,
    4981229,
    4969070,
    4976708,
    4969486,
    4966001,
    4968402,
    4938204,
    4925511,
    4915953,
    4900411,
    4918582,
    4924571,
    4962089,
    4953386,
    4955402,
    4947322,
    4925369,
    4919633,
    4907387,
    4887148,
    4899076,
    4890996,
    4913322,
    4919297,
    4944781,
    5005001,
    5006446,
    5034397,
    5022408,
    4986144,
    4957875,
    4934322,
    4933137,
    4940587,
    4937417,
    4955475,
    4941381,
    4943608,
    4936157,
    4903997,
    4895426,
    4877121,
    4885218,
    4886624,
    4872166,
    4883775,
    4882628,
    4913196,
    4923921,
    4935572,
    4970707,
    4957437,
    4971683,
    4974529,
    4946323,
    4951628,
    4950967,
    4963601,
    4971805,
    4955372,
    4932842,
    4915002,
    4908047,
    4918967,
    4906300,
    4931977,
    4926782,
    4924656,
    4931879,
    4893305,
    4889058,
    4902648,
    4919269,
    4932851,
    4930762,
    4943155,
    4937642,
    4929433,
    4941048,
    4913278,
    4898980,
    4897886,
    4872068,
    4877792,
    4853903,
    4862403,
    4879084,
    4895511,
    4910010,
    4910765,
    4909650,
    4918456,
    4903915,
    4914070,
    4915632,
    4925710,
    4943524,
    4929106,
    4930666,
    4909322,
    4889977,
    4901630,
    4890445,
    4904964,
    4916248,
    4914545,
    4932238,
    4908215,
    4913661,
    4913153,
    4912893,
    4931272,
    4920608,
    4926232,
    4925333,
    4915081,
    4941944,
    4933133,
    4938431,
    4957703,
    4941582,
    4919396,
    4898187,
    4889298,
    4878376,
    4866070,
    4895068,
    4888613,
    4892083,
    4911068,
    4892846,
    4904793,
    4880726,
    4877921,
    4880276,
    4857229,
    4855182,
    4813996,
    4813030,
    4809776,
    4812563,
    4848167,
    4861388,
    4864604,
    4906717,
    4925125,
    4946915,
    4955338,
    4957421,
    4984292,
    4985230,
    4996651,
    4973686,
    4964018,
    4966694,
    4941441,
    4944869,
    4912592,
    4898925,
    4903645,
    4885639,
    4897825,
    4881070,
    4876058,
    4890701,
    4880596,
    4889111,
    4874959,
    4863707,
    4875377,
    4884522,
    4898575,
    4914743,
    4908922,
    4929066,
    4923790,
    4920900,
    4903177,
    4886935,
    4877341,
    4853876,
    4844737,
    4829700,
    4823354,
    4821059,
    4831005,
    4839712,
    4880655,
    4894080,
    4905184,
    4899102,
    4872348,
    4856942,
    4840120,
    4835749,
    4833810,
    4821364,
    4826519,
    4812976,
    4816506,
    4837102,
    4853068,
    4912205,
    4912136,
    4943717,
    4965135,
    4952584,
    4966604,
    4964468,
    4967886,
    4966645,
    4950461,
    4941138,
    4925181,
    4913278,
    4915632,
    4916420,
    4948636,
    4946228,
    4959114,
    4960001,
    4951268,
    4967526,
    4963191,
    4981517,
    5003277,
    4988738,
    4992338,
    4971703,
    4946855,
    4930246,
    4915625,
    4924813,
    4916630,
    4908329,
    4896318,
    4884440,
    4907352,
    4907701,
    4932161,
    4973355,
    4965822,
    4996758,
    4998628,
    4994218,
    5006759,
    5006481,
    5032935,
    5036529,
    5029661,
    5027898,
    4997478,
    4986003,
    4989080,
    4960230,
    4960755,
    4953293,
    4953939,
    4959394,
    4943556,
    4951684,
    4951267,
    4972219,
    4984616,
    4975369,
    4983612,
    4989327,
    5007532,
    5023555,
    5029075,
    5045297,
    5042788,
    5044922,
    5052229,
    5034716,
    5035530,
    5026857,
    5006684,
    5010488,
    4972008,
    4950090,
    4949898,
    4943703,
    4955164,
    4956102,
    4979191,
    4997737,
    5019034,
    5033861,
    5029859,
    5012260,
    5006655,
    4978827,
    4985959,
    4964463,
    4955529,
    4961340,
    4966237,
    4977307,
    4982210,
    4996389,
    4997493,
    4997464,
    5003890,
    4977608,
    4965427,
    4964921,
    4953044,
    4959366,
    4946414,
    4955215,
    4964154,
    4983298,
    5002850,
    5007432,
    5004088,
    4994519,
    4967906,
    4974090,
    4945530,
    4939766,
    4940268,
    4937315,
    4942195,
    4929387,
    4928939,
    4936454,
    4927201,
    4941178,
    4949299,
    4970616,
    4993097,
    5000282,
    5006754,
    5003439,
    4985232,
    4986082,
    4955030,
    4960311,
    4954718,
    4938181,
    4960298,
    4954344,
    4961586,
    5003009,
    5030431,
    5047180,
    5038902,
    5030429,
    5016796,
    4967135,
    4971468,
    4926105,
    4921903,
    4930165,
    4921149,
    4939183,
    4944614,
    4948421,
    4985314,
    4986627,
    4984742,
    4953451,
    4945889,
    4945931,
    4932771,
    4946911,
    4956105,
    4953161,
    4992571,
    5000597,
    4994747,
    4975099,
    4959788,
    4947005,
    4924542,
    4925131,
    4915850,
    4907385,
    4927929,
    4943018,
    4940365,
    4952052,
    4946653,
    4967602,
    4977109,
    4970030,
    4975191,
    4965223,
    4971579,
    4975284,
    4968432,
    4983983,
    4977573,
    4984407,
    4985813,
    4969261,
    4969691,
    4960849,
    4962694,
    4972640,
    4957902,
    4955965,
    4940946,
    4927972,
    4925898,
    4921364,
    4931868,
    4923605,
    4926875,
    4936236,
    4941349,
    4973026,
    4969443,
    4993186,
    5009166,
    4984082,
    4971256,
    4952542,
    4906920,
    4883157,
    4876610,
    4901007,
    4906116,
    4940558,
    4973429,
    4959796,
    4973508,
    4963305,
    4948180,
    4961839,
    4959733,
    4988428,
    4988078,
    4989034,
    5000287,
    4986365,
    4997988,
    4995111,
    4962083,
    4965362,
    4940443,
    4929330,
    4921829,
    4923072,
    4945650,
    4950610,
    4970843,
    4968659,
    4965920,
    4974475,
    4962700,
    4969663,
    4964135,
    4937743,
    4920684,
    4906493,
    4912422,
    4916921,
    4926360,
    4960176,
    4964801,
    5001775,
    5007026,
    5005086,
    5000560,
    4978044,
    4963378,
    4963796,
    4940403,
    4950507,
    4953779,
    4969858,
    4974356,
    4964654,
    4957605,
    4952504,
    4943502,
    4952621,
    4942717,
    4961619,
    4981465,
    5009859,
    5019479,
    5030622,
    5040506,
    5023694,
    4990188,
    4987622,
    4935711,
    4894245,
    4890696,
    4870237,
    4879383,
    4889435,
    4923615,
    4959715,
    5005501,
    5023898
    
]
after_stft=[283675616.000000  , 
    275354720.000000,
    251579072.000000,
    215677824.000000,
    172479984.000000,
    127408568.000000,
    85516120.000000,
    50676476.000000,
    25128490.000000,
    9658433.000000,
    4849940.000000,
    4898093.500000,
    3732201.000000,
    2587892.000000,
    2584853.500000,
    2360722.000000,
    1319090.500000,
    734379.937500,
    1820011.875000,
    2286946.000000,
    1809772.000000,
    999516.562500,
    1844407.875000,
    3109388.000000,
    3702747.000000,
    3405103.000000,
    2500621.500000,
    1960324.000000,
    2564929.750000,
    3258363.750000,
    3303477.750000,
    2611294.250000,
    1454616.875000,
    543795.312500,
    1045880.062500,
    1368358.250000,
    1136964.750000,
    721805.250000,
    996022.875000,
    1474234.375000,
    1532063.125000,
    1088170.500000,
    705794.250000,
    1417367.750000,
    2217275.500000,
    2548206.750000,
    2278804.250000,
    1602945.375000,
    1272121.500000,
    1841576.750000,
    2413176.500000,
    2474430.250000,
    1982578.125000,
    1274666.875000,
    1237147.250000,
    1827767.000000,
    2157895.750000,
    1962657.750000,
    1364879.375000,
    964837.625000,
    1392606.125000,
    1866669.125000,
    1906748.250000,
    1479217.375000,
    886771.437500,
    958082.125000,
    1490474.125000,
    1740617.000000,
    1537725.000000,
    996303.937500,
    635335.687500,
    1024331.687500,
    1387158.875000,
    1363938.625000,
    945966.000000,
    351290.875000,
    580442.437500,
    1064054.750000,
    1222305.375000,
    1020338.750000,
    642830.250000,
    640856.750000,
    1003075.125000,
    1192006.625000,
    1051037.125000,
    623601.125000,
    223528.031250,
    609364.750000,
    923208.125000,
    929991.125000,
    636097.062500,
    173167.000000,
    357864.218750,
    675082.062500,
    712308.937500,
    449681.375000,
    29877.152344,
    552298.812500,
    953063.125000,
    1098866.000000,
    963866.875000,
    688137.437500,
    662525.437500,
    945069.375000,
    1133512.125000,
    1054975.125000,
    742796.125000,
    519941.781250,
    805156.937500,
    1146094.875000,
    1246151.875000,
    1057130.750000,
    699965.812500,
    565044.250000,
    834131.187500,
    1045566.000000,
    1002298.062500,
    711200.687500,
    338514.843750,
    406051.406250,
    674470.875000,
    740741.625000,
    563084.875000,
    240190.640625,
    295343.375000,
    584106.625000,
    687920.375000,
    553072.937500,
    237835.984375,
    245461.812500,
    585544.187500,
    761890.937500,
    704389.062500,
    451902.593750,
    277182.812500,
    542028.937500,
    788421.500000,
    829589.250000,
    649020.812500,
    355541.156250,
    348935.218750,
    609227.187500,
    739997.875000,
    657274.312500,
    402058.468750,
    207993.062500,
    421644.156250,
    596349.062500,
    577435.437500,
    369822.281250,
    130888.289063,
    358765.937500,
    577780.000000,
    614276.750000,
    457044.406250,
    223791.703125,
    348219.343750,
    603699.375000,
    710811.125000,
    617869.250000,
    376535.437500,
    261612.968750,
    493986.937500,
    674773.875000,
    671241.937500,
    486108.812500,
    247087.828125,
    337603.437500,
    552556.312500,
    622006.187500,
    506458.031250,
    273971.031250,
    248802.343750,
    475040.093750,
    598904.875000,
    543404.125000,
    337754.843750,
    197432.421875,
    405239.687500,
    583352.312500,
    597662.062500,
    445659.843750,
    241776.921875,
    321699.875000,
    522362.750000,
    596442.375000,
    498277.250000,
    277072.125000,
    203553.781250,
    418088.593750,
    554232.875000,
    525140.312500,
    346056.156250,
    163811.312500,
    320159.718750,
    495169.125000,
    524838.312500,
    395354.562500,
    187328.046875,
    244860.343750,
    445769.656250,
    529796.687500,
    454795.562500,
    263749.250000,
    193871.156250,
    386495.062500,
    517380.125000,
    498312.562500,
    339535.593750,
    171957.968750,
    303819.031250,
    472680.375000,
    511495.656250,
    401201.312500,
    210664.703125,
    227439.484375,
    412234.406250,
    501457.781250,
    442050.843750,
    262692.437500,
    152198.375000,
    328987.093750,
    463889.312500,
    459748.468750,
    319898.156250,
    150400.000000,
    263287.093750,
    428646.625000,
    474124.218750,
    377229.843750,
    193642.234375,
    195292.500000,
    377321.031250,
    471313.312500,
    425012.281250,
    265609.531250,
    170466.531250,
    331532.343750,
    466409.093750,
    472005.875000,
    344811.593750,
    169140.218750,
    235493.562500,
    400529.375000,
    460666.375000,
    384100.906250,
    214648.843750,
    176543.078125,
    345484.812500,
    449268.062500,
    421918.156250,
    277489.625000,
    142072.171875,
    269989.218750,
    408312.218750,
    430365.750000,
    325687.718750,
    161916.140625,
    203796.296875,
    360553.375000,
    424880.312500,
    360749.656250,
    201590.250000,
    147411.062500,
    310271.062500,
    415646.968750,
    397338.031250,
    265455.906250,
    134094.484375,
    254902.140625,
    393337.937500,
    422951.093750,
    330782.187500,
    177791.234375,
    198423.859375,
    348077.468750,
    418649.281250,
    366702.250000,
    217707.562500,
    135385.171875,
    283102.906250,
    394246.312500,
    389599.656250,
    271941.406250,
    127817.859375,
    216479.328125,
    353412.625000,
    390877.843750,
    310421.968750,
    162946.796875,
    177940.375000,
    329479.093750,
    407159.937500,
    366644.250000,
    226536.781250,
    117016.687500,
    248260.703125,
    362582.625000,
    368146.093750,
    263642.031250,
    127537.976563,
    207172.562500,
    343593.000000,
    387692.437500,
    316759.531250,
    170007.968750,
    149986.250000,
    296524.937500,
    380209.875000,
    350945.500000,
    224341.203125,
    125127.484375,
    249613.046875,
    366704.781250,
    381195.500000,
    286369.750000,
    142526.578125,
    178690.500000,
    313477.968750,
    367477.000000,
    310240.968750,
    173051.078125,
    135795.953125,
    277457.281250,
    367555.250000,
    350345.406250,
    235594.578125,
    122298.085938,
    221186.609375,
    337337.906250,
    358924.718750,
    274289.750000,
    137211.171875,
    170374.546875,
    306292.187500,
    366757.625000,
    319191.875000,
    189788.328125,
    130624.703125,
    259795.343750,
    353772.125000,
    345542.062500,
    238730.984375,
    114875.617188,
    199248.484375,
    319619.750000,
    350854.625000,
    277438.343750,
    144767.390625,
    156201.062500,
    289273.812500,
    355861.687500,
    317400.937500,
    192524.484375,
    110208.210938,
    234039.515625,
    334017.875000,
    335948.968750,
    240685.578125,
    124027.757813,
    196849.484375,
    317322.937500,
    355232.468750,
    289693.531250,
    155993.890625,
    135012.515625,
    266585.968750,
    342409.875000,
    317157.031250,
    206164.875000,
    122158.226563,
    227738.687500,
    328531.093750,
    337757.375000,
    249121.000000,
    119842.664063,
    166994.156250,
    291324.031250,
    339315.093750,
    286297.125000,
    162814.859375,
    129934.062500,
    254387.015625,
    333379.781250,
    314718.906250,
    207001.609375,
    103239.734375,
    202542.046875,
    309977.062500,
    328922.937500,
    250160.500000,
    123139.171875,
    154740.343750,
    279679.312500,
    334512.968750,
    290357.000000,
    171974.328125,
    120662.554688,
    238964.062500,
    323428.781250,
    314165.781250,
    216009.750000,
    110589.679688,
    193463.515625,
    301841.843750,
    327283.781250,
    255348.218750,
    125778.710938,
    136403.390625,
    264235.843750,
    327365.625000,
    292903.781250,
    180464.984375,
    112681.078125,
    223366.140625,
    312643.781250,
    311342.187500,
    219105.921875,
    103536.140625,
    176030.640625,
    291235.625000,
    327985.250000,
    269365.718750,
    151579.843750,
    136649.734375,
    251300.718750,
    316302.062500,
    287857.281250,
    179498.984375,
    102678.664063,
    212866.406250,
    308245.125000,
    315443.468750,
    230690.125000,
    108913.101563,
    156642.937500,
    272520.218750,
    315234.531250,
    263034.625000,
    146345.062500,
    125072.562500,
    245144.968750,
    318312.937500,
    298839.562500,
    195787.078125,
    96861.765625,
    189131.390625,
    288235.093750,
    303473.781250,
    227602.390625,
    113701.531250,
    159325.375000,
    276453.968750,
    324706.750000,
    278484.281250,
    162389.390625,
    115519.914063,
    231000.406250,
    311407.937500,
    301336.625000,
    205814.781250,
    102251.351563,
    182562.234375,
    286898.093750,
    311856.125000,
    245037.875000,
    127399.289063,
    137300.390625,
    252105.156250,
    307387.500000,
    270785.562500,
    162981.187500,
    113626.750000,
    225462.468750,
    308584.000000,
    303530.187500,
    211571.046875,
    99984.703125,
    171402.546875,
    280570.656250,
    312616.437500,
    251972.375000,
    134604.156250,
    130512.234375,
    247380.031250,
    309999.781250,
    280313.656250,
    172247.031250,
    94538.265625,
    204228.093750,
    297016.218750,
    303714.531250,
    222855.359375,
    114682.164063,
    165621.046875,
    272954.062500,
    309673.562500,
    254205.984375,
    136383.687500,
    120504.921875,
    241595.578125,
    312566.562500,
    291989.656250,
    190819.203125,
    101534.203125,
    194525.765625,
    290365.312500,
    303712.406250,
    227563.140625,
    112470.171875,
    151895.125000,
    265774.562500,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000]


cccc=np.array(cccc)
dada=np.array(dada)
after_stft=np.array(after_stft)
#%% rpm 
dd=np.array(pd.read_csv(r"D:\andrew yu\quant_performance\unitest\build\respiratory\test.csv"))
dd=dd.reshape(-1,)
dd=dd[:-1]
#%%
f = plt.figure(num = 1,figsize=(24, 18))
plt.pcolormesh(dd[:,:20].T)
plt.show()


#%%
f = plt.figure(num = 1,figsize=(24, 18))
plt.pcolormesh(plt_rpm_s[:20,:])
plt.show()
#%%

#'20220120_roadtest'
eval_root_dir = r"C:\Users\reduc\Desktop\02_data"
#data_dir = 'verification_candidate'
# For all logs in directories

test_file='20220318_truck_test5'

file_path = [os.path.join(eval_root_dir ,test_file,'raw')]

file_list = rd.get_file_list(file_path[0])



#file_path=r"C:\Users\reduc\Desktop\02_data\20220120_roadtest\raw"

#log_filename='2022_01_20_11_10.log'

#grown_t=np.array(pd.read_csv(r"C:\Users\reduc\Desktop\02_data\20220120_roadtest\ecg\freq_2022_01_20_11_10_bitalinoECG.log"))
#algo.main_func(pressure_data, acc_data)
tr=0
a=0
for log_filename in file_list:
    
    a+=1
    truth_file_path = os.path.join(eval_root_dir ,test_file,'resp')
    # truth_file_list = rd.get_file_list(truth_file_path)
    # grown_t=np.array(pd.read_csv(os.path.join(truth_file_path,truth_file_list[tr]) ))
    print(log_filename)
    # print(truth_file_list[tr])
    
    
    #truth=r"C:\Users\reduc\Desktop\02_data\20211216_roadtest\ground_truth_bpm\opensignals_98D391FD3F3D_2021-12-16_10-43-21.txt"
    pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path[0], log_filename)
    mean=np.mean(pressure_data)
    sd=np.std(pressure_data)

    for i in range(len(pressure_data)):
        if pressure_data[i]>mean+2*sd or pressure_data[i]<mean-2*sd:
            pressure_data[i]=pressure_data[i-1]


    for i in range(len(acc_y)):
        acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
        acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
        acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
    acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

    algo = Alg_freq_domain(fs=64, fft_window_size=64)
    algo.acc_x = acc_x
    algo.acc_y = acc_y
    algo.acc_z = acc_z
    
    
    data=pressure_data
    
    #algo.rpm_cutoff_freq=[0.05,1] nfft=algo.fs * algo.fft_window_sizealgo.rpm_filter_order


    algo.rpm_cutoff_freq=[1,1.5]
    rpm_b, rpm_a = filter.butter_bandpass(algo.rpm_cutoff_freq[0], algo.rpm_cutoff_freq[1], algo.fs,3)
    data = data - data[0]

    algo.rpm_data_out = lfilter(rpm_b, rpm_a, data)
    algo.rpm_data_out = np.around(algo.rpm_data_out)
    algo.filter_rpm_data = np.copy(algo.rpm_data_out)
    # algo.rpm_data_out = algo.rpm_data_out[::2]
    # algo.fs =32
    
    ## input.shape/fs/(10-8)        algo.fs * algo.fft_window_size
    f,t, rpm_s = scipy.signal.stft(algo.rpm_data_out, window='hamming', nperseg=algo.fs * 6, noverlap=algo.fs *5 , nfft=algo.fs * algo.fft_window_size)
    plt_rpm_s=np.abs(rpm_s[:, 5:-5])
    algo.rpm_s = np.abs(rpm_s[:, 1:-1])
    algo.normalization(algo.rpm_s)

    algo.rpm_overlap = algo.get_overlap_spectrum(algo.rpm_s, [1])
    rpm_interval = algo.dismantling(algo.rpm_overlap, 1, 30)
    rpm_interval = rpm_interval.T
    algo.rpm = algo.get_rpm(rpm_interval, 1)
    #algo.rpm = algo.moving_median(algo.rpm, 2)
    for i in range(len(algo.rpm)):
        algo.rpm[i] = int(algo.rpm[i] *60/algo.fft_window_size)
    #####intrep1d

    # rpm_list = algo.rpm

    # x = np.linspace(0, len(rpm_list) - 1, len(rpm_list))
    # f = interp1d(x, rpm_list, kind='linear')
    # x_new = np.linspace(0, len(rpm_list) - 1, len(rpm_list) * 2 )  
    # algo.rpm = f(x_new)*60/algo.fft_window_size ##公式


    #vc=np.array(pd.read_csv(r"D:\git\frequency_domain_als\project\Data\VCResult\2021_12_16_11_08_sFrank_result.csv"))
#%%

g_nor=(acc_data-np.mean(acc_data))/np.std(acc_data)
p_nor=(pressure_data-np.mean(pressure_data))/np.std(pressure_data)
move = np.zeros(len(g_nor))
for i in range(len(g_nor)):
    if np.abs(g_nor[i]-p_nor[i])>3.88:
        move[i]=1
    else:
        move[i]=0
move_min=np.zeros((int(len(move)/64)))
for i in range(int(len(move)/64)):
    move_min[i]=np.median(move[i*64:(i+1)*64])

#%%
    y=grown_t.reshape(len(grown_t),)

    # y=np.array(pd.read_csv(truth))
    #px.line(y=[algo.rpm[:len(y[::2])] , y[::2]])
    # y=np.array(y).reshape(len(y))
    #print("test:performance (Acc rate(AP5):", pf.performance(savgol_filter(output,15,3)[:len(y[::2])], y[::2], bpm_error_tolerant=3)[0])

    tr=tr+1

    output=np.zeros(len(algo.rpm))
    for i in range(len(algo.rpm)):
        if i==0:
            output[i]=algo.rpm[i]
        else:
            if abs(algo.rpm[i]-output[i-1]) > 8 :
                x = random.gauss(mu=0, sigma=0.5) 
                output[i]=output[i-1]+x
            else:
                output[i]=algo.rpm[i]
        



    a=0
    output=np.zeros(len(algo.rpm))
    high=[]
    cum=np.zeros(len(algo.rpm))
    ind=[]
    for i in range(len(algo.rpm)):
        a=algo.rpm[i]
        cum[i]=sum(rpm_interval[i][(a-2):(a+3)])/sum(rpm_interval[i])
        if cum[i]>0.3 and algo.rpm[i]>12 and algo.rpm[i]<24:
            high.append(algo.rpm[i])
            ind.append(i)

        if i==0 or len(high)==0:
            output[i]=algo.rpm[i]
        else:
            if cum[i]<0.2 or algo.rpm[i]<10 or algo.rpm[i] > 30:
                x = random.gauss(mu=0, sigma=1)
                output[i]=np.median(high)+x
                a=+1
            else:
                output[i]=algo.rpm[i]

    #px.line(y=[savgol_filter(output,15,3)[:len(y[::2])],y[::2]])


    print("test:performance (Acc rate(AP3):", pf.performance(savgol_filter(output,15,3)[:len(y[::5])], y[::5], bpm_error_tolerant=3)[0])
    










#%%      hr
tt=np.zeros(len(algo.ss[1,:]))
for i in range(len(algo.ss[1,:])):
    tt[i]=np.argmax((algo.ss[:150,i]))
gt=pd.read_csv(r"C:\Users\reduc\Desktop\02_data\20220322_truck\ground_truth_bpm\test5_2022_03_21_04_51_25.csv")
gt=np.array(gt)
a=0
b=1500
plt.figure(num = 1,figsize=(24, 18))
plt.pcolormesh(algo.ss[:300,a:b])
plt.plot(np.arange(len(algo.ss[1,a:b])), (gt[:len(algo.ss[1,a:b])]), color='red', linewidth=1)
plt.plot(np.arange(len(algo.ss[1,a:b])),( algo.bpm[:len(algo.ss[1,a:b])]), color='blue', linewidth=1)
plt.plot(np.arange(len(algo.ss[1,a:b])),savgol_filter(tt[:len(algo.ss[1,a:b])],15,3), color='black', linewidth=1)

plt.show()

px.line(y=[gt[:len(algo.ss[1,a:b])].reshape(-1,),algo.bpm[:len(algo.ss[1,a:b])],savgol_filter(tt[:len(algo.ss[1,a:b])],15,3)])
#%%



#%%
#'20220120_roadtest'
eval_root_dir = r"C:\Users\reduc\Desktop\02_data"
#data_dir = 'verification_candidate'
# For all logs in directories

test_file='20220322_truck'
file_path = [os.path.join(eval_root_dir ,test_file,'raw')]
file_list = rd.get_file_list(file_path[0])



#file_path=r"C:\Users\reduc\Desktop\02_data\20220120_roadtest\raw"

log_filename='test5_2022_03_21_04_51_25.txt'

#grown_t=np.array(pd.read_csv(r"C:\Users\reduc\Desktop\02_data\20220120_roadtest\ecg\freq_2022_01_20_11_10_bitalinoECG.log"))
#algo.main_func(pressure_data, acc_data)

# truth_file_list = rd.get_file_list(truth_file_path)
# grown_t=np.array(pd.read_csv(os.path.join(truth_file_path,truth_file_list[tr]) ))

# print(truth_file_list[tr])
with open('knn1.pickle', 'rb') as f:
    knn_01 = pickle.load(f)


with open('knn2.pickle', 'rb') as f:
    knn_02 = pickle.load(f)


#truth=r"C:\Users\reduc\Desktop\02_data\20211216_roadtest\ground_truth_bpm\opensignals_98D391FD3F3D_2021-12-16_10-43-21.txt"
pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path[0], log_filename)
mean=np.mean(pressure_data)
sd=np.std(pressure_data)

for i in range(len(pressure_data)):
    if pressure_data[i]>mean+2*sd or pressure_data[i]<mean-2*sd:
        pressure_data[i]=pressure_data[i-1]


for i in range(len(acc_y)):
    acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
    acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
    acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

algo = Alg_freq_domain(fs=64, fft_window_size=64)
algo.acc_x = acc_x
algo.acc_y = acc_y
algo.acc_z = acc_z


data=pressure_data
g_sensor_data=acc_data
#[1.25,5.8] [1.6,10]
algo.bpm_filter_order = 3
algo.bpm_p_cutoff_freq = [1.25,5.8]
algo.g_nor=(g_sensor_data-np.mean(g_sensor_data))/np.std(g_sensor_data)
algo.p_nor=(data-np.mean(data))/np.std(data)
algo.p_sensor_data, algo.g_sensor_data = algo._pre_process(data, g_sensor_data)


accx = algo.acc_x
accy = algo.acc_y
accz = algo.acc_z
algo.p_sensor_data, algo.g_sensor_data = algo._pre_process(data, g_sensor_data)
#%%
# filtering
algo.filter_p_sensor_data = algo.filtering_signal(algo.p_sensor_data, algo.bpm_p_cutoff_freq[0], algo.bpm_g_cutoff_freq[1]) # TODO USE_REAL_DECIMATE
algo.filter_g_sensor_data = algo.filtering_signal(algo.g_sensor_data, algo.bpm_g_cutoff_freq[0], algo.bpm_g_cutoff_freq[1])

# self.filter_p_sensor_data = self.p_sensor_data
# self.filter_g_sensor_data =self.g_sensor_data
if algo.USE_EXTEND_FFT_RESOLUTION == 1 or algo.USE_REAL_DECIMATE == 1:
    algo.decimate_scale = 2
    algo.fs = int(algo.fs/algo.decimate_scale)
else:
    algo.decimate_scale = 1

# STFT (short time Fourier transform)hamming
_, _, s  = scipy.signal.stft(algo.down_sample(algo.filter_p_sensor_data,algo.decimate_scale), window='hamming', nperseg=int(algo.fs * algo.ss_t_len), noverlap=int(algo.fs * (algo.ss_t_len - 1)), nfft=algo.fs * algo.fft_window_size, boundary=None)
_, _, ns = scipy.signal.stft(algo.down_sample(algo.filter_g_sensor_data,algo.decimate_scale), window='hamming', nperseg=int(algo.fs * algo.ss_t_len), noverlap=int(algo.fs * (algo.ss_t_len - 1)), nfft=algo.fs * algo.fft_window_size, boundary=None)

#_, _, s  = scipy.signal.stft(self.filter_p_sensor_data, window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)
#_, _, ns = scipy.signal.stft(self.filter_g_sensor_data, window='hamming', nperseg=int(self.fs * self.ss_t_len), noverlap=int(self.fs * (self.ss_t_len - 1)), nfft=self.fs * self.fft_window_size, boundary=None)

if algo.USE_REAL_DECIMATE == 1:
    algo.filter_p_sensor_data = algo.down_sample(algo.filter_p_sensor_data,algo.decimate_scale)
    algo.filter_g_sensor_data = algo.down_sample(algo.filter_g_sensor_data,algo.decimate_scale)
    algo.decimate_scale = 1
elif algo.USE_EXTEND_FFT_RESOLUTION == 1:
    algo.fs = int(algo.fs*algo.decimate_scale)

algo.ss  = np.abs(s [0:algo.fs *algo.fft_window_size//algo.decimate_scale//2,])
algo.nss = np.abs(ns[0:algo.fs *algo.fft_window_size//algo.decimate_scale//2,])
#%%
algo.golden_harmonic_spectrum = algo.get_golden_harmonic_spectrum(algo.golden_bpm, algo.ss.shape[0])

# get engine noise
algo.normalization(algo.nss)
algo.engine_noise = algo.get_engine_noise(algo.nss)
algo.normalization(algo.engine_noise)

# get scenario and status
mean_nss = np.mean(algo.nss[int(algo.fft_window_size*7):,:],0)
mean_nss[np.where(mean_nss<0.02)] = 0.02 
acc_org_peak_ratio = (np.max(algo.nss[int(algo.fft_window_size*7/algo.stft_reduce_scale):,:],0)/mean_nss) > 4
algo.status = algo.get_scenario(algo.filter_p_sensor_data, algo.filter_g_sensor_data, acc_org_peak_ratio)

algo.status = algo.knn_predict(data, accx, accy, accz)
# Spectrum subtraction
algo.reserve_freq_band(algo.ss,  algo.reserved_freq_lower_bound, algo.reserved_freq_upper_bound)
algo.reserve_freq_band(algo.nss, algo.reserved_freq_lower_bound, algo.reserved_freq_upper_bound)
algo.normalization(algo.ss)
algo.normalization(algo.nss)

algo.ss_clip = np.copy(algo.ss)  
algo.nss_clip = np.copy(algo.nss)

algo.get_trans_func(np.copy(algo.ss), np.copy(algo.nss), algo.status)
algo.ss_denoise, algo.ss_status = algo.get_ss(np.copy(algo.ss), np.copy(algo.nss), algo.status, algo.engine_noise)

'''double check the body up-or-down and check the no-vital by mads'''
if algo.USE_NEW_NO_VITAL_SIGN == 1 and algo.USE_CHECK_STATUS_AFTER_SS == 1:
    algo.status = algo.update_status_other() 
    algo.status = algo.check_normal_move()
    # algo.status = algo.move()

if algo.USE_TIME_FUSION:
    algo.ss_denoise = algo.get_time_fusion_spectrum(algo.ss_denoise, algo.p_sensor_data, algo.g_sensor_data)
#%%
# get overlaped spectrum and candidate peaks
#self.ss_denoise_overlaped = self.get_overlap_spectrum(self.ss_denoise, self.overlap_weight)
algo.ss_denoise_overlaped = algo.get_overlap_spectrum(np.copy(algo.ss_denoise), np.array([1,1,1,1,1,1,1]))
algo.ss_denoise_overlaped = algo.compensate_overlap_spectrum(np.copy(algo.ss_denoise_overlaped), np.array([1,1,1,1,1,1,1]))
algo.normalization(algo.ss_denoise_overlaped)
algo.bpm_idx = algo.get_range_peak_idx(np.copy(algo.ss_denoise_overlaped), algo.bpm_search_lower, algo.bpm_search_upper)

# run iteration to get best overlap weighting and bpm results
algo.confidence_level, algo.spec_peak_height = algo.get_confidence_level(np.copy(algo.ss_denoise_overlaped), algo.bpm_idx, algo.status)

algo.overlap_weight = algo.get_overlap_list(algo.confidence_level, algo.bpm_idx)
algo.ss_denoise_overlaped = algo.get_overlap_spectrum(np.copy(algo.ss_denoise), algo.overlap_weight)
algo.ss_denoise_overlaped = algo.compensate_overlap_spectrum(np.copy(algo.ss_denoise_overlaped), algo.overlap_weight)
algo.normalization(algo.ss_denoise_overlaped)
algo.bpm_pre = algo.get_bpm_final(np.copy(algo.ss_denoise_overlaped), algo.bpm_search_lower, algo.bpm_search_upper, algo.status)
algo.peaks_locs, algo.peaks_amps = algo.get_peaks_array(algo.ss_denoise, int(algo.fft_window_size*0.833))
algo.peaks_locs_o, algo.peaks_amps_o = algo.get_peaks_array(algo.ss_denoise_overlaped, 0)

# heart rate post processing
if algo.USE_BPM_POST_PROCESSING and algo.USE_TRAIN_FOR_DEEPBREATH == 0:
    algo.bpm = algo._post_process_bpm(algo.bpm_pre, algo.status)
else:
    algo.bpm = algo.bpm_pre

if algo.USE_REAL_DECIMATE == 1:
    algo.fs = algo.fs*2



























#%%
a=np.array(pd.read_csv(r"D:\andrew yu\quant_performance\unitest\build\respiratory\test.csv"))
a=a.reshape(-1,)

print("test:performance (Acc rate(AP3):", pf.performance(savgol_filter(a,15,3)[:len(y[::5])], y[::5], bpm_error_tolerant=3)[0])
px.line(y=[a[:1179],output[:1269][:1179],y[::5][:1179]])
#%%




# px.line(y=[algo.rpm, y[:len(algo.rpm)]])
# plt.figure(num = 1,figsize=(24, 18))
# plt.pcolormesh(algo.rpm_overlap[:30,:])
# plt.plot(np.arange(len(f(x_new)[::2])), f(x_new)[::2], color='red', linewidth=5)
# plt.plot(np.arange(len(y[::2])), y[::2]/60*32, color='b', linewidth=5)
# plt.show()

#plt.figure(num = 1,figsize=(24, 18))
# plt.pcolormesh(algo.rpm_overlap)
# plt.plot(np.arange(len(y)), y, color='blue', linewidth=0.5)
# plt.show()


#x1 y1









#12/23
#%%
#%%
import csv
import datetime
import json
import math
import os
import pickle
import random
import subprocess
import time
from enum import Enum
from random import sample

import numpy as np
import pandas as pd
import plotly.express as px
import pylab as plt
import scipy
import tensorflow as tf
from keras import backend as K
from keras import regularizers
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.models import Model, load_model
from keras.utils import np_utils
from scipy.interpolate import interp1d
from scipy.optimize import minimize
# import plotly.express as px
# import plotly.graph_objects as go
# import pylab as plt
# from plotly.subplots import make_subplots
from scipy.signal import (decimate, filtfilt, find_peaks, firwin, hilbert,
                          lfilter, peak_prominences, savgol_filter)
from sklearn import datasets, metrics, preprocessing
from sklearn.cluster import KMeans
from sklearn.metrics import (accuracy_score, classification_report,
                             confusion_matrix)
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras.layers import (GRU, LSTM, Activation, AveragePooling1D,
                                     BatchNormalization, Bidirectional, Conv1D,
                                     Conv2D, Dense, Dropout, Flatten,
                                     GlobalAveragePooling1D,
                                     GlobalAveragePooling2D, Input,
                                     MaxPooling1D, MaxPooling2D, Reshape,
                                     TimeDistributed, concatenate)
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tqdm import tqdm

import filter
import performance as pf
import read_data as rd
from alg_freq_domain import Alg_freq_domain


def read(file_path,log_filename,truth):
    #get nss data and align data
    # file_path = "C:\\Users\\reduc\\Desktop\\20211029_roadtest APP狀態\\raw"
    # log_filename="2021_10_29_15_20.log"
    pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path, log_filename)
    for i in range(len(acc_y)):
        acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
        acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
        acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
    acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

    algo = Alg_freq_domain(fs=64, fft_window_size=32)
    algo.acc_x = acc_x
    algo.acc_y = acc_y
    algo.acc_z = acc_z

    algo.get_heart_rate(pressure_data, acc_data)

    y=pd.read_csv(truth)

    if algo.ss.shape[1]>len(y):
        algo.ss=algo.ss[:,:len(y)]
    else:
        y=y[:algo.ss.shape[1]]


    return algo.ss[:300,:] , np.array(y)


def read_denois(file_path,log_filename,truth):
    # file_path = "C:\\Users\\reduc\\Desktop\\20211029_roadtest APP狀態\\raw"
    # log_filename="2021_10_29_15_20.log"
    pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path, log_filename)
    for i in range(len(acc_y)):
        acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
        acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
        acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
    acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

    algo = Alg_freq_domain(fs=64, fft_window_size=32)
    algo.acc_x = acc_x
    algo.acc_y = acc_y
    algo.acc_z = acc_z

    algo.get_heart_rate(pressure_data, acc_data)

    y=pd.read_csv(truth)
    denoise=algo.ss-algo.nss
    if denoise.shape[1]>len(y):
        denoise=denoise[:,:len(y)]
    else:
        y=y[:denoise.shape[1]]


    return denoise[:300,:] , np.array(y)
    
    

r1=os.path.join("20210924_verification_candidate","20210922_biologue_road","raw")
gr1=os.path.join("20210924_verification_candidate","20210922_biologue_road","ground_truth_bpm","2021_09_22_14_09.csv")

r2=os.path.join("20211029_roadtest","raw")
gr2=os.path.join("20211029_roadtest","ground_truth_bpm","2021_10_29_15_20.csv")

r3=os.path.join("20211110_tantring_truck","raw")
gr3=os.path.join("20211110_tantring_truck","ground_truth_bpm","2021_11_10_14_51.csv")

r4=os.path.join("20211110_tantring_truck","raw")
gr4=os.path.join("20211110_tantring_truck","ground_truth_bpm","2021_11_10_16_07.csv")

r5=os.path.join("20211110_tantring_truck","raw")
gr5=os.path.join("20211110_tantring_truck","ground_truth_bpm","2021_11_11_11_12.csv")

r6=os.path.join("20211109_roadtest","raw")
gr6=os.path.join("20211109_roadtest","ground_truth_bpm","2021_11_09_14_59.csv")

r7=os.path.join("20211109_roadtest","raw")
gr7=os.path.join("20211109_roadtest","ground_truth_bpm","2021_11_09_15_26.csv")

r8=os.path.join("20211027_tantring","raw")
gr8=os.path.join("20211027_tantring","ground_truth_bpm","2021_10_27_15_27_main.csv")

r9=os.path.join("20211216_roadtest","raw")
gr9=os.path.join("20211216_roadtest","ground_truth_bpm","2021_12_16_10_43_Danny.csv")

r10=os.path.join("20211216_roadtest","raw")
gr10=os.path.join("20211216_roadtest","ground_truth_bpm","2021_12_16_11_08_sFrank.csv")

r11=os.path.join("20210924_verification_candidate","20210922_biologue_road","raw")
gr11=os.path.join("20210924_verification_candidate","20210922_biologue_road","ground_truth_bpm","2021_09_22_14_40.csv")

#r12=os.path.join("20211021_roadtest","raw")
#gr12=os.path.join("20211021_roadtest","ground_truth_bpm","2021_10_21_15_33.csv")

r13=os.path.join("20211011_roadtest","raw")
gr13=os.path.join("20211011_roadtest","ground_truth_bpm","2021_10_11_15_13.csv")

r14=os.path.join("20211011_roadtest","raw")
gr14=os.path.join("20211011_roadtest","ground_truth_bpm","2021_10_11_15_34.csv")

r15=os.path.join("20211011_roadtest","raw")
gr15=os.path.join("20211011_roadtest","ground_truth_bpm","2021_10_11_15_52.csv")

r16=os.path.join("20211011_roadtest","raw")
gr16=os.path.join("20211011_roadtest","ground_truth_bpm","2021_10_12_11_50.csv")

tx , ty = read(r1,"2021_09_22_14_09.log",gr1)
x2 , y2 = read(r2,"2021_10_29_15_20.log",gr2)
x3 , y3 = read(r3,"2021_11_10_14_51.log",gr3)
x4 , y4 = read(r4,"2021_11_10_16_07.log",gr4)
x5 , y5 = read(r5,"2021_11_11_11_12.log",gr5)
x15 , y15 = read(r6,"2021_11_09_14_59.log",gr6)
x7 , y7 = read(r7,"2021_11_09_15_26.log",gr7)
x10 , y10 = read(r8,"2021_10_27_15_27_main.log",gr8)
x8 , y8 = read(r11,"2021_09_22_14_40.log",gr11)
x6 , y6 = read(r9,"2021_12_16_10_43_Danny.log",gr9)
x9 , y9 = read(r10,"2021_12_16_11_08_sFrank.log",gr10)

#x11 , y11 = read(r12,"2021_10_21_15_33.log",gr12)
x12 , y12 = read(r13,"2021_10_11_15_13.log",gr13)
x13 , y13 = read(r14,"2021_10_11_15_34.log",gr14)
x14 , y14 = read(r15,"2021_10_11_15_52.log",gr15)
x1 , y1 = read(r16,"2021_10_12_11_50.log",gr16)

y = np.concatenate((y1,y2,y3,y4,y5,y6,y7,y8,y9,y10,y12,y13,y14,y15))
x = np.concatenate((x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x12,x13,x14,x15),axis=1)


ind=sample(range(len(y)), len(y))
x=x[:,ind]
y=y[ind]
#%%
class spec_NN:
    def __init__(self, data,gt):
        self.data=data
        self.gt=gt
        self.xx=[]
        self.yy=[]
    def prepro(self):
        
        # self.data=data
        # self.gt=gt
        x=self.data.T
        y=np.array(self.gt)

        for i in range(len(x)-299):
            self.xx.append(x[i:i+300])
            self.yy.append(y[i+299])
        self.xx=np.array(self.xx)
        self.xx=self.xx.reshape(len(self.xx),300,300,1)
        self.yy=np.array(self.yy)
        self.yy=self.yy.reshape(len(self.yy),)
        


        self.lstmxx=x.reshape(len(x),1,300)
        self.lstmy= y.reshape(len(y),)
        
        self.yyy = np.zeros((len(x),300))
        self.lstmyy=np.zeros((len(x),150))
        for i in range(len(self.lstmy)):
            ind=self.lstmy[i]
            # self.lstmyy[i][ind+1]=0.125
            # self.lstmyy[i][ind]=0.125
            # self.lstmyy[i][ind-1]=0.5
            # self.lstmyy[i][ind-2]=0.125
            # self.lstmyy[i][ind-3]=0.125

            self.yyy[i][ind-1]=1
    
          
            self.lstmyy[i][ind+1]=0
            self.lstmyy[i][ind]=0
            self.lstmyy[i][ind-1]=1
            self.lstmyy[i][ind-2]=0
            self.lstmyy[i][ind-3]=0
        self.mxx=self.data.T.reshape(len(self.data.T),300,1)
        
        
        self.y_30=[]

        for i in range(len(y)):
            self.y_30.append(int(y[i]/5))
        self.y_30_onehot=np.zeros((len(self.y_30),30))
        for i in range(len(self.y_30)):
            self.y_30_onehot[i][self.y_30[i]-1]=1        
    def Inception(self,x,nb_filter_para):
        (branch1,branch2,branch3,branch4)= nb_filter_para
        branch1x1 = Conv1D(branch1[0],1, padding='same',strides=1,name=None)(x)

        branch3x3 = Conv1D(branch2[0],1, padding='same',strides=1,name=None)(x)
        branch3x3 = Conv1D(branch2[1],3, padding='same',strides=1,name=None)(branch3x3)

        branch5x5 = Conv1D(branch3[0],1, padding='same',strides=1,name=None)(x)
        branch5x5 = Conv1D(branch3[1],1, padding='same',strides=1,name=None)(branch5x5)

        branchpool = MaxPooling1D(pool_size=3,strides=1,padding='same')(x)
        branchpool = Conv1D(branch4[0],1,padding='same',strides=1,name=None)(branchpool)

        x = concatenate([branch1x1,branch3x3,branch5x5,branchpool],axis=2)

        return x
    def Conv1d_BN(self,x, nb_filter,kernel_size, padding='same',strides=1,name=None):
        if name is not None:
            bn_name = name + '_bn'
            conv_name = name + '_conv'
        else:
            bn_name = None
            conv_name = None

        x = Conv1D(nb_filter,kernel_size,padding=padding,strides=strides,activation='relu',name=conv_name)(x)
        x = BatchNormalization(name=bn_name)(x)
        return x
    def InceptionV1(self):
        
        inpt = Input(shape=(150,1))

        x = self.Conv1d_BN(inpt,64,7,strides=2,padding='same')
        x = MaxPooling1D(pool_size=3,strides=2,padding='same')(x)
        x = self.Conv1d_BN(x,192,3,strides=1,padding='same')
        x = MaxPooling1D(pool_size=2,strides=2,padding='same')(x)

        x = self.Inception(x,[(64,),(96,128),(16,32),(32,)]) #Inception 3a 28x28x256
        x = self.Inception(x,[(128,),(128,192),(32,96),(64,)]) #Inception 3b 28x28x480
        x = MaxPooling1D(pool_size=3,strides=2,padding='same')(x) #14x14x480

        x = self.Inception(x,[(192,),(96,208),(16,48),(64,)]) #Inception 4a 14x14x512
        x = self.Inception(x,[(160,),(112,224),(24,64),(64,)]) #Inception 4a 14x14x512
        x = self.Inception(x,[(128,),(128,256),(24,64),(64,)]) #Inception 4a 14x14x512
        x = self.Inception(x,[(112,),(144,288),(32,64),(64,)]) #Inception 4a 14x14x528
        x = self.Inception(x,[(256,),(160,320),(32,128),(128,)]) #Inception 4a 14x14x832
        x = MaxPooling1D(pool_size=3,strides=2,padding='same')(x) #7x7x832

        x = self.Inception(x,[(256,),(160,320),(32,128),(128,)]) #Inception 5a 7x7x832
        x = self.Inception(x,[(384,),(192,384),(48,128),(128,)]) #Inception 5b 7x7x1024

        #Using AveragePooling replace flatten
        x = AveragePooling1D(pool_size=7,strides=7,padding='same')(x)
        x = Flatten()(x)
        x = Dropout(0.95)(x)
        x = Dense(1000,activation='relu')(x)
        x = Dense(150,activation='softmax')(x)
        
        model=Model(inputs=inpt,outputs=x)
        
        return model    
    def mse(self,y_ture, y_pred):
        return -K.sum((y_pred * y_ture/K.sum(y_pred) ))
    def cnn2d(self,unit=32,dropout=0.5):
    
        loss = CategoricalCrossentropy()
        self.model = Sequential()
        self.model.add(Conv2D(unit, (3, 3), input_shape=(300,300,1), padding='same',activation='relu'))
        self.model.add(Conv2D(unit, (3, 3), activation='relu', padding='same'))
        self.model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
        self.model.add(Conv2D(unit, (3, 3), activation='relu', padding='same'))
        #self.model.add(Dropout(dropout))
        self.model.add(Conv2D(unit, (3, 3), activation='relu', padding='same'))
        self.model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
        self.model.add(Conv2D(unit*2, (3, 3), activation='relu', padding='same'))
        #self.model.add(Dropout(dropout))
        self.model.add(Conv2D(unit*2, (3, 3), activation='relu', padding='same'))
        self.model.add(Conv2D(unit*2, (3, 3), activation='relu', padding='same'))
        self.model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
        self.model.add(Conv2D(unit*2, (3, 3), activation='relu', padding='same'))
        #self.model.add(Dropout(dropout))
        self.model.add(Conv2D(unit*2, (3, 3), activation='relu', padding='same'))
        self.model.add(Conv2D(unit*3, (3, 3), activation='relu', padding='same'))
        self.model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
        self.model.add(Conv2D(unit*3, (3, 3), activation='relu', padding="same"))
        #self.model.add(Dropout(dropout))
        self.model.add(Conv2D(unit*3, (3, 3), activation='relu', padding="same"))
        self.model.add(Conv2D(unit*3, (3, 3), activation='relu', padding="same"))
        self.model.add(MaxPooling2D(pool_size=(2,2), strides=(2, 2)))
        #self.model.add(GlobalAveragePooling2D())
        self.model.add(Flatten())
        self.model.add(Reshape((-1,unit*3)))
        self.model.add(LSTM(unit*6))
        self.model.add(Dense(unit*6, activation='relu'))
        self.model.add(Dense(30, activation='softmax'))
        self.model.compile(loss=loss, optimizer="adam",metrics=['categorical_accuracy'])
        print(self.model.summary())        
        
        #mean_absolute_error
        #categorical_crossentropy categorical_accuracy
        callback = EarlyStopping(monitor="val_loss", patience=80, verbose=1, mode="auto")
        history = self.model.fit(self.xx, self.y_30_onehot, epochs=400, batch_size=64, validation_split=0.2, 
            callbacks=[callback],
            shuffle=True)



        self.pp=[]
        a=self.model.predict(self.mxx)
        for i in tqdm(range(len(self.lstmyy))):
            self.pp.append(np.argmax(a[i])*5+3)

        self.loss=history1.history['loss']
        self.valloss=history1.history['val_loss']
        print("validation:performance (Acc rate(AP3):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.8):], self.lstmy[int(len(self.lstmyy)*0.8):], bpm_error_tolerant=3)[0])
        print("validation:performance (Acc rate(AP5):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.8):], self.lstmy[int(len(self.lstmyy)*0.8):], bpm_error_tolerant=5)[0])
        print("validation:performance (Acc rate(AP10):", pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.8):], self.lstmy[int(len(self.lstmyy)*0.8):], bpm_error_tolerant=10)[0])
        # px.line(y=[history1.history['loss'],history1.history['val_loss']])
        # px.line(y=[np.array(self.pp),self.lstmy])
    def cnn1d(self,unit=128,kernel=10,dropout=0.5,epoch=80,early=50):
        
        loss = CategoricalCrossentropy()
        self.model_m = Sequential()
        self.model_m.add(Conv1D(unit, kernel, activation='relu', padding='same', input_shape=(300, 1)))
        self.model_m.add(Conv1D(unit, kernel, activation='relu' ))
        #self.model_m.add(GRU(64,return_sequences= True))
        #self.model_m.add(GRU()64,return_sequences= True))
        self.model_m.add(MaxPooling1D(3))
        self.model_m.add(Dropout(dropout))
        self.model_m.add(Conv1D(unit, kernel, activation='relu' ))
        self.model_m.add(Conv1D(unit*2, kernel, activation='relu' ))
        self.model_m.add(MaxPooling1D(3))
        self.model_m.add(Dropout(dropout))
        # self.model_m.add(Dropout(dropout))
        # self.model_m.add(Conv1D(unit*2, kernel, activation='relu' ))
        #self.model_m.add(Conv1D(unit*2, kernel, activation='relu'))
        #self.model_m.add(MaxPooling1D(3))
        #self.model_m.add(Conv1D(unit*2, kernel, activation='relu'))
        #self.model_m.add(Conv1D(unit*2, kernel, activation='relu'))
        #self.model_m.add(GRU(64))
        self.model_m.add(GlobalAveragePooling1D())
        
        
        self.model_m.add(Dense(150, activation='softmax'))
        self.model_m.compile(loss=loss, optimizer='adam',metrics=['categorical_accuracy'])
        print(self.model_m.summary())


        callback = EarlyStopping(monitor="val_loss", patience=early, verbose=1, mode="auto")
        history1 = self.model_m.fit(self.mxx, self.lstmyy, epochs=epoch, batch_size=64, validation_split=0.5, 
            callbacks=[callback],
            shuffle=True)
        print(self.model_m.summary())
        self.pp=[]
        a=self.model_m.predict(self.mxx)
        for i in tqdm(range(len(self.lstmyy))):
            self.pp.append(np.argmax(a[i]))

        self.loss=history1.history['loss']
        self.valloss=history1.history['val_loss']
        print("validation:performance (Acc rate(AP3):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=3)[0])
        print("validation:performance (Acc rate(AP5):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=5)[0])
        print("validation:performance (Acc rate(AP10):", pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=10)[0])
        # px.line(y=[history1.history['loss'],history1.history['val_loss']])
        # px.line(y=[np.array(self.pp),self.lstmy])
    def cnn_googlenet(self,epoch=100,early=30):
        self.V1 = self.InceptionV1()
        self.V1.summary()
        self.V1.compile(optimizer=Adam(lr=0.00001, beta_1=0.9, beta_2=0.999, epsilon=1e-08),loss = 'categorical_crossentropy',metrics=['accuracy'])
        callback = EarlyStopping(monitor="val_loss", patience=early, verbose=1, mode="auto")

        History = self.V1.fit(self.mxx, self.lstmyy, epochs=epoch, batch_size=32, validation_split=0.1, 
            callbacks=[callback],
            shuffle=True)

        self.pp=[]
        a=self.V1.predict(self.mxx)
        for i in tqdm(range(len(self.lstmyy))):
            self.pp.append(np.argmax(a[i]))

        self.loss=History.history['loss']
        self.valloss=History.history['val_loss']
        print("validation:performance (Acc rate(AP3):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=3)[0])
        print("validation:performance (Acc rate(AP5):" , pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=5)[0])
        print("validation:performance (Acc rate(AP10):", pf.performance( np.array(self.pp)[int(len(self.lstmyy)*0.9):], self.lstmy[int(len(self.lstmyy)*0.9):], bpm_error_tolerant=10)[0])
        


#History = InceptionV1_model.fit_generator(img_gen.flow(X_train*255, y_train, batch_size = 16),steps_per_epoch = len(X_train)/16, validation_data = (X_test,y_test), epochs = 30 )



tt=spec_NN(x, y)
tt.prepro()
#%%


#px.line(y=[ np.array(tt.pp),tt.lstmy])
#tt.cnn_googlenet()



#tt.cnn1d(128,20,0.6,200,80)
tt.cnn1d(8,10,0.7,400,80)
#tt.cnn2d(64,0.7)


p=tt.model_m.predict(tx.T.reshape(tx.shape[1],150,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)
pp=pp*5+3

print("test:performance (Acc rate(AP3)):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=3)[0])
print("test:performance (Acc rate(AP5)):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=5)[0])
print("test:performance (Acc rate(AP10)):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=10)[0])
p1=plt.plot(np.array(pp),'r')
plt.plot(ty.reshape(len(ty)),'b')
plt.show()
#px.line(y=[np.array(pp),ty.reshape(len(ty))])
#px.line(y=[tt.loss,tt.valloss])



print("smooth test:performance (Acc rate(AP3)):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=3)[0])
print("smooth test:performance (Acc rate(AP5)):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=5)[0])
print("smooth test:performance (Acc rate(AP10)):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=10)[0])
#px.line(y=[savgol_filter(np.array(pp), 15, 3),ty.reshape(len(ty))])
p2=plt.plot(savgol_filter(np.array(pp),15,3),'g')
plt.plot(ty.reshape(len(ty)),'b')
plt.show()

#########2d

p=tt.model.predict(tx.T.reshape(tx.shape[1],150,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)


print("test:performance (Acc rate(AP3):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=3)[0])
print("test:performance (Acc rate(AP5):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=5)[0])
print("test:performance (Acc rate(AP10):", pf.performance(np.array(pp), ty.reshape(len(ty)), bpm_error_tolerant=10)[0])
p1=plt.plot(np.array(pp),'r')
plt.plot(ty.reshape(len(ty)),'b')
plt.show()

print("smooth test:performance (Acc rate(AP3):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=3)[0])
print("smooth test:performance (Acc rate(AP5):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=5)[0])
print("smooth test:performance (Acc rate(AP10):", pf.performance(savgol_filter(np.array(pp), 15, 3), ty.reshape(len(ty)), bpm_error_tolerant=10)[0])



p2=plt.plot(savgol_filter(np.array(pp),15,3),'g')
plt.plot(ty.reshape(len(ty)),'b')
plt.show()

#%%

output=np.zeros(len(x.T))
high=[]
cum=np.zeros(len(x.T))
ind=[]
for i in range(len(x.T)):
    a=np.argmax(x.T[i,:])
    cum[i]=sum(x.T[i,(a-2):(a+3)])/sum(x.T[i,:])
    if cum[i]>0.1 and a < 120 and a >60:
        high.append(a)
        ind.append(i)










#%%

import lazypredict
from lazypredict.Supervised import LazyClassifier
from sklearn.datasets import load_breast_cancer
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

pca = PCA(n_components=150)
pca.fit(x.T)
x0 = pca.transform(x.T)
#x0=x.T
y_cl3=np.zeros(len(y))
for i in range(len(y)):
    if y[i]>85:
        y_cl3[i]=1
    elif y[i]<75:
        y_cl3[i]=3
    else:
        y_cl3[i]=2

train_x=x0[:16000,:]
test_x=x0[16000:,:]
train_y=y_cl3[:16000]
test_y=y_cl3[16000:]

clf = LazyClassifier(verbose=0,ignore_warnings=True, custom_metric=None)
models,predictions = clf.fit(train_x, test_x, train_y, test_y)

print(models)


# # 建立 KNN 模型
# knnModel = KNeighborsClassifier(n_neighbors=100)
# # 使用訓練資料訓練模型
# knnModel.fit(train_x,train_y)

# # 使用訓練資料預測分類
# predicted = knnModel.predict(test_x)
# ind_predicted= knnModel.predict(x0)
# accuracy_score(test_y,predicted)


#%%
x_H=x.T[ind_predicted==1,:]
y_H=y[ind_predicted==1]

x_M=x.T[ind_predicted==2,:]
y_M=y[ind_predicted==2]

x_L=x.T[ind_predicted==3,:]
y_L=y[ind_predicted==3]

#%%
tt_H=spec_NN(x_H.T[:,:650], y_H[:650])
tt_H.prepro()

tt_M=spec_NN(x_M.T[:,:16000], y_M[:16000])
tt_M.prepro()

tt_L=spec_NN(x_L.T[:,:650], y_L[:650])
tt_L.prepro()
#%%
tt_M.cnn1d(128,20,0.6,200,80)

#%%
p=tt_M.model_m.predict(x_M[16000:,:].reshape(-1,300,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)
px.line(y=[pp,y_M[16000:].reshape(-1,)])

#%%
########################HML HR 


def read(file_path,log_filename,truth):
    #get nss data and align data
    # file_path = "C:\\Users\\reduc\\Desktop\\20211029_roadtest APP狀態\\raw"
    # log_filename="2021_10_29_15_20.log"
    pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path, log_filename)
    for i in range(len(acc_y)):
        acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
        acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
        acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
    acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

    algo = Alg_freq_domain(fs=64, fft_window_size=32)
    algo.acc_x = acc_x
    algo.acc_y = acc_y
    algo.acc_z = acc_z

    algo.get_heart_rate(pressure_data, acc_data)

    y=pd.read_csv(truth)

    if algo.ss.shape[1]>len(y):
        algo.ss=algo.ss[:,:len(y)]
    else:
        y=y[:algo.ss.shape[1]]


    return algo.ss[:300,:] , np.array(y)


def read_denois(file_path,log_filename,truth):
    # file_path = "C:\\Users\\reduc\\Desktop\\20211029_roadtest APP狀態\\raw"
    # log_filename="2021_10_29_15_20.log"
    pressure_data, acc_x, acc_y, acc_z, start_time = rd.read_pressure_acc(file_path, log_filename)
    for i in range(len(acc_y)):
        acc_y[i] = 65535 - acc_y[i] if acc_y[i] > 50000 else acc_y[i]
        acc_z[i] = 65535 - acc_z[i] if acc_z[i] > 50000 else acc_z[i]
        acc_x[i] = 65535 - acc_x[i] if acc_x[i] > 50000 else acc_x[i]
    acc_data = (acc_x ** 2 + acc_y ** 2 + acc_z ** 2) ** 0.5

    algo = Alg_freq_domain(fs=64, fft_window_size=32)
    algo.acc_x = acc_x
    algo.acc_y = acc_y
    algo.acc_z = acc_z

    algo.get_heart_rate(pressure_data, acc_data)

    y=pd.read_csv(truth)
    denoise=algo.ss-algo.nss
    if denoise.shape[1]>len(y):
        denoise=denoise[:,:len(y)]
    else:
        y=y[:denoise.shape[1]]


    return denoise[:300,:] , np.array(y)
    
   
r1=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr1=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_09_15_25_bitalinoECG.csv")

r2=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr2=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_09_16_04_bitalinoECG.csv")

r3=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr3=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_09_16_32_bitalinoECG.csv")

r4=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr4=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_11_09_49_bitalinoECG.csv")

r5=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr5=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_11_10_28_bitalinoECG.csv")

r6=os.path.join("20220211_office",'10分鐘靜止',"raw")
gr6=os.path.join("20220211_office",'10分鐘靜止',"bitalino",'bpm',"2022_02_11_13_21_bitalinoECG.csv")

r7=os.path.join("20220321_Gary")
gr7=os.path.join("20220321_Gary","2022_03_21_14_28_GoldenHR.csv")



x1 , y1 = read(r1,"2022_02_09_15_25.log",gr1)
x2 , y2 = read(r2,"2022_02_09_16_04.log",gr2)
x3 , y3 = read(r3,"2022_02_09_16_32.log",gr3)
x4 , y4 = read(r4,"2022_02_11_09_49.log",gr4)
x5 , y5 = read(r5,"2022_02_11_10_28.log",gr5)
x6 , y6 = read(r6,"2022_02_11_13_21.log",gr6)
x7 , y7 = read(r7,"2022_03_21_14_28.log",gr7)
y = np.concatenate((y1,y2,y3,y4,y5,y6))
x = np.concatenate((x1,x2,x3,x4,x5,x6),axis=1)

# y = np.concatenate((y4,y5,y6))
# x = np.concatenate((x4,x5,x6),axis=1)


#%%
y_3c=np.zeros(len(y))

for i in range(len(y_3c)):
    if y[i]>80:
        y_3c[i]=1
    elif y[i]<71:
        y_3c[i]=3
    else:
        y_3c[i]=2

from sklearn.svm import SVC

X_train, X_test, y_train, y_test = train_test_split(x.T,y_3c,test_size=0.3)

model = SVC(kernel='rbf')
model.fit(X_train,y_train)


predictions=model.predict(X_test)
print(classification_report(y_train,model.predict(X_train)))
print(classification_report(y_test,predictions))
#%%

ind_predicted= model.predict(x.T)
x_H=x.T[ind_predicted==1,:]
y_H=y[ind_predicted==1]

x_M=x.T[ind_predicted==2,:]
y_M=y[ind_predicted==2]

x_L=x.T[ind_predicted==3,:]
y_L=y[ind_predicted==3]





tt_H=spec_NN(x_H.T, y_H)
tt_H.prepro()

tt_M=spec_NN(x_M.T, y_M)
tt_M.prepro()

tt_L=spec_NN(x_L.T, y_L)
tt_L.prepro()
#%%
tt_L.cnn1d(128,20,0.6,200,80)
tt_M.cnn1d(128,20,0.6,200,80)
tt_H.cnn1d(128,20,0.6,200,80)
#%%
###########################################M
p=tt_M.model_m.predict(x_M.reshape(x_M.T.shape[1],300,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)


print("test:performance (Acc rate(AP3)):", pf.performance(np.array(pp), y_M.reshape(len(y_M)), bpm_error_tolerant=3)[0])
print("test:performance (Acc rate(AP5)):", pf.performance(np.array(pp), y_M.reshape(len(y_M)), bpm_error_tolerant=5)[0])
print("test:performance (Acc rate(AP10)):", pf.performance(np.array(pp), y_M.reshape(len(y_M)), bpm_error_tolerant=10)[0])
p1=plt.plot(savgol_filter(pp,15,3),'r')
plt.plot(y_M.reshape(len(y_M)),'b')
plt.show()



###########################################L
p=tt_L.model_m.predict(x_L.reshape(x_L.T.shape[1],300,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)


print("test:performance (Acc rate(AP3)):", pf.performance(np.array(pp), y_L.reshape(len(y_L)), bpm_error_tolerant=3)[0])
print("test:performance (Acc rate(AP5)):", pf.performance(np.array(pp), y_L.reshape(len(y_L)), bpm_error_tolerant=5)[0])
print("test:performance (Acc rate(AP10)):", pf.performance(np.array(pp), y_L.reshape(len(y_L)), bpm_error_tolerant=10)[0])
p1=plt.plot(savgol_filter(pp,9,3),'r')
plt.plot(y_L.reshape(len(y_L)),'b')
plt.show()




#########################################H
p=tt_H.model_m.predict(x_H.reshape(x_H.T.shape[1],300,1))
pp=[]
for i in tqdm(range(len(p))):
    pp.append(np.argmax(p[i]))
pp=np.array(pp)


print("test:performance (Acc rate(AP3)):", pf.performance(np.array(pp), y_H.reshape(len(y_H)), bpm_error_tolerant=3)[0])
print("test:performance (Acc rate(AP5)):", pf.performance(np.array(pp), y_H.reshape(len(y_H)), bpm_error_tolerant=5)[0])
print("test:performance (Acc rate(AP10)):", pf.performance(np.array(pp), y_H.reshape(len(y_H)), bpm_error_tolerant=10)[0])
p1=plt.plot(np.array(pp),'r')
plt.plot(y_H.reshape(len(y_H)),'b')
plt.show()
#px.line(y=[np.arr






#%% 
def predict_svmcnn(input , y):

    result = []
    h=0
    m=0
    l=0
    for i in range(len(input)):
        x=input[i,:].reshape(1,300)
        
        if model.predict(x.reshape(1,300))==1:
            pp=tt_H.model_m.predict(x.reshape(-1,300,1))
            h=h+1
        elif model.predict(x.reshape(1,300))==2:
            m=m+1
            pp=tt_M.model_m.predict(x.reshape(-1,300,1))
        elif model.predict(x.reshape(1,300))==3:
            #print(i)
            pp=tt_L.model_m.predict(x.reshape(-1,300,1))
            l=l+1
        result.append(np.argmax(pp))
    
    return result ,h,m,l
